{
    "category": { "name": "ko" },
    "type": "ko",
    "fallbackType": "ko",
    "ko": "한국어",
    "en": "English",
    "jp": "日本語",
    "vn": "tiếng Việt",
    "Command": {
        "1": "장면 추가하기",
        "2": "장면 삭제하기",
        "3": "장면 이름 수정",
        "4": "장면 순서 변경",
        "5": "장면 선택",
        "101": "블록 쓰레드 추가하기",
        "102": "블록 쓰레드 삭제하기",
        "103": "블록 삭제하기",
        "104": "블록 복구하기",
        "105": "블록 끼워넣기",
        "106": "블록 분리하기",
        "107": "블록 이동하기",
        "108": "블록 복제하기",
        "109": "블록 복제 취소하기",
        "110": "스크롤",
        "111": "블록 필드값 수정",
        "117": "블록 쓰레드 추가하기",
        "118": "블록 끼워넣기",
        "119": "블록 이동하기",
        "120": "블록 분리하기",
        "121": "블록 이동하기",
        "122": "블록 끼워넣기",
        "123": "블록 끼워넣기",
        "201": "오브젝트 선택하기",
        "202": "오브젝트 수정 버튼 클릭",
        "203": "오브젝트 그림 추가",
        "204": "오브젝트 그림 삭제",
        "205": "오브젝트 소리 추가",
        "206": "오브젝트 소리 삭제",
        "207": "오브젝트 이름 수정",
        "208": "오브젝트 추가",
        "209": "오브젝트 삭제",
        "210": "오브젝트 추가 버튼 클릭",
        "211": "오브젝트 x 수정",
        "212": "오브젝트 y 수정",
        "213": "오브젝트 size 수정",
        "214": "오브젝트 방향 수정",
        "215": "오브젝트 이동 방향 수정",
        "216": "오브젝트 회전방식 수정",
        "217": "엔터티 모델 동기화",
        "301": "do",
        "302": "undo",
        "303": "redo",
        "401": "그림 수정하기",
        "402": "그림 수정 취소하기",
        "403": "그림 수정하기",
        "404": "그림 수정 취소하기",
        "405": "글상자 수정",
        "501": "시작하기",
        "502": "정지하기",
        "601": "컨테이너 오브젝트 선택하기",
        "701": "모드 바꾸기",
        "702": "모양 추가 버튼 클릭",
        "703": "소리 추가 버튼 클릭",
        "801": "속성 필터 선택하기",
        "802": "변수 추가하기 버튼 클릭",
        "803": "변수 추가하기",
        "804": "변수 삭제하기",
        "805": "변수 이름 설정",
        "806": "신호 이름 설정",
        "807": "신호 추가",
        "808": "신호 삭제",
        "809": "변수 스코프 정하기",
        "810": "변수 글로벌 체크",
        "811": "변수 보이기 체크",
        "812": "변수 기본값 설정",
        "813": "변수 슬라이드로 체크",
        "814": "변수 최솟값 정하기",
        "815": "변수 최댓값 정하기",
        "816": "리스트 추가 버튼 클릭",
        "817": "리스트 추가",
        "818": "리스트 삭제",
        "819": "리스트 이름 정하기",
        "820": "리스트 스코프 정하기",
        "821": "리스트 글로벌 체크",
        "822": "리스트 보이기 체크",
        "823": "리스트 길이 변경",
        "824": "리스트 기본값 설정",
        "825": "메세지 수정 enable",
        "826": "변수 수정 enable",
        "827": "리스트 수정 enable",
        "828": "변수 이름 정하기",
        "829": "리스트 이름 정하기",
        "900": "모달 닫기",
        "1001": "함수 생성 시작",
        "1002": "함수 수정 시작",
        "1003": "함수 수정 취소",
        "1004": "함수 생성",
        "1005": "함수 업데이트"
    },
    "CommandTooltip": {
        "101": "블록 쓰레드 추가하기",
        "102": "블록 쓰레드 삭제하기",
        "103": "블록 삭제하기",
        "104": "블록 복구하기",
        "105": "코드 분리하기$$코드 연결하기@@이 코드의 가장 위에 있는 블록을 잡고 분리하여 끌어옵니다.$$이 곳에 코드를 연결합니다.$$이 곳에 블록의 왼쪽 끝을 끼워 넣습니다.",
        "106": "블록 분리하기",
        "107": "블록 이동하기",
        "108": "블록 복제하기",
        "109": "블록 복제 취소하기",
        "110": "스크롤",
        "111": "블록 필드값 수정@@값을 입력하기 위해 이곳을 클릭합니다.$$선택지를 클릭합니다.$$선택지를 클릭합니다.$$&value&을 입력합니다.$$&value&를 선택합니다.$$키보드 &value&를 누릅니다.",
        "117": "블록 쓰레드 추가하기",
        "118": "블록 연결하기@@이 곳에 블록을 연결합니다.$$이 곳에 블록의 왼쪽 끝을 끼워 넣습니다.",
        "119": "블록 가져오기@@빈 곳에 블록을 끌어다 놓습니다.",
        "120": "블록 분리하기$$블록 삭제하기@@필요 없는 코드를 <b>휴지통</b>으로 끌어옵니다.$$이 곳에 코드를 버립니다.",
        "121": "블록 이동하기$$블록 삭제하기@@필요 없는 코드를 <b>휴지통</b>으로 끌어옵니다.$$이 곳에 코드를 버립니다.",
        "122": "블록 연결하기@@이 곳에 블록을 연결합니다.$$이 곳에 블록의 왼쪽 끝을 끼워 넣습니다.",
        "123": "코드 분리하기$$코드 연결하기@@이 코드의 가장 위에 있는 블록을 잡고 분리하여 끌어옵니다.$$이 곳에 코드를 연결합니다.$$이 곳에 블록의 왼쪽 끝을 끼워 넣습니다.",
        "201": "오브젝트 선택하기",
        "301": "do",
        "302": "undo",
        "303": "redo",
        "401": "그림 수정하기",
        "402": "그림 수정 취소하기",
        "403": "그림 수정하기",
        "404": "그림 수정 취소하기",
        "501": "실행하기@@<b>[시작하기]</b>를 누릅니다.",
        "502": "정지하기@@<b>[정지하기]</b>를 누릅니다.",
        "601": "컨테이너 오브젝트 선택하기",
        "701": "모드 바꾸기",
        "702": "모양 추가하기@@<b>모양추가</b>를 클릭합니다.",
        "703": "소리 추가하기@@<b>소리추가</b>를 클릭합니다.",
        "801": "변수 속성창 필터 선택하기",
        "802": "변수 추가하기@@<b>[변수 추가]</b>를 클릭합니다.",
        "803": "변수 추가하기@@<b>[확인]</b>을 클릭합니다.",
        "804": "변수 삭제하기@@이 버튼을 눌러 변수를 삭제합니다.",
        "805": "변수 이름 설정",
        "1101": "확장 블록 추가하기@@<b>확장 블록 블러오기</b>를 클릭합니다."
    },
    "Users": {
        "auth_failed": "인증에 실패하였습니다",
        "birth_year": "태어난 해",
        "birth_year_before_1990": "1990년 이전",
        "edit_personal": "회원 정보 수정",
        "email": "이메일",
        "email_desc": "새 소식이나 정보를 받을 수 있 이메일 주소",
        "email_inuse": "이미 등록된 메일주소 입니다",
        "email_match": "이메일 주소를 올바르게 입력해 주세요",
        "forgot_password": "암호를 잊으셨습니까?",
        "job": "직업",
        "language": "언어",
        "name": "이름",
        "name_desc": "사이트내에서 표현될 이름 또는 별명",
        "name_not_empty": "이름을 반드시 입력하세요",
        "password": "암호",
        "password_desc": "최소 4자이상 영문자와 숫자, 특수문자",
        "password_invalid": "암호가 틀렸습니다",
        "password_long": "암호는 4~20자 사이의 영문자와 숫자, 특수문자로 입력해 주세요",
        "password_required": "암호는 필수입력 항목입니다",
        "project_list": "작품 조회",
        "my_page": "마이 페이지",
        "regist": "가입 완료",
        "rememberme": "자동 로그인",
        "repeat_password": "암호 확인",
        "repeat_password_desc": "암호를 한번더 입력해 주세요",
        "repeat_password_not_match": "암호가 일치하지 않습니다",
        "sex": "성별",
        "signup_required_for_save": "저장을 하려면 로그인이 필요합니다.",
        "username": "아이디",
        "username_desc": "로그인시 사용할 아이디",
        "username_inuse": "이미 사용중인 아이디 입니다",
        "username_long": "아이디는 4~20자 사이의 영문자로 입력해 주세요",
        "username_unknown": "존재하지 않는 사용자 입니다",
        "already_verified": "이미 인증된 메일 주소입니다.",
        "email_address_unavailable": "유효하지 않은 인증 메일입니다.",
        "email_address_invalid_for_idpw": "유효하지 않은 인증 메일입니다.\n [아이디와 비밀번호 찾기] 메일 발송하기를\n 다시 시도해 주세요.",
        "email_address_invalid_for_certification": "유효하지 않은 인증 메일입니다.\n [인증 메일 발송하기]를 다시 시도해 주세요.",
        "verification_complete": "이메일 주소가 인증되었습니다.",
        "reset_password_mail_sent": "비밀번호 재설정 메일이 발송되었습니다. 메일을 확인해주세요.",
        "email_not_verified": "인증되지 않은 이메일 주소입니다. 인증 메일을 발송하여, 먼저 이메일 주소를 인증해주세요.",
        "verification_email_send_complete": "인증 메일이 발송되었습니다. 먼저 메일 주소를 인증해주세요.",
        "email_send_failed": "전송에 실패했습니다. 다시 한번 시도해주세요.",
        "email_not_exist": "등록되지 않은 이메일 주소입니다.",
        "not_valid_email": "올바른 형식의 이메일 주소를 입력해주세요."
    },

    "code": "코드보기",

    "PythonHelper": {
        "when_run_button_click_desc": "[시작하기]버튼을 클릭하면 아래 명령어들을 실행합니다.<br>아래 명령어는 [Tab]키를 통해 들여쓰기합니다.",
        "when_run_button_click_exampleCode": "def when_start():\n    Entry.print(\\\"안녕!\\\")",
        "when_run_button_click_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 \\\"안녕!\\\"이라 말합니다.",
        "when_some_key_pressed_desc": "A키를 누르면 아래 명령어들을 실행합니다.<br>아래 명령어는 [Tab]키를 통해 들여쓰기합니다.",
        "when_some_key_pressed_elements": "A-- 아래 선택지 중 하나<br>① 알파벳 : \\\"A\\\", \\\"B\\\" ~ \\\"Z\\\" 등(소문자 가능)<br>② 숫자 : 1, 2, 3, 4 ~ 9, 0<br>③ 특수키 : \\\"space\\\", \\\"enter\\\"<br>④ 방향키 : \\\"up\\\", \\\"down\\\", \\\"right\\\", \\\"left\\\"",
        "when_some_key_pressed_exampleCode": "def when_press_key(\\\"W\\\"):\n    Entry.move_to_direction(10)\n\ndef when_press_key(1):\n    Entry.add_size(10)",
        "when_some_key_pressed_exampleDesc": "W키를 누르면 오브젝트가 이동방향으로 10만큼 이동하고, 1키를 누르면 오브젝트의 크기가 10만큼 커집니다.",
        "mouse_clicked_desc": "마우스를 클릭했을 때 아래 명령어들을 실행합니다.<br>아래 명령어는 [Tab]키를 통해 들여쓰기합니다.",
        "mouse_clicked_exampleCode": "def when_click_mouse_on():\n    Entry.add_size(10)\n    Entry.move_to_direction(10)",
        "mouse_clicked_exampleDesc": "마우스를 클릭하면 오브젝트의 크기가 10만큼 커지면서 이동방향으로 10만큼 이동합니다.",
        "mouse_click_cancled_desc": "마우스 클릭을 해제했을 때 아래 명령어들을 실행합니다.<br>아래 명령어는 [Tab]키를 통해 들여쓰기합니다.",
        "mouse_click_cancled_exampleCode": "def when_click_mouse_off():\n    Entry.move_to_direction(-10)\n\ndef when_click_mouse_on():\n    Entry.move_to_direction(10)",
        "mouse_click_cancled_exampleDesc": "마우스를 클릭하면 오브젝트가 이동방향으로 10만큼 이동하고, 마우스 클릭을 해제하면 오브젝트가 이동방향으로 -10만큼 이동합니다.",
        "when_object_click_desc": "해당 오브젝트를 클릭했을 때 아래 명령어들을 실행합니다.<br>아래 명령어는 [Tab]키를 통해 들여쓰기합니다.",
        "when_object_click_exampleCode": "def when_click_object_on():\n    Entry.print_for_sec(\\\"회전!\\\", 0.5)\n    Entry.add_rotation(90)",
        "when_object_click_exampleDesc": "오브젝트를 클릭하면 오브젝트가 \\\"회전!\\\"이라 말하고, 90도 만큼 회전합니다.",
        "when_object_click_canceled_desc": "해당 오브젝트 클릭을 해제했을 때 아래 명령어들을 실행합니다.<br>아래 명령어는 [Tab]키를 통해 들여쓰기합니다.",
        "when_object_click_canceled_exampleCode": "def when_click_object_on():\n    Entry.add_rotation(90)\n\ndef when_click_object_off():\n    Entry.add_rotation(-90)",
        "when_object_click_canceled_exampleDesc": "오브젝트를 클릭하면 오브젝트가 90도 만큼 회전하고, 오브젝트 클릭을 해제하면 오브젝트가 -90도 만큼 회전합니다.",
        "when_message_cast_desc": "A 신호를 받으면 아래 명령어들을 실행합니다.<br>아래 명령어는 [Tab]키를 통해 들여쓰기합니다.<br>만약 A 신호가 없으면  [속성] 탭에 A 신호가 자동 생성됩니다.",
        "when_message_cast_elements": "A-- \\\"신호 이름\\\"",
        "when_message_cast_exampleCode": "def when_click_mouse_on():\n    Entry.send_signal(\\\"신호\\\")\n\ndef when_get_signal(\\\"신호\\\"):\n    Entry.print_for_sec(\\\"안녕! 반가워\\\", 0.5)",
        "when_message_cast_exampleDesc": "마우스를 클릭하면 \\\"신호\\\"를 보내고, \\\"신호\\\"를 받았을때 \\\"안녕! 반가워\\\"라고 0.5초간 말합니다.",
        "message_cast_desc": "A에 입력된 신호를 보냅니다.<br>만약 A 신호가 없으면  [속성] 탭에 A 신호가 자동 생성됩니다.",
        "message_cast_elements": "A-- \\\"신호 이름\\\"",
        "message_cast_exampleCode": "#\\\"오브젝트1\\\"의 파이선 코드\ndef when_start():\n    Entry.print_for_sec(\\\"안녕! 넌 몇살이니?\\\", 2)\n    Entry.send_signal(\\\"신호\\\")\n\n#\\\"오브젝트2\\\"의 파이선 코드\ndef when_get_signal(\\\"신호\\\"):\n    Entry.print_for_sec(\\\"안녕? 난 세 살이야.\\\", 2)",
        "message_cast_exampleDesc": "[시작하기]버튼을 클릭하면 \\\"오브젝트1\\\"이 \\\"안녕! 넌 몇살이니?\\\"라고 2초간 말하고 \\\"신호를 보냅니다., \\\"오브젝트2\\\"가 \\\"신호\\\"를 받았을때 \\\"안녕? 난 세 살이야.\\\"라고 2초간 말합니다.",
        "message_cast_wait_desc": "A에 입력된 신호를 보내고, 해당 신호를 받는 명령어들의 실행이 끝날 때까지 기다립니다.<br>만약 A 신호가 없으면  [속성] 탭에 A 신호가 자동 생성됩니다.",
        "message_cast_wait_elements": "A-- \\\"신호 이름\\\"",
        "message_cast_wait_exampleCode": "#\\\"오브젝트1\\\"의 파이선 코드\ndef when_start():\n    Entry.print_for_sec(\\\"숨바꼭질하자!\\\", 2)\n    Entry.send_signal_wait(\\\"신호\\\")\n    Entry.hide()\n\n#\\\"오브젝트2\\\"의 파이선 코드\ndef when_get_signal(\\\"신호\\\"):\n    Entry.print_for_sec(\\\"그래!\\\", 2)",
        "message_cast_wait_exampleDesc": "[시작하기]버튼을 클릭하면 \\\"오브젝트1\\\"이 \\\"숨바꼭질하자!\\\"라고 2초 동안 말하고 \\\"신호\\\"를 보낸 후 기다립니다. \\\"오브젝트2\\\"가 \\\"신호\\\"를 받으면 \\\"그래!\\\"를 2초 동안 말합니다. \\\"오브젝트1\\\"이 그 후에 모양을 숨깁니다.",
        "when_scene_start_desc": "장면이 시작되면 아래 명령어들을 실행합니다.<br>아래 명령어는 [Tab]키를 통해 들여쓰기합니다.",
        "when_scene_start_exampleCode": "#\\\"장면 1\\\"의 파이선 코드\ndef when_start():\n    Entry.print_for_sec(\\\"다른 곳으로 가볼까?\\\", 2)\n    Entry.start_scene(\\\"장면 2\\\")\n\n#\\\"장면 2\\\"의 파이선 코드\ndef when_start_scene():\n    Entry.print(\\\"여기가 어디지?\\\")",
        "when_scene_start_exampleDesc": "\\\"장면 1\\\"에서 [시작하기]버튼을 클릭하면 \\\"다른 곳으로 가볼까?\\\"라고 2초간 말하고, \\\"장면 2\\\"가 시작됩니다. \\\"장면 2\\\"가 시작되면 오브젝트가 \\\"여기가 어디지?\\\"라고 말합니다.",
        "start_scene_desc": "A 장면을 시작합니다.",
        "start_scene_elements": "A-- \\\"장면 이름\\\"",
        "start_scene_exampleCode": "#\\\"장면 1\\\"의 파이선 코드\ndef when_click_object_on():\n    Entry.start_scene(\\\"장면 2\\\")",
        "start_scene_exampleDesc": "\\\"장면 1\\\"에서 해당 오브젝트를 클릭하면 \\\"장면 2\\\"가 시작됩니다.",
        "start_neighbor_scene_desc": "A에 입력한 다음 또는 이전 장면을 시작합니다.",
        "start_neighbor_scene_elements": "A-- 아래 선택지 중 하나<br>① 다음 장면: \\\"next\\\" 또는 \\\"다음\\\"<br>② 이전 장면: \\\"prev\\\" 또는 \\\"이전\\\"",
        "start_neighbor_scene_exampleCode": "#\\\"장면 1\\\"의 파이선 코드\ndef when_press_key(\\\"right\\\"):\n    Entry.start_scene_of(\\\"next\\\")\n\n#\\\"장면 2\\\"의 파이선 코드\ndef when_press_key(\\\"left\\\"):\n    Entry.start_scene_of(\\\"prev\\\")",
        "start_neighbor_scene_exampleDesc": "\\\"장면 1\\\"에서 오른쪽화살표키를 누르면 다음 장면이, \\\"장면 2\\\"에서 왼쪽화살표키를 누르면 이전 장면이 시작됩니다.",
        "wait_second_desc": "A초만큼 기다린 후 다음 블록을 실행합니다.",
        "wait_second_elements": "A-- 초에 해당하는 수 입력",
        "wait_second_exampleCode": "def when_start():\n    Entry.add_effect(\\\"color\\\", 10)\n    Entry.wait_for_sec(2)\n    Entry.add_size(10)",
        "wait_second_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트에 색깔효과를 10만큼 주고, 2초동안 기다린 다음 크기를 10만큼 커지게 합니다.",
        "repeat_basic_desc": "아래 명령어들을 A번 반복하여 실행합니다.<br>아래 명령어는 [Tab]키를 통해 들여쓰기합니다.",
        "repeat_basic_elements": "A-- 반복할 횟수 입력",
        "repeat_basic_exampleCode": "def when_start():\n    for i in range(10):\n        Entry.move_to_direction(10)\n        Entry.stamp()",
        "repeat_basic_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 이동방향으로 10만큼 이동하고, 도장찍는 행동을 10번 반복합니다.",
        "repeat_inf_desc": "A 판단이 True인 동안 아래 명령어들을 반복 실행합니다. A에 True를 입력하면 계속 반복됩니다. <br>아래 명령어는 [Tab]키를 통해 들여쓰기합니다.",
        "repeat_inf_elements": "A-- True 또는 False로 판단할 수 있는 명령어 입력(판단 카테고리의 명령어)<br>① True, False<br>② 10 == 10 , 10 > 10 , 10 <= 10 등<br>③ Entry.is_mouse_clicked(), Entry.is_key_pressed(\\\"Q\\\") 등",
        "repeat_inf_exampleCode": "def when_start():\n    while True:\n        Entry.move_to_direction(10)\n        Entry.bounce_on_edge()",
        "repeat_inf_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 계속해서 이동방향으로 10만큼 이동하고, 벽에 닿으면 튕깁니다.",
        "repeat_while_true_desc": "A 판단이 True가 될 때까지 아래 명령어들을 반복 실행합니다.<br>아래 명령어는 [Tab]키를 통해 들여쓰기합니다.",
        "repeat_while_true_elements": "A-- True 또는 False로 판단할 수 있는 명령어 입력(판단 카테고리의 명령어)<br>① True, False<br>② 10 == 10 , 10 > 10 , 10 <= 10 등<br>③ Entry.is_mouse_clicked(), Entry.is_key_pressed(\\\"Q\\\") 등",
        "repeat_while_true_exampleCode": "def when_start():\n    while not Entry.is_key_pressed(\\\"space\\\"):\n        Entry.add_rotation(90)",
        "repeat_while_true_exampleDesc": "[시작하기]버튼을 클릭하면 스페이스키를 누를때까지 오브젝트가 90도 만큼 회전합니다.",
        "stop_repeat_desc": "이 명령어와 가장 가까운 반복 명령어의 반복을 중단합니다.",
        "stop_repeat_exampleCode": "def when_start():\n    while True:\n        Entry.move_to_direction(10)\n        if Entry.is_key_pressed(\\\"enter\\\"):\n            break",
        "stop_repeat_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 이동방향으로 10만큼 계속 이동합니다. 엔터키를 누르면 반복이 중단됩니다.",
        "_if_desc": "A 부분의 판단이 True이면 if A:아래 명령어들을 실행하고, False이면 실행하지 않습니다.<br>아래 명령어는 [Tab]키를 통해 들여쓰기합니다.",
        "_if_elements": "A-- True 또는 False로 판단할 수 있는 명령어 입력(판단 카테고리의 명령어)<br>① True, False<br>② 10 == 10 , 10 > 10 , 10 <= 10 등<br>③ Entry.is_mouse_clicked(), Entry.is_key_pressed(\\\"Q\\\") 등",
        "_if_exampleCode": "def when_click_mouse_on():\n    if (Entry.value_of_mouse_pointer(\\\"x\\\") > 0):\n        Entry.print_for_sec(\\\"오른쪽!\\\", 0.5)",
        "_if_exampleDesc": "마우스를 클릭했을 때 마우스 x좌표가 0보다 크면 오브젝트가 \\\"오른쪽!\\\"이라고 0.5초 동안 말합니다.",
        "if_else_desc": "A 부분의 판단이 True이면 if A: 아래 명령어들을 실행하고, False이면 else: 아래 명령어들을 실행합니다.<br>아래 명령어는 [Tab]키를 통해 들여쓰기합니다.",
        "if_else_elements": "A-- True 또는 False로 판단할 수 있는 명령어 입력(판단 카테고리의 명령어)<br>① True, False<br>② 10 == 10 , 10 > 10 , 10 <= 10 등<br>③ Entry.is_mouse_clicked(), Entry.is_key_pressed(\\\"Q\\\") 등",
        "if_else_exampleCode": "def when_click_mouse_on():\n    if Entry.is_touched(\\\"mouse_pointer\\\"):\n        Entry.print(\\\"닿았다!\\\")\n    else:\n        Entry.print(\\\"안 닿았다!\\\")",
        "if_else_exampleDesc": "마우스를 클릭했을 때 마우스포인터가 오브젝트에 닿았으면 \\\"닿았다!\\\"를 그렇지 않으면 \\\"안 닿았다!\\\"를 말합니다.",
        "wait_until_true_desc": "A 부분의 판단이 True가 될 때까지 코드의 실행을 멈추고 기다립니다.",
        "wait_until_true_elements": "A-- True 또는 False로 판단할 수 있는 명령어 입력(판단 카테고리의 명령어)<br>① True, False<br>② 10 == 10 , 10 > 10 , 10 <= 10 등<br>③ Entry.is_mouse_clicked(), Entry.is_key_pressed(\\\"Q\\\") 등",
        "wait_until_true_exampleCode": "def when_start():\n    Entry.print(\\\"엔터를 눌러봐!\\\")\n    Entry.wait_until(Entry.is_key_pressed(\\\"enter\\\"))\n    Entry.print(\\\"잘했어!\\\")",
        "wait_until_true_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 \\\"엔터를 눌러봐!\\\"라 말하고, 엔터키를 누를 때까지 기다립니다. 엔터키를 누르면 \\\"잘했어!\\\"라 말합니다.",
        "stop_object_desc": "A코드의 실행을 중지합니다.",
        "stop_object_elements": "A-- 아래 선택지 중 하나<br>① \\\"all\\\":  모든 오브젝트의 모든 코드<br>② \\\"self\\\" : 해당 오브젝트의 모든 코드<br>③ \\\"this\\\": 이 명령어가 포함된 코드<br>④ \\\"others\\\" : 해당 오브젝트의 코드 중 이 명령어가 포함된 코드를 제외한 모든 코드<br/>⑤ \\\"ohter_objects\\\" : 이 오브젝트를 제외한 다른 모든 오브젝트의 코드",
        "stop_object_exampleCode": "def when_start():\n    while True:\n        Entry.move_to(\\\"mouse_pointer\\\")\n\ndef when_press_key(\\\"space\\\"):\n    Entry.stop_code(\\\"all\\\")\n",
        "stop_object_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 계속해서 마우스포인터 위치로  이동합니다. 스페이스키를 누르면 모든 코드의 실행이 중지됩니다.",
        "restart_project_desc": "작품을 처음부터 다시 실행합니다.",
        "restart_project_exampleCode": "def when_start():\n    while True:\n        Entry.add_size(10)\n\ndef when_press_key(\\\"enter\\\"):\n    Entry.start_again()",
        "restart_project_exampleDesc": "[시작하기]버튼을 클릭하면 계속해서 오브젝트의 크기가 커집니다. 엔터키를 누르면 작품을 처음부터 다시 실행합니다.",
        "when_clone_start_desc": "해당 오브젝트의 복제본이 새로 생성되었을 때 아래 명령어들을 실행합니다.<br>아래 명령어는 [Tab]키를 통해 들여쓰기합니다.",
        "when_clone_start_exampleCode": "def when_start():\n    for i in range(5):\n        Entry.make_clone_of(\\\"self\\\")\n\ndef when_make_clone():\n    Entry.set_x(random.randint(-200, 200))",
        "when_clone_start_exampleDesc": "[시작하기]버튼을 클릭하면 자신의 복제본 5개를 만듭니다. 복제본이 새로 생성되었을때 복제본의 x좌표를 -200에서 200사이의 무작위수로 정합니다.",
        "create_clone_desc": "A 오브젝트의 복제본을 생성합니다.",
        "create_clone_elements": "A-- 아래 선택지 중 하나<br>① \\\"오브젝트 이름\\\"<br>② \\\"self\\\" 또는 \\\"자신\\\"",
        "create_clone_exampleCode": "def when_start():\n    for i in range(5):\n        Entry.make_clone_of(\\\"self\\\")\n\ndef when_make_clone():\n    Entry.set_x(random.randint(-200, 200))",
        "create_clone_exampleDesc": "[시작하기]버튼을 클릭하면 자신의 복제본 5개를 만듭니다. 복제본이 새로 생성되었을때 복제본의 x좌표를 -200에서 200사이의 무작위수로 정합니다.",
        "delete_clone_desc": "Entry.make_clone_of(A) 명령에 의해 생성된 복제본을 삭제합니다.",
        "delete_clone_exampleCode": "def when_start():\n    for i in range(5):\n        Entry.make_clone_of(\\\"자신\\\")\n\ndef when_make_clone():\n    Entry.set_x(random.randint(-200, 200))\n\ndef when_click_object_on():\n    Entry.remove_this_clone()",
        "delete_clone_exampleDesc": "[시작하기]버튼을 클릭하면 자신의 복제본 5개를 만듭니다. 복제본이 새로 생성되었을때 복제본의 x좌표를 -200에서 200사이의 무작위수로 정합니다. 복제본을 클릭하면 클릭된 복제본을 삭제합니다.",
        "remove_all_clones_desc": "해당 오브젝트의 모든 복제본을 삭제합니다.",
        "remove_all_clones_exampleCode": "def when_start():\n    for i in range(5):\n        Entry.make_clone_of(\\\"자신\\\")\n\ndef when_make_clone():\n    Entry.set_x(random.randint(-200, 200))\n\ndef when_press_key(\\\"space\\\"):\n    Entry.remove_all_clone()",
        "remove_all_clones_exampleDesc": "[시작하기]버튼을 클릭하면 자신의 복제본 5개를 만듭니다. 복제본이 새로 생성되었을때 복제본의 x좌표를 -200에서 200사이의 무작위수로 정합니다. 스페이스 키를 누르면 모든 복제본을 삭제합니다.",
        "move_direction_desc": "A만큼 오브젝트의 이동방향 화살표가 가리키는 방향으로 움직입니다.",
        "move_direction_elements": "A-- 이동할 거리에 해당하는 수",
        "move_direction_exampleCode": "def when_start():\n    Entry.move_to_direction(10)",
        "move_direction_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 이동방향으로 10만큼 이동합니다.",
        "bounce_wall_desc": "오브젝트가 화면 끝에 닿으면 튕겨져 나옵니다.",
        "bounce_wall_exampleCode": "def when_start():\n    while True:\n        Entry.move_to_direction(10)\n        Entry.bounce_on_edge()",
        "bounce_wall_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 계속해서 이동방향으로 10만큼 이동하고, 벽에 닿으면 튕깁니다.",
        "move_x_desc": "오브젝트의 x좌표를 A만큼 바꿉니다.",
        "move_x_elements": "A-- x좌표의 변화 값<br>① 양수: 오브젝트가 오른쪽으로 이동합니다.<br>② 음수: 오브젝트가 왼쪽으로 이동합니다.",
        "move_x_exampleCode": "def when_start():\n    Entry.add_x(10)\n    Entry.wait_for_sec(2)\n    Entry.add_x(-10)",
        "move_x_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 오른쪽으로 10만큼 이동하고 2초 동안 기다린 후 왼쪽으로 10만큼 이동합니다.",
        "move_y_desc": "오브젝트의 y좌표를 A만큼 바꿉니다.",
        "move_y_elements": "A-- y좌표의 변화 값<br>① 양수: 오브젝트가 위쪽으로 이동합니다.<br>② 음수: 오브젝트가 아래쪽으로 이동합니다.",
        "move_y_exampleCode": "def when_start():\n    Entry.add_y(10)\n    Entry.wait_for_sec(2)\n    Entry.add_y(-10)",
        "move_y_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 위쪽으로 10만큼 이동하고 2초 동안 기다린 후 아래쪽으로 10만큼 이동합니다.",
        "move_xy_time_desc": "오브젝트가 x와 y좌표를 각각 A와 B만큼 C초에 걸쳐 서서히 바꿉니다.",
        "move_xy_time_elements": "A-- x좌표의 변화 값<br>① 양수: 오브젝트가 오른쪽으로 이동합니다.<br>② 음수: 오브젝트가 왼쪽으로 이동합니다.%nextB-- y좌표의 변화 값<br>① 양수: 오브젝트가 위쪽으로 이동합니다.<br>② 음수: 오브젝트가 아래쪽으로 이동합니다.%nextC-- 이동하는 시간(초)",
        "move_xy_time_exampleCode": "def when_start():\n    Entry.add_xy_for_sec(100, 100, 2)\n    Entry.add_xy_for_sec(-100, -100, 2)",
        "move_xy_time_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 오른쪽 위로 100만큼 2초 동안 이동한 후 왼쪽 아래로 100만큼 2초 동안 이동합니다.",
        "locate_x_desc": "오브젝트의 x좌표를 A로 정합니다. (오브젝트의 중심점이 기준이 됩니다.)",
        "locate_x_elements": "A-- 이동할 x좌표",
        "locate_x_exampleCode": "def when_press_key(\\\"right\\\"):\n    Entry.set_x(100)\n\ndef when_press_key(\\\"left\\\"):\n    Entry.set_x(-100)\n",
        "locate_x_exampleDesc": "오른쪽화살표키를 누르면 오브젝트의 x좌표를 100으로 정하고, 왼쪽화살표키를 누르면 오브젝트의 x좌표를 -100으로 정합니다.",
        "locate_y_desc": "오브젝트의 y좌표를 A로 정합니다. (오브젝트의 중심점이 기준이 됩니다.)",
        "locate_y_elements": "B-- 이동할 y좌표",
        "locate_y_exampleCode": "def when_press_key(\\\"up\\\"):\n    Entry.set_y(100)\n\ndef when_press_key(\\\"down\\\"):\n    Entry.set_y(-100)",
        "locate_y_exampleDesc": "위쪽화살표키를 누르면 오브젝트의 y좌표를 100으로 정하고, 아래쪽화살표키를 누르면 오브젝트의 y좌표를 -100으로 정합니다.",
        "locate_xy_desc": "오브젝트가 좌표(A, B)로 이동합니다. (오브젝트의 중심점이 기준이 됩니다.)",
        "locate_xy_elements": "A-- 이동할 x좌표%nextB-- 이동할 y좌표",
        "locate_xy_exampleCode": "def when_click_mouse_on():\n    Entry.set_xy(0, 0)\n\ndef when_press_key(\\\"right\\\"):\n    Entry.add_x(10)\n\ndef when_press_key(\\\"up\\\"):\n    Entry.add_y(10)",
        "locate_xy_exampleDesc": "오른쪽화살표키를 누르면 오브젝트의 x좌표를 10만큼 바꾸고, 위쪽화살표키를 누르면 오브젝트의 y좌표를 10만큼 바꿉니다. 마우스를 클릭하면 오브젝트의 x, y좌표를 0으로 정합니다.",
        "locate_xy_time_desc": "오브젝트가 좌표(A, B)로 C초에 걸쳐 서서히 이동합니다.(오브젝트의 중심점이 기준이 됩니다.)",
        "locate_xy_time_elements": "A-- 이동할 x좌표%nextB-- 이동할 y좌표%nextC-- 이동하는 시간",
        "locate_xy_time_exampleCode": "def when_click_mouse_on():\n    Entry.set_xy_for_sec(0, 0, 2)\n\ndef when_press_key(\\\"right\\\"):\n    Entry.add_x(10)\n\ndef when_press_key(\\\"up\\\"):\n    Entry.add_y(10)",
        "locate_xy_time_exampleDesc": "오른쪽화살표키를 누르면 오브젝트의 x좌표를 10만큼 바꾸고, 위쪽화살표키를 누르면 오브젝트의 y좌표를 10만큼 바꿉니다. 마우스를 클릭하면 2초 동안 오브젝트를 x,y 좌표 0으로 이동시킵니다.",
        "locate_desc": "오브젝트가 A의 위치로 이동합니다. (오브젝트의 중심점이 기준이 됩니다.)",
        "locate_elements": "A-- 아래 선택지 중 하나<br>① \\\"오브젝트 이름\\\"<br>② \\\"mouse_pointer\\\" 또는 \\\"마우스포인터\\\"",
        "locate_exampleCode": "def when_click_mouse_on():\n    Entry.move_to(\\\"mouse_pointer\\\")\n\ndef when_press_key(\\\"space\\\"):\n    Entry.move_to(\\\"오브젝트\\\")",
        "locate_exampleDesc": "마우스를 클릭하면 오브젝트가 마우스포인터 위치로 이동합니다.<br>스페이스키를 누르면 오브젝트가 \\\"오브젝트\\\" 위치로 이동합니다.",
        "locate_object_time_desc": "오브젝트가 A의 위치로 B초에 걸쳐 서서히 이동합니다. (오브젝트의 중심점이 기준이 됩니다.)",
        "locate_object_time_elements": "A-- 아래 선택지 중 하나<br>① \\\"오브젝트 이름\\\"<br>② \\\"mouse_pointer\\\" 또는 \\\"마우스포인터\\\" %nextB-- 이동하는 시간(초)",
        "locate_object_time_exampleCode": "def when_click_mouse_on():\n    Entry.move_to_for_sec(\\\"mouse_pointer\\\", 2)",
        "locate_object_time_exampleDesc": "마우스를 클릭하면 오브젝트가 2초 동안 서서히 마우스포인터 위치로 이동합니다.",
        "rotate_relative_desc": "오브젝트의 방향을 A도만큼 시계방향으로 회전합니다. (오브젝트의 중심점을 기준으로 회전합니다.)",
        "rotate_relative_elements": "A-- 회전할 각도",
        "rotate_relative_exampleCode": "def when_click_object_on():\n    Entry.add_rotation(90)\n\ndef when_click_object_off():\n    Entry.add_rotation(-90)",
        "rotate_relative_exampleDesc": "오브젝트를 클릭하면 오브젝트가 90도 만큼 회전하고, 오브젝트 클릭을 해제하면 오브젝트가 -90도 만큼 회전합니다.",
        "direction_relative_desc": "오브젝트의 이동 방향을 A도만큼 회전합니다.",
        "direction_relative_elements": "A-- 회전할 각도",
        "direction_relative_exampleCode": "def when_start():\n    Entry.move_to_direction(50)\n    Entry.wait_for_sec(0.5)\n    Entry.add_direction(90)\n    Entry.wait_for_sec(0.5)\n    Entry.move_to_direction(50)",
        "direction_relative_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 이동방향으로 50만큼 이동한 다음 0.5초간 기다립니다. 그 후 이동방향을 90도 만큼 회전하고 0.5초간 기다린 후 이동방향으로 50만큼 이동합니다.",
        "rotate_by_time_desc": "오브젝트의 방향을 시계방향으로 A도만큼 B초에 걸쳐  회전합니다. (오브젝트의 중심점을 기준으로 회전합니다.)",
        "rotate_by_time_elements": "A-- 회전할 각도%nextB-- 회전할 시간(초)",
        "rotate_by_time_exampleCode": "def when_start():\n    Entry.add_rotation_for_sec(90, 2)\n    Entry.add_rotation_for_sec(-90, 2)",
        "rotate_by_time_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 2초 동안 90도 만큼 회전하고, 다시 2초 동안 -90도 만큼 회전합니다.",
        "direction_relative_duration_desc": "오브젝트의 이동방향을 시계방향으로 A도만큼 B초에 걸쳐  회전합니다. (오브젝트의 중심점을 기준으로 회전합니다.)",
        "direction_relative_duration_elements": "A-- 회전할 각도%nextB-- 회전할 시간(초)",
        "direction_relative_duration_exampleCode": "def when_start():\n    Entry.add_direction_for_sec(90, 2)\n\ndef when_start():\n    while True:\n        Entry.move_to_direction(1)",
        "direction_relative_duration_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트의 이동방향을 2초 동안 90도만큼 회전시킵니다. 동시에 오브젝트는 이동방향으로 1만큼 계속 이동합니다.",
        "rotate_absolute_desc": "오브젝트의 방향을 A로 정합니다.",
        "rotate_absolute_elements": "A-- 설정할 방향",
        "rotate_absolute_exampleCode": "def when_press_key(\\\"right\\\"):\n    Entry.set_rotation(90)\n\ndef when_press_key(\\\"left\\\"):\n    Entry.set_rotation(270)",
        "rotate_absolute_exampleDesc": "오른쪽화살표키를 누르면 오브젝트의 방향을 90으로 정하고, 왼쪽화살표키를 누르면 오브젝트의 방향을 270으로 정합니다.",
        "direction_absolute_desc": "오브젝트의 이동방향을 A로 정합니다.",
        "direction_absolute_elements": "A-- 설정할 이동방향",
        "direction_absolute_exampleCode": "def when_press_key(\\\"right\\\"):\n    Entry.set_direction(90)\n    Entry.move_to_direction(10)\n\ndef when_press_key(\\\"left\\\"):\n    Entry.set_direction(270)\n    Entry.move_to_direction(10)",
        "direction_absolute_exampleDesc": "오른쪽화살표키를 누르면 오브젝트의 이동방향을 90으로 정한 후 해당 쪽으로 10만큼 이동하고, 왼쪽화살표키를 누르면 오브젝트의 이동방향을 270으로 정하고 해당쪽으로 10만큼 이동합니다.",
        "see_angle_object_desc": "오브젝트가 A쪽을 바라봅니다. (이동방향이 A를 향하도록 오브젝트의 방향을 회전해줍니다.)",
        "see_angle_object_elements": "A-- 아래 선택지 중 하나<br>① \\\"오브젝트 이름\\\"<br>② \\\"mouse_pointer\\\" 또는 \\\"마우스포인터\\\"",
        "see_angle_object_exampleCode": "def when_click_mouse_on():\n    Entry.look_at(\\\"mouse_pointer\\\")\n\ndef when_press_key(\\\"space\\\"):\n    Entry.look_at(\\\"오브젝트\\\")",
        "see_angle_object_exampleDesc": "마우스를 클릭하면 오브젝트가 마우스포인터쪽을 바라보고, 스페이스키를 누르면 \\\"오브젝트\\\"쪽을 바라봅니다.",
        "move_to_angle_desc": "오브젝트가 A만큼 B방향으로 움직입니다.",
        "move_to_angle_elements": "A-- 이동할 거리에 해당하는 수%nextB-- 이동할 방향(12시 방향이 0도, 시계방향으로 증가)",
        "move_to_angle_exampleCode": "def when_press_key(\\\"up\\\"):\n    Entry.move_to_degree(10, 0)\n\ndef when_press_key(\\\"down\\\"):\n    Entry.move_to_degree(10, 180)",
        "move_to_angle_exampleDesc": "위쪽화살표키를 누르면 오브젝트가 0도방향으로 10만큼 이동하고, 아래쪽화살표키를 누르면 오브젝트가 180도방향으로 10만큼 이동합니다.",
        "show_desc": "오브젝트를 화면에 나타냅니다.",
        "show_exampleCode": "def when_start():\n    Entry.wait_for_sec(1)\n    Entry.hide()\n    Entry.wait_for_sec(1)\n    Entry.show()",
        "show_exampleDesc": "[시작하기]버튼을 클릭하면 1초 뒤에 오브젝트 모양이 숨겨지고, 다음 1초 뒤에 오브젝트 모양이 나타납니다.",
        "hide_desc": "오브젝트를 화면에서 보이지 않게 합니다.",
        "hide_exampleCode": "def when_start():\n    Entry.wait_for_sec(1)\n    Entry.hide()\n    Entry.wait_for_sec(1)\n    Entry.show()",
        "hide_exampleDesc": "[시작하기]버튼을 클릭하면 1초 뒤에 오브젝트 모양이 숨겨지고, 다음 1초 뒤에 오브젝트 모양이 나타납니다.",
        "dialog_time_desc": "오브젝트가 A를 B초 동안 말풍선으로 말한 후 다음 명령어가 실행됩니다. 콘솔창에서도 실행 결과를 볼 수 있습니다.",
        "dialog_time_elements": "A-- 말할 내용<br>① 문자 : \\\"안녕!\\\", \\\"엔트리\\\" 등 <br>② 숫자 : 0, 10, 35 등%nextB-- 말하는 시간(초)",
        "dialog_time_exampleCode": "def when_start():\n    Entry.print_for_sec(\\\"안녕! 나는\\\", 2)\n    Entry.print_for_sec(16, 2)\n    Entry.print_for_sec(\\\"살이야\\\", 2)",
        "dialog_time_exampleDesc": "[시작하기]버튼을 클릭하면 \\\"안녕! 나는\\\", 16, \\\"살이야\\\"를 각각 2초 동안 차례대로 말합니다.",
        "dialog_desc": "오브젝트가 A를 말풍선으로 말합니다. 콘솔창에서도 실행 결과를 볼 수 있습니다.",
        "dialog_elements": "A-- 말할 내용<br>① 문자 : \\\"안녕!\\\", \\\"엔트리\\\" 등 <br>② 숫자 : 0, 10, 35 등",
        "dialog_exampleCode": "def when_start():\n    Entry.print(\\\"키보드로 숫자 1,2 를 누르면 숫자를 말해볼게\\\")\n\ndef when_press_key(1):\n    Entry.print(1)\n\ndef when_press_key(2):\n    Entry.print(2)\n",
        "dialog_exampleDesc": "[시작하기]버튼을 클릭하면 \\\"키보드로 숫자 1,2 를 누르면 숫자를 말해볼게\\\"를 말하고, 키보드로 1, 2를 누르면 각각 1, 2라 말합니다.",
        "remove_dialog_desc": "오브젝트가 말하고 있는 말풍선을 지웁니다.",
        "remove_dialog_exampleCode": "def when_start():\n    Entry.print(\\\"말풍선을 지우려면 엔터를 눌러!\\\")\n\ndef when_press_key(\\\"enter\\\"):\n    Entry.clear_print()",
        "remove_dialog_exampleDesc": "[시작하기]버튼을 클릭하면 \\\"말풍선을 지우려면 엔터를 눌러!\\\"라 말하고, 엔터키를 누르면 말풍선이 사라집니다.",
        "change_to_some_shape_desc": "오브젝트를 A 모양으로 바꿉니다.",
        "change_to_some_shape_elements": "A-- 아래 선택지 중 하나<br>① 모양 이름 : [속성] 탭의 \\\"모양 이름\\\"을 적음<br>② 모양 번호 : [속성] 탭의 모양 번호를 적음",
        "change_to_some_shape_exampleCode": "def when_start():\n    Entry.wait_for_sec(0.3)\n    Entry.change_shape(\\\"오브젝트모양\\\")\n    Entry.wait_for_sec(0.3)\n    Entry.change_shape(\\\"오브젝트모양\\\")",
        "change_to_some_shape_exampleDesc": "[시작하기]버튼을 클릭하면 0.3초간 기다린 다음 \\\"오브젝트모양\\\"으로 모양을 바꾸고 0.3초간 기다린 다음 \\\"오브젝트모양\\\"모양으로 모양을 바꿉니다.",
        "change_to_next_shape_desc": "오브젝트의 모양을 다음 또는 이전 모양으로 바꿉니다.",
        "change_to_next_shape_elements": "A-- 아래 선택지 중 하나<br>① 다음 모양 : \\\"next\\\" 또는 \\\"다음\\\" <br>② 이전 모양 : \\\"pre\\\" 또는 \\\"이전\\\"",
        "change_to_next_shape_exampleCode": "def when_start():\n    Entry.wait_for_sec(0.3)\n    Entry.change_shape_to(\\\"next\\\")\n    Entry.wait_for_sec(0.3)\n    Entry.change_shape_to(\\\"pre\\\")",
        "change_to_next_shape_exampleDesc": "[시작하기]버튼을 클릭하면 0.3초간 기다린 다음 모양으로 오브젝트 모양을 바꾸고 0.3초간 기다린 다음 이전 모양으로 오브젝트 모양을 바꿉니다.",
        "add_effect_amount_desc": "오브젝트에 A 효과를 B만큼 줍니다.",
        "add_effect_amount_elements": "A -- 아래 선택지 중 하나<br>① “color” 또는 “색깔“                 <br>② “brightness” 또는 “밝기”                <br>③ “transparency” 또는 “투명도”%nextB-- 효과의 변화 정도",
        "add_effect_amount_exampleCode": "def when_click_mouse_on():\n    Entry.add_effect(\\\"color\\\", 50)\n    Entry.wait_for_sec(1)\n    Entry.add_effect(\\\"brightness\\\", -50)\n    Entry.wait_for_sec(1)\n    Entry.add_effect(\\\"transparency\\\", 50)",
        "add_effect_amount_exampleDesc": "마우스를 클릭하면 오브젝트에 색깔 효과를 50만큼 주고 1초간 기다리고, 밝기 효과를 -50만큼 주고 1초간 기다립니다. 그 후 투명도 효과를 50만큼 줍니다.",
        "change_effect_amount_desc": "오브젝트의 A 효과를 B로 정합니다.",
        "change_effect_amount_elements": "A-- 아래 선택지 중 하나<br>① “color” 또는 “색깔“                 <br>② “brightness” 또는 “밝기”                <br>③ “transparency” 또는 “투명도”%nextB-- 효과의 값<br>① color: 0~100 범위의 수, 100을 주기로 반복됨<br>② brightness: -100~100 사이 범위의 수, -100이하는 -100 으로 100 이상은 100 으로 처리 됨<br>③ transparency: 0~100 사이 범위의 수, 0 이하는 0으로, 100이상은 100으로 처리 됨",
        "change_effect_amount_exampleCode": "def when_click_mouse_on():\n    Entry.set_effect(\\\"color\\\", 50)\n    Entry.set_effect(\\\"brightness\\\", 50)\n    Entry.set_effect(\\\"transparency\\\", 50)\n\ndef when_click_mouse_off():\n    Entry.set_effect(\\\"color\\\", 0)\n    Entry.set_effect(\\\"brightness\\\", 0)\n    Entry.set_effect(\\\"transparency\\\", 0)",
        "change_effect_amount_exampleDesc": "마우스를 클릭하면 오브젝트에 색깔, 밝기, 투명도 효과를 50으로 정하고, 마우스 클릭을 해제하면 각 효과를 0으로 정합니다.",
        "erase_all_effects_desc": "오브젝트에 적용된 효과를 모두 지웁니다.",
        "erase_all_effects_exampleCode": "def when_click_mouse_on():\n    Entry.set_effect(\\\"color\\\", 50)\n    Entry.set_effect(\\\"brightness\\\", 50)\n    Entry.set_effect(\\\"transparency\\\", 50)\n\ndef when_click_mouse_off():\n    Entry.clear_effect()\n",
        "erase_all_effects_exampleDesc": "마우스를 클릭하면 오브젝트에 색깔, 밝기, 투명도 효과를 50으로 정하고, 마우스 클릭을 해제하면 오브젝트에 적용된 모든 효과를 지웁니다.",
        "change_scale_size_desc": "오브젝트의 크기를 A만큼 바꿉니다.",
        "change_scale_size_elements": "A-- 크기 변화 값",
        "change_scale_size_exampleCode": "def when_press_key(\\\"up\\\"):\n    Entry.add_size(10)\n\ndef when_press_key(\\\"down\\\"):\n    Entry.add_size(-10)\n\ndef when_press_key(\\\"space\\\"):\n    Entry.set_size(100)",
        "change_scale_size_exampleDesc": "위쪽화살표키를 누르면 오브젝트의 크기가 10만큼 커지고, 아래쪽화살표키를 누르면 오브젝트의 크기가 10만큼 작아집니다. 스페이스키를 누르면 오브젝트의 크기를 100으로 정합니다.",
        "set_scale_size_desc": "오브젝트의 크기를 A로 정합니다.",
        "set_scale_size_elements": "A-- 크기값",
        "set_scale_size_exampleCode": "def when_press_key(\\\"up\\\"):\n    Entry.add_size(10)\n\ndef when_press_key(\\\"down\\\"):\n    Entry.add_size(-10)\n\ndef when_press_key(\\\"space\\\"):\n    Entry.set_size(100)",
        "set_scale_size_exampleDesc": "위쪽화살표키를 누르면 오브젝트의 크기가 10만큼 커지고, 아래쪽화살표키를 누르면 오브젝트의 크기가 10만큼 작아집니다. 스페이스키를 누르면 오브젝트의 크기를 100으로 정합니다.",
        "flip_x_desc": "오브젝트의 상하 모양을 뒤집습니다.",
        "flip_x_exampleCode": "def when_press_key(\\\"up\\\"):\n    Entry.flip_horizontal()\n\ndef when_press_key(\\\"right\\\"):\n    Entry.flip_vertical()",
        "flip_x_exampleDesc": "위쪽화살표키를 누르면 오브젝트의 상하 모양을 뒤집고, 오른쪽화살표키를 누르면 오브젝트의 좌우 모양을 뒤집습니다.",
        "flip_y_desc": "오브젝트의 좌우 모양을 뒤집습니다.",
        "flip_y_exampleCode": "def when_press_key(\\\"up\\\"):\n    Entry.flip_horizontal()\n\ndef when_press_key(\\\"right\\\"):\n    Entry.flip_vertical()",
        "flip_y_exampleDesc": "위쪽화살표키를 누르면 오브젝트의 상하 모양을 뒤집고, 오른쪽화살표키를 누르면 오브젝트의 좌우 모양을 뒤집습니다.",
        "change_object_index_desc": "오브젝트의 레이어를 A로 가져옵니다.",
        "change_object_index_elements": "A-- 아래 선택지 중 하나<br>① “front\\\" 또는 “맨 앞“                 <br>② “forward” 또는 “앞”                <br>③ “backward” 또는 “뒤”<br>④ “back” 또는 “맨 뒤”",
        "change_object_index_exampleCode": "def when_start():\n    Entry.send_layer_to(\\\"front\\\")\n    Entry.wait_for_sec(2)\n    Entry.send_layer_to(\\\"backward\\\")",
        "change_object_index_exampleDesc": "오브젝트가 여러개가 겹쳐 있을 경우 [시작하기]버튼을 클릭하면  해당 오브젝트의 레이어를 가장 앞으로 가져와서 보여줍니다.",
        "brush_stamp_desc": "오브젝트의 모양을 도장처럼 실행화면 위에 찍습니다.",
        "brush_stamp_exampleCode": "def when_start():\n    for i in range(10):\n        Entry.move_to_direction(10)\n        Entry.stamp()",
        "brush_stamp_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 이동방향으로 10만큼 이동하고, 도장찍는 행동을 10번 반복합니다.",
        "start_drawing_desc": "오브젝트가 이동하는 경로를 따라 선이 그려지기 시작합니다. (오브젝트의 중심점이 기준)",
        "start_drawing_exampleCode": "def when_start():\n    Entry.start_drawing()\n    for i in range(10):\n        Entry.move_to_direction(10)",
        "start_drawing_exampleDesc": "[시작하기]버튼을 클릭하면 그리기가 시작되고, 오브젝트가 이동방향으로 10만큼 10번 이동할 때 오브젝트의 이동경로를 따라 선이 그려집니다.",
        "stop_drawing_desc": "오브젝트가 선을 그리는 것을 멈춥니다.",
        "stop_drawing_exampleCode": "def when_start():\n    Entry.start_drawing()\n    while True:\n        Entry.move_to_direction(1)\n\ndef when_click_mouse_on():\n    Entry.stop_drawing()",
        "stop_drawing_exampleDesc": "[시작하기]버튼을 클릭하면 그리기가 시작되고 계속해서 오브젝트가 이동방향으로 10만큼 이동합니다. 마우스를 클릭하면 그리는것을 멈춥니다.",
        "set_color_desc": "오브젝트가 그리는 선의 색을 A로 정합니다.",
        "set_color_elements": "A-- 아래 선택지 중 하나<br>① 색상 코드 : \\\"#FF0000\\\", \\\"#FFCC00\\\", \\\"#3333FF\\\", \\\"#000000\\\" 등<br>② 색깔명 : \\\"red\\\", \\\"orange\\\", \\\"yellow\\\", \\\"green\\\", \\\"blue\\\", \\\"navy\\\", \\\"purple\\\", \\\"black\\\", \\\"white\\\", \\\"brown\\\"",
        "set_color_exampleCode": "def when_start():\n    Entry.start_drawing()\n    Entry.set_brush_color_to(\\\"#000099\\\")\n    while True:\n        Entry.move_to_direction(1)",
        "set_color_exampleDesc": "[시작하기]버튼을 클릭하면 그리기가 시작되고, 선의 색을 \\\"#000099\\\"로 정합니다. 오브젝트는 계속해서 이동방향으로 1만큼 움직이고, 오브젝트의 이동경로를 따라 선이 그려집니다.",
        "set_random_color_desc": "오브젝트가 그리는 선의 색을 무작위로 정합니다.",
        "set_random_color_exampleCode": "def when_start():\n    Entry.start_drawing()\n    while True:\n        Entry.move_to_direction(1)\n        Entry.set_brush_color_to_random()",
        "set_random_color_exampleDesc": "[시작하기]버튼을 클릭하면 그리기가 시작됩니다. 오브젝트는 계속해서 이동방향으로 1만큼 움직이고, 오브젝트의 이동경로를 따라 선이 그려집니다. 선의 색깔은 계속해서 무작위로 정해집니다.",
        "change_thickness_desc": "오브젝트가 그리는 선의 굵기를 A만큼 바꿉니다.",
        "change_thickness_elements": "A-- 굵기 변화 값",
        "change_thickness_exampleCode": "def when_start():\n    Entry.start_drawing()\n    while True:\n        Entry.add_brush_size(1)\n        Entry.move_to_direction(10)",
        "change_thickness_exampleDesc": "[시작하기]버튼을 클릭하면 그리기가 시작됩니다. 오브젝트는 계속해서 이동방향으로 10만큼 움직이고, 오브젝트의 이동경로를 따라 선이 그려집니다. 선의 굵기는 계속해서 1씩 커집니다.",
        "set_thickness_desc": "오브젝트가 그리는 선의 굵기를 A로 정합니다.",
        "set_thickness_elements": "A-- 굵기값(1이상의 수)",
        "set_thickness_exampleCode": "def when_start():\n    Entry.start_drawing()\n    Entry.set_brush_size(10)\n    while True:\n        Entry.move_to_direction(10)",
        "set_thickness_exampleDesc": "[시작하기]버튼을 클릭하면 그리기가 시작되고, 선의 굵기를 10으로 정합니다. 오브젝트는 계속해서 이동방향으로 10만큼 움직이고, 오브젝트의 이동경로를 따라 선이 그려집니다.",
        "change_brush_transparency_desc": "오브젝트가 그리는 선의 투명도를 A만큼 바꿉니다.",
        "change_brush_transparency_elements": "A-- 투명도 변화 값",
        "change_brush_transparency_exampleCode": "def when_start():\n    Entry.start_drawing()\n    Entry.set_brush_size(10)\n    while True:\n        Entry.move_to_direction(10)\n        Entry.add_brush_transparency(5)",
        "change_brush_transparency_exampleDesc": "[시작하기]버튼을 클릭하면 그리기가 시작되고, 선의 굵기를 10으로 정합니다. 오브젝트는 계속해서 이동방향으로 10만큼 움직이고, 오브젝트의 이동경로를 따라 선이 그려집니다. 선의 투명도는 계속해서 5만큼 바꿉니다.",
        "set_brush_tranparency_desc": "오브젝트가 그리는 선의 투명도를 A로 정합니다.",
        "set_brush_tranparency_elements": "A-- 투명도값(0~100 의 범위)",
        "set_brush_tranparency_exampleCode": "def when_start():\n    Entry.start_drawing()\n    Entry.set_brush_size(10)\n    Entry.set_brush_transparency(50)\n    while True:\n        Entry.move_to_direction(10)",
        "set_brush_tranparency_exampleDesc": "[시작하기]버튼을 클릭하면 그리기가 시작되고, 선의 굵기를 10으로, 선의 투명도를 50으로 정합니다. 오브젝트는 계속해서 이동방향으로 10만큼 움직이고, 오브젝트의 이동경로를 따라 선이 그려집니다.",
        "brush_erase_all_desc": "오브젝트가 그린 선과 도장을 모두 지웁니다.",
        "brush_erase_all_exampleCode": "def when_start():\n    Entry.start_drawing()\n    while True:\n        Entry.move_to_direction(10)\n\ndef when_click_mouse_on():\n    Entry.clear_drawing()",
        "brush_erase_all_exampleDesc": "[시작하기]버튼을 클릭하면 그리기가 시작됩니다. 오브젝트는 계속해서 이동방향으로 10만큼 움직이고, 오브젝트의 이동경로를 따라 선이 그려집니다. 마우스를 클릭하면 오브젝트가 그린 선을 모두 지웁니다.",
        "text_read_desc": "글상자 A의 내용입니다.<br />(내용 안에 개행이 있는 경우, 띄어쓰기하여 반환됩니다.)",
        "text_read_elements": "A-- 아래 선택지 중 하나<br />① \\\"오브젝트(글상자) 이름\\\" <br />② 자기 자신",
        "text_read_exampleCode": "def when_start():\n    Entry.print(Entry.contents_of_textbox(\\\"A\\\"))",
        "text_read_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 글상자 \\\"A\\\"의 내용을 말합니다.​",
        "text_write_desc": "글상자의 내용을 A로 고쳐씁니다.",
        "text_write_elements": "A-- 글상자의 내용<br>① 문자 : \\\"안녕!\\\", \\\"엔트리\\\" 등 <br>② 숫자 : 0, 10, 35 등",
        "text_write_exampleCode": "def when_start():\n    Entry.write_text(\\\"엔트리\\\")",
        "text_write_exampleDesc": "[시작하기]버튼을 클릭하면 글상자의 내용을 \\\"엔트리\\\"로 바꿉니다.",
        "text_append_desc": "글상자의 내용 뒤에 A를 추가합니다.",
        "text_append_elements": "A-- 글상자의 내용<br>① 문자 : \\\"안녕!\\\", \\\"엔트리\\\" 등 <br>② 숫자 : 0, 10, 35 등",
        "text_append_exampleCode": "def when_start():\n    Entry.write_text(\\\"안녕?\\\")\n    Entry.wait_for_sec(1)\n    Entry.append_text(\\\"엔트리!\\\")",
        "text_append_exampleDesc": "[시작하기]버튼을 클릭하면 글상자의 내용이 \\\"안녕?\\\"이 되었다가 1초 뒤에 \\\"엔트리!\\\"가 추가되어 \\\"안녕?엔트리!\\\"가 됩니다.",
        "text_prepend_desc": "글상자의 내용 앞에 A를 추가합니다.",
        "text_prepend_elements": "A-- 글상자의 내용<br>① 문자 : \\\"안녕!\\\", \\\"엔트리\\\" 등 <br>② 숫자 : 0, 10, 35 등",
        "text_prepend_exampleCode": "def when_start():\n    Entry.write_text(\\\"반가워!\\\")\n    Entry.wait_for_sec(1)\n    Entry.prepend_text(\\\"엔트리!\\\")",
        "text_prepend_exampleDesc": "[시작하기]버튼을 클릭하면 글상자의 내용이 \\\"반가워!\\\"가 되었다가 1초 뒤에 \\\"엔트리!\\\"가 앞에 추가되어 \\\"엔트리!반가워!\\\"가 됩니다.",
        "text_flush_desc": "글상자에 저장된 값을 모두 지웁니다.",
        "text_flush_exampleCode": "def when_start():\n    Entry.write_text(\\\"엔트리\\\")\n    Entry.wait_for_sec(1)\n    Entry.clear_text()",
        "text_flush_exampleDesc": "[시작하기]버튼을 클릭하면 글상자의 내용이 \\\"엔트리\\\"가 되었다가 1초 뒤에 모든 내용이 사라집니다.",
        "sound_something_with_block_desc": "오브젝트가 A 소리를 재생합니다.",
        "sound_something_with_block_elements": "A-- 아래 선택지 중 하나<br>① 소리 이름 : [속성] 탭의 \\\"소리 이름\\\"을 적음<br>② 소리 번호: [속성] 탭의 소리 번호를 적음",
        "sound_something_with_block_exampleCode": "def when_start():\n    Entry.play_sound(\\\"소리\\\")\n    Entry.add_size(50)",
        "sound_something_with_block_exampleDesc": "[시작하기]버튼을 클릭하면 \\\"소리\\\"를 재생하면서 오브젝트의 크기가 50만큼 커집니다.",
        "sound_something_second_with_block_desc": "오브젝트가 A소리를 B초 만큼 재생합니다.",
        "sound_something_second_with_block_elements": "A-- 아래 선택지 중 하나<br>① 소리 이름 : [속성] 탭의 \\\"소리 이름\\\"을 적음<br>② 소리 번호: [속성] 탭의 소리 번호를 적음",
        "sound_something_second_with_block_exampleCode": "def when_start():\n    Entry.play_sound_for_sec(\\\"소리\\\", 1)\n    Entry.add_size(50)",
        "sound_something_second_with_block_exampleDesc": "[시작하기]버튼을 클릭하면 \\\"소리\\\"를 1초 동안 재생하면서, 오브젝트의 크기가 50만큼 커집니다.",
        "sound_from_to_desc": "오브젝트가 A소리를 B초부터 C초까지 재생합니다.",
        "sound_from_to_elements": "A-- 아래 선택지 중 하나<br>① 소리 이름 : [속성] 탭의 \\\"소리 이름\\\"을 적음<br>② 소리 번호: [속성] 탭의 소리 번호를 적음",
        "sound_from_to_exampleCode": "def when_start():\n    Entry.play_sound_from_to(\\\"소리\\\", 0.5, 1)\n    Entry.add_size(50)",
        "sound_from_to_exampleDesc": "[시작하기]버튼을 클릭하면 \\\"소리\\\"를 0.5초부터 1초 구간까지만 재생하면서, 오브젝트의 크기가 50만큼 커집니다.",
        "sound_something_wait_with_block_desc": "오브젝트가 A 소리를 재생하고, 재생이 끝나면 다음 명령을 실행합니다.",
        "sound_something_wait_with_block_elements": "A-- 아래 선택지 중 하나<br>① 소리 이름 : [속성] 탭의 \\\"소리 이름\\\"을 적음<br>② 소리 번호: [속성] 탭의 소리 번호를 적음",
        "sound_something_wait_with_block_exampleCode": "def when_start():\n    Entry.play_sound_and_wait(\\\"소리\\\")\n    Entry.add_size(50)",
        "sound_something_wait_with_block_exampleDesc": "[시작하기]버튼을 클릭하면 \\\"소리\\\"를 재생하고, 재생이 끝나면 오브젝트의 크기가 50만큼 커집니다.",
        "sound_something_second_wait_with_block_desc": "오브젝트가 A소리를 B초 만큼 재생하고, 재생이 끝나면 다음 명령을 실행합니다.",
        "sound_something_second_wait_with_block_elements": "A-- 아래 선택지 중 하나<br>① 소리 이름 : [속성] 탭의 \\\"소리 이름\\\"을 적음<br>② 소리 번호: [속성] 탭의 소리 번호를 적음",
        "sound_something_second_wait_with_block_exampleCode": "def when_start():\n    Entry.play_sound_for_sec_and_wait(\\\"소리\\\", 1)\n    Entry.add_size(50)",
        "sound_something_second_wait_with_block_exampleDesc": "[시작하기]버튼을 클릭하면 \\\"소리\\\"를 1초 동안 재생하고, 재생이 끝나면 오브젝트의 크기가 50만큼 커집니다.",
        "sound_from_to_and_wait_desc": "오브젝트가 A소리를 B초부터 C초까지 재생하고, 재생이 끝나면 다음 명령을 실행합니다.",
        "sound_from_to_and_wait_elements": "A-- 아래 선택지 중 하나<br>① 소리 이름 : [속성] 탭의 \\\"소리 이름\\\"을 적음<br>② 소리 번호: [속성] 탭의 소리 번호를 적음",
        "sound_from_to_and_wait_exampleCode": "def when_start():\n    Entry.play_sound_from_to_and_wait(\\\"소리\\\", 0.5, 1)\n    Entry.add_size(50)",
        "sound_from_to_and_wait_exampleDesc": "[시작하기]버튼을 클릭하면 \\\"소리\\\"를 0.5초부터 1초 구간까지만 재생하고, 재생이 끝나면 오브젝트의 크기가 50만큼 커집니다.",
        "sound_volume_change_desc": "작품에서 재생되는 모든 소리의 크기를 A퍼센트만큼 바꿉니다.",
        "sound_volume_change_elements": "A-- 소리 크기 변화 값",
        "sound_volume_change_exampleCode": "def when_press_key(\\\"up\\\"):\n    Entry.add_sound_volume(10)\n\ndef when_press_key(\\\"down\\\"):\n    Entry.add_sound_volume(-10)\n\ndef when_start():\n    while True:\n        Entry.play_sound_and_wait(\\\"소리\\\")",
        "sound_volume_change_exampleDesc": "[시작하기]버튼을 클릭하면 \\\"소리\\\"를 계속 재생합니다. 위쪽화살표키를 누르면 소리의 크기가 10\\\" 커지고, 아래쪽화살표키를 누르면 소리의 크기가 10\\\"작아집니다.",
        "sound_volume_set_desc": "작품에서 재생되는 모든 소리의 크기를 A퍼센트로 정합니다.",
        "sound_volume_set_elements": "A-- 소리 크기값",
        "sound_volume_set_exampleCode": "def when_press_key(\\\"up\\\"):\n    Entry.add_sound_volume(10)\n\ndef when_press_key(\\\"down\\\"):\n    Entry.add_sound_volume(-10)\n\ndef when_press_key(\\\"enter\\\"):\n    Entry.set_sound_volume(100)\n\ndef when_start():\n    while True:\n        Entry.play_sound_and_wait(\\\"소리\\\")",
        "sound_volume_set_exampleDesc": "[시작하기]버튼을 클릭하면 \\\"소리\\\"를 계속 재생합니다. 위쪽화살표키를 누르면 소리의 크기가 10\\\" 커지고, 아래쪽화살표키를 누르면 소리의 크기가 10\\\"작아집니다. 엔터키를 누르면 소리의 크기를 100\\\"로 정합니다.",
        "sound_silent_all_desc": "현재 재생 중인 모든 소리를 멈춥니다.",
        "sound_silent_all_exampleCode": "def when_start():\n    while True:\n        Entry.play_sound_and_wait(\\\"소리\\\")\n\ndef when_press_key(\\\"enter\\\"):\n    Entry.stop_sound()",
        "sound_silent_all_exampleDesc": "[시작하기]버튼을 클릭하면 \\\"소리\\\"를 계속 재생합니다. 엔터키를 누르면 현재 재생 중인 소리를 멈춥니다.",
        "is_clicked_desc": "마우스를 클릭한 경우 True로 판단합니다.",
        "is_clicked_exampleCode": "def when_start():\n    while True:\n        if Entry.is_mouse_clicked():\n            Entry.print_for_sec(\\\"반가워!\\\", 0.5)",
        "is_clicked_exampleDesc": "[시작하기]버튼을 클릭하면 계속해서 마우스를 클릭했는지 확인합니다. 만약 마우스를 클릭하면 오브젝트가 \\\"반가워!\\\"라고 0.5초간 말합니다.",
        "is_press_some_key_desc": "A 키가 눌려져 있는 경우 True로 판단합니다.",
        "is_press_some_key_elements": "A-- 아래 선택지 중 하나<br>① 알파벳 : \\\"A\\\", \\\"B\\\" ~ \\\"Z\\\" 등(소문자 가능)<br>② 숫자: 1, 2, 3, 4 ~ 9, 0<br>③ 특수키: \\\"space\\\", \\\"enter\\\"<br>④ 방향키 : \\\"up\\\", \\\"down\\\", \\\"right\\\", \\\"left\\\"",
        "is_press_some_key_exampleCode": "def when_start():\n    while True:\n        if Entry.is_key_pressed(\\\"space\\\"):\n            Entry.move_to_direction(10)",
        "is_press_some_key_exampleDesc": "[시작하기]버튼을 클릭하면 계속해서 선택한 키를 눌렀는지 확인합니다. 만약 스페이스 키를 누르면 오브젝트가 이동방향으로 10만큼 이동합니다.",
        "reach_something_desc": "오브젝트가 A와 닿은 경우 True으로 판단합니다.",
        "reach_something_elements": "A-- 아래 선택지 중 하나<br>① \\\"오브젝트 이름\\\"<br>② \\\"mouse_pointer\\\" 또는 \\\"마우스포인터\\\"<br>③ \\\"edge\\\", \\\"edge_up\\\", \\\"edge_down\\\", \\\"edge_right\\\", \\\"edge_left\\\"",
        "reach_something_exampleCode": "def when_start():\n    while True:\n        Entry.move_to_direction(10)\n        if Entry.is_touched(\\\"edge\\\"):\n            Entry.add_rotation(150)",
        "reach_something_exampleDesc": "[시작하기]버튼을 클릭하면 계속해서 오브젝트가 이동방향으로 10만큼 이동합니다. 만약 오브젝트가 벽에 닿으면 150만큼 회전하게 됩니다.",
        "boolean_basic_operator_desc": "A와 B를 비교하여 True 또는 False로 판단합니다.",
        "boolean_basic_operator_elements": "A, B 비교하고자 하는 숫자값<br>① == : A와 B의 값이 같으면 True, 아니면 False<br>② != : A와 B의 값이 다르면 True, 아니면 False<br>③ > : A의 값이 B의 값보다 크면 true, 아니면 False<br>④ < : A의 값이 B의 값보다 작으면 true, 아니면 False<br>⑤ >= : A의 값이 B의 값보다 크거나 같으면 true, 아니면 False<br>⑥ <= : A의 값이 B의 값보다 작거나 같으면 true, 아니면 False",
        "boolean_basic_operator_exampleCode": "def when_start():\n    while True:\n        Entry.add_x(10)\n        if Entry.value_of_object(\\\"오브젝트\\\", \\\"x\\\") > 240:\n            Entry.set_x(0)",
        "boolean_basic_operator_exampleDesc": "[시작하기]버튼을 클릭하면 계속해서 오브젝트 x좌표를 10만큼 바꿉니다. 만약 오브젝트 x좌표가 240보다 크면 오브젝트 x좌표를 0으로 정합니다.",
        "boolean_and_desc": "A와 B의 판단이 모두 True인 경우 True, 아닌 경우 False로 판단합니다.",
        "boolean_and_elements": "A, B-- True 또는 False로 판단할 수 있는 명령어 입력(판단 카테고리의 명령어)<br>① True, False<br>② 10 == 10 , 10 > 10 , 10 <= 10 등<br>③ Entry.is_mouse_clicked(), Entry.is_key_pressed(\\\"Q\\\") 등",
        "boolean_and_exampleCode": "def when_start():\n    while True:\n        if Entry.is_key_pressed(\\\"a\\\") and Entry.is_key_pressed(\\\"s\\\"):\n            Entry.add_effect(\\\"color\\\", 10)",
        "boolean_and_exampleDesc": "[시작하기]버튼을 클릭하고 키보드의 \\\"a\\\" 와 \\\"s\\\"키를 동시에 눌렀을 때, 색깔 효과를 10만큼 줍니다.",
        "boolean_or_desc": "A와 B의 판단 중 하나라도 True인 경우 True, 아닌 경우 False로 판단합니다.",
        "boolean_or_elements": "A, B-- True 또는 False로 판단할 수 있는 명령어 입력(판단 카테고리의 명령어)<br>① True, False<br>② 10 == 10 , 10 > 10 , 10 <= 10 등<br>③ Entry.is_mouse_clicked(), Entry.is_key_pressed(\\\"Q\\\") 등",
        "boolean_or_exampleCode": "def when_start():\n    while True:\n        if Entry.is_key_pressed(\\\"a\\\") or Entry.is_key_pressed(\\\"s\\\"):\n            Entry.add_effect(\\\"color\\\", 10)",
        "boolean_or_exampleDesc": "[시작하기]버튼을 클릭하면 키보드의 \\\"a\\\"나 \\\"s\\\"키 중 무엇이든 하나를 누르면 오브젝트에 색깔 효과를 10만큼 줍니다.",
        "boolean_not_desc": "A 판단이 True이면 False, False이면 True로 판단합니다.",
        "boolean_not_elements": "A-- True 또는 False로 판단할 수 있는 명령어 입력(판단 카테고리의 명령어)<br>① True, False<br>② 10 == 10 , 10 > 10 , 10 <= 10 등<br>③ Entry.is_mouse_clicked(), Entry.is_key_pressed(\\\"Q\\\") 등",
        "boolean_not_exampleCode": "def when_start():\n    while True:\n        if not Entry.is_mouse_clicked():\n            Entry.add_size(1)",
        "boolean_not_exampleDesc": "[시작하기]버튼을 클릭하면 마우스를 클릭하지 않은 동안 크기가 1씩 커집니다.",
        "calc_basic_desc": "A와 B의 연산값입니다.",
        "calc_basic_elements": "A, B-- 연산하고자 하는 숫자값<br>① + : A와 B를 더한 값<br>② - : A와 B를 뺀 값<br>③ x : A와 B를 곱한 값<br>④ / : A와 B를 나눈 값",
        "calc_basic_exampleCode": "def when_start():\n    Entry.print_for_sec(10 + 10, 2)\n    Entry.print_for_sec(10 - 10, 2)\n    Entry.print_for_sec(10 * 10, 2)\n    Entry.print_for_sec(10 / 10, 2)",
        "calc_basic_exampleDesc": "[시작하기]버튼을 클릭하면 10과 10을 더한값, 뺀값, 곱한값, 나눈값을 각 2초간 말합니다.",
        "calc_rand_desc": "A와 B 사이에서 선택된 무작위 수의 값입니다. (두 수 모두 정수를 입력한 경우 정수로,두 수 중 하나라도 소수를 입력한 경우 소수로 무작위 수가 선택됩니다.)",
        "calc_rand_elements": "A, B-- 무작위 수를 추출할 범위<br>① random.randint(A, B) : A, B를 정수로 입력하면 정수 범위에서 무작위 수를 추출<br>② random.uniform(A, B) : A, B를 실수로 입력하면 실수 범위에서 무작위 수를 추출",
        "calc_rand_exampleCode": "def when_start():\n    Entry.print_for_sec(random.randint(1, 10), 2)\n    Entry.print_for_sec(random.uniform(0.1, 2), 2)",
        "calc_rand_exampleDesc": "[시작하기]버튼을 클릭하면 1부터 10사이의 정수중 무작위 수를 뽑아 2초간 말합니다. 그 후 0.1부터 2사이의 실수중 무작위 수를 뽑아 2초간 말합니다.",
        "coordinate_mouse_desc": "마우스 포인터의 A 좌표 값을 의미합니다.",
        "coordinate_mouse_elements": "A-- 아래 선택지 중 하나<br>① \\\"x\\\" 또는 \\\"X\\\"<br>② \\\"y\\\" 또는 \\\"Y\\\"",
        "coordinate_mouse_exampleCode": "def when_start():\n    while True:\n        Entry.print(Entry.value_of_mouse_pointer(\\\"x\\\"))",
        "coordinate_mouse_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 마우스 포인터의 x좌표를 계속해서 말합니다.",
        "coordinate_object_desc": "A에 대한 B정보값입니다.",
        "coordinate_object_elements": "A-- 아래 선택지 중 하나<br>① \\\"오브젝트 이름\\\"<br>② \\\"self\\\" 또는 \\\"자신\\\"%nextB-- 아래 선택지 중 하나<br>① \\\"x\\\" 또는 \\\"X\\\"<br>② \\\"y\\\" 또는 \\\"Y\\\"<br>③ \\\"rotation\\\" 또는 \\\"방향\\\"<br>④ \\\"direction\\\" 또는 \\\"이동 방향\\\"<br>⑤ \\\"size\\\"  또는 \\\"크기\\\"<br>⑥ \\\"shape_number\\\" 또는 \\\"모양 번호\\\"<br>⑦ \\\"shape_name\\\" 또는 \\\"모양 이름\\\"",
        "coordinate_object_exampleCode": "def when_start():\n    while True:\n        Entry.add_x(1)\n        Entry.print(Entry.value_of_object(\\\"오브젝트\\\", \\\"x\\\"))\n",
        "coordinate_object_exampleDesc": "[시작하기]버튼을 클릭하면 계속해서 오브젝트의 x좌표가 1씩 증가하며, \\\"오브젝트\\\"의 x좌표를 말합니다.",
        "get_sound_volume_desc": "현재 작품에 설정된 소리의 크기값입니다.",
        "get_sound_volume_exampleCode": "def when_start():\n    while True:\n        Entry.print(Entry.value_of_sound_volume())",
        "get_sound_volume_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 소리의 크기값을 계속해서 말합니다.",
        "quotient_and_mod_desc": "A와 B의 연산값입니다.",
        "quotient_and_mod_elements": "A, B-- 연산하고자 하는 숫자값<br>① // : A / B의 몫에 해당하는 값<br>② % : A / B의 나머지에 해당하는 값",
        "quotient_and_mod_exampleCode": "def when_start():\n    Entry.print_for_sec(10 // 3, 2)\n    Entry.print_for_sec(10 % 3, 2)",
        "quotient_and_mod_exampleDesc": "[시작하기]버튼을 클릭하면 10 / 3의 몫인 3을 2초 동안 말하고, 나머지인 1을 2초 동안 말합니다.",
        "calc_operation_desc": "A의 연산값입니다.",
        "calc_operation_elements": "A, B-- 연산하고자 하는 숫자값<br>① A ** 2 : A를 제곱한 값<br>② math.sqrt(A): A의 루트값<br>③ math.sin(A): A의 사인값<br>④ math.cos(A): A의 코사인 값<br>⑤ math.tan(A):  A의 탄젠트값 <br>⑥ math.asin(A): A의 아크사인값<br>⑦ math.acos(A): A의 아크코사인값<br>⑧ math.atan(): A의 아크탄젠트값<br>⑨ math.log10(A): A의 로그값<br>⑩ math.log(A): A의 자연로그값<br>⑪ A - math.floor(A): A의 소수점 부분<br>⑫ math.floor(A): A의 소수점 버림값<br>⑬ math.ceil(A): A의 소수점 올림값<br>⑭ math.round(A): A의 소수점 반올림값<br>⑮ math.factorial(A): A의 팩토리얼 값<br>⑯ math.fabs(A): A의 절댓값",
        "calc_operation_exampleCode": "def when_start():\n    Entry.print_for_sec(10 ** 2, 2)\n    Entry.print_for_sec(math.sqrt(9), 2)\n    Entry.print_for_sec(math.sin(90), 2)\n    Entry.print_for_sec(math.fabs(-10), 2)",
        "calc_operation_exampleDesc": "[시작하기]버튼을 클릭하면 10의 제곱, 9의 루트값, 90의 사인값, -10의 절댓값을 각 2초 동안 말합니다.",
        "get_project_timer_value_desc": "이 명령이 실행되는 순간 초시계에 저장된 값입니다.",
        "get_project_timer_value_exampleCode": "def when_start():\n    Entry.timer(\\\"start\\\")\n    Entry.wait_for_sec(3)\n    Entry.timer(\\\"stop\\\")\n    Entry.timer_view(\\\"hide\\\")\n    Entry.print(Entry.value_of_timer())",
        "get_project_timer_value_exampleDesc": "[시작하기]버튼을 클릭하면 초시계를 시작합니다. 3초 뒤에는 초시계를 정지하고 초시계창을 숨깁니다. 그 후 초시계값을 말합니다.",
        "choose_project_timer_action_desc": "초시계의 동작을 A로 정합니다.<br>(이 명령어를 사용하면 실행화면에 ‘초시계 창’이 생성됩니다.)",
        "choose_project_timer_action_elements": "A-- 아래 선택지 중 하나<br>① \\\"start\\\" : 초시계를 시작<br>② \\\"stop\\\" : 초시계를 정지<br>③ \\\"reset\\\" : 초시계를 초기화",
        "choose_project_timer_action_exampleCode": "def when_start():\n    Entry.timer(\\\"start\\\")\n    Entry.wait_for_sec(3)\n    Entry.timer(\\\"stop\\\")\n    Entry.timer_view(\\\"hide\\\")\n    Entry.print(Entry.value_of_timer())",
        "choose_project_timer_action_exampleDesc": "[시작하기]버튼을 클릭하면 초시계를 시작합니다. 3초 뒤에는 초시계를 정지하고 초시계창을 숨깁니다. 그 후 초시계값을 말합니다.",
        "set_visible_project_timer_desc": "실행화면의 초시계 창을 A로 설정합니다.",
        "set_visible_project_timer_elements": "A-- 아래 선택지 중 하나<br>① \\\"hide\\\" : 초시계창을 숨김<br>② \\\"show\\\" : 초시계창을 보임",
        "set_visible_project_timer_exampleCode": "def when_start():\n    Entry.timer(\\\"start\\\")\n    Entry.wait_for_sec(3)\n    Entry.timer(\\\"stop\\\")\n    Entry.timer_view(\\\"hide\\\")\n    Entry.print(Entry.value_of_timer())",
        "set_visible_project_timer_exampleDesc": "[시작하기]버튼을 클릭하면 초시계를 시작합니다. 3초 뒤에는 초시계를 정지하고 초시계창을 숨깁니다. 그 후 초시계값을 말합니다.",
        "get_date_desc": "현재 A에 대한 값입니다.",
        "get_date_elements": "A-- 아래 선택지 중 하나<br>① \\\"year\\\" : 현재 연도 값<br>② \\\"month\\\" : 현재 월 값<br>③ \\\"day\\\" : 현재 일 값<br>④ \\\"hour\\\" : 현재 시간 값<br>⑤ \\\"minute\\\" : 현재 분 값<br>⑥ \\\"second\\\" : 현재 초 값",
        "get_date_exampleCode": "def when_start():\n    Entry.print(Entry.value_of_current_time(\\\"year\\\") + \\\"년\\\" + Entry.value_of_current_time(\\\"month\\\") + \\\"월\\\")",
        "get_date_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 현재년도와 월을 말합니다.",
        "distance_something_desc": "자신과 A까지의 거리 값입니다.",
        "distance_something_elements": "A-- 아래 선택지 중 하나<br>① \\\"오브젝트 이름\\\"<br>② \\\"mouse_pointer\\\" 또는 \\\"마우스포인터\\\"",
        "distance_something_exampleCode": "def when_start():\n    while True:\n        Entry.print(Entry.value_of_distance_to(\\\"mouse_pointer\\\"))",
        "distance_something_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 마우스포인터와의 거리를 계속해서 말합니다.",
        "get_sound_duration_desc": "소리 A의 길이(초)값입니다.",
        "get_sound_duration_elements": "A-- \\\"소리 이름\\\"",
        "get_sound_duration_exampleCode": "def when_start():\n    Entry.print(Entry.value_of_sound_length_of(\\\"소리\\\"))",
        "get_sound_duration_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 \\\"소리\\\"의 길이를 말합니다.",
        "get_user_name_desc": "작품을 실행하고 있는 사용자의 이름 값입니다.",
        "get_user_name_exampleCode": "def when_start():\n    Entry.print(Entry.value_of_username())",
        "get_user_name_exampleDesc": "[시작하기]버튼을 클릭하면 작품을 실행하고 있는 사용자의 이름 값을 말합니다.",
        "length_of_string_desc": "입력한 문자값의 공백을 포함한 글자 수입니다.",
        "length_of_string_elements": "A-- \\\"문자열\\\"",
        "length_of_string_exampleCode": "def when_start():\n    Entry.print_for_sec(len(\\\"안녕\\\"), 2)\n    Entry.print_for_sec(len(\\\"엔트리\\\"), 2)",
        "length_of_string_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 \\\"안녕\\\"과 \\\"엔트리\\\"의 글자 수를 각각 2초 동안 말합니다.",
        "combine_something_desc": "A 문자열과 B 문자열을 결합한 값입니다. (A, B 중 하나가 숫자면 문자열로 바꾸어 처리되고, 둘 다 숫자면 덧셈 연산으로 처리됩니다.)",
        "combine_something_elements": "A, B-- \\\"문자열\\\"",
        "combine_something_exampleCode": "def when_start():\n    Entry.print(\\\"안녕! \\\" + \\\"엔트리\\\")",
        "combine_something_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 \\\"안녕!\\\"과 \\\"엔트리\\\"를 결합한 \\\"안녕! 엔트리\\\"를 말합니다.",
        "char_at_desc": "A 문자열의 B번째의 글자 값입니다. (첫 번째 글자의 위치는 0부터 시작합니다.)",
        "char_at_elements": "A-- \\\"문자열\\\"%nextB-- 찾고자 하는 문자열의 위치",
        "char_at_exampleCode": "def when_start():\n    Entry.print(\\\"안녕 엔트리!\\\"[0])",
        "char_at_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 \\\"안녕 엔트리!\\\"의 0번째 글자인 \\\"안\\\"을 말합니다.",
        "substring_desc": "A 문자열의 B위치부터 C-1위치까지의 값입니다. (첫 번째 글자의 위치는 0부터 시작합니다.)",
        "substring_elements": "A-- \\\"문자열\\\"%nextB-- 포함할 문자열의 시작 위치<br>첫 번째 글자는 0부터 시작%nextC-- 문자열을 포함하지 않는 위치",
        "substring_exampleCode": "def when_start():\n    Entry.print(\\\"안녕 엔트리!\\\"[1:5])",
        "substring_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 \\\"안녕 엔트리!\\\"의 1에서 4번째 글자인 \\\"녕 엔트\\\"를 말합니다.",
        "index_of_string_desc": "A문자열에서 B문자열이 처음으로 등장하는 위치의 값입니다. (첫 번째 글자의 위치는 0부터 시작합니다.)",
        "index_of_string_elements": "A, B-- \\\"문자열\\\"",
        "index_of_string_exampleCode": "def when_start():\n    Entry.print(\\\"안녕 엔트리!\\\".find(\\\"엔트리\\\"))",
        "index_of_string_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 \\\"안녕 엔트리!\\\"에서 \\\"엔트리\\\"가 처음으로 등장하는 위치인 3을 말합니다.",
        "replace_string_desc": "A 문자열에서 B문자열을 모두 찾아 C문자열로 바꾼 값입니다.<br>(영문 입력시 대소문자를 구분합니다.)",
        "replace_string_elements": "A, B, C-- \\\"문자열\\\"",
        "replace_string_exampleCode": "def when_start():\n    Entry.print(\\\"안녕 엔트리!\\\".replace( \\\"안녕\\\", \\\"반가워\\\"))",
        "replace_string_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 \\\"안녕 엔트리!\\\"에서 \\\"안녕\\\"을 \\\"반가워\\\"로 바꾼 \\\"반가워 엔트리!\\\"를 말합니다.",
        "change_string_case_desc": "A의 모든 알파벳을 대문자 또는 소문자로 바꾼 문자값입니다.",
        "change_string_case_elements": "A-- \\\"문자열\\\"<br>① A.upper(): A의 모든 알파벳을 대문자로 바꾼 값<br>② A.lower() : A의 모든 알파벳을 소문자로 바꾼 값",
        "change_string_case_exampleCode": "def when_start():\n    Entry.print_for_sec(\\\"Hello Entry!\\\".upper(), 2)\n    Entry.print_for_sec(\\\"Hello Entry!\\\".lower(), 2)",
        "change_string_case_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 \\\"Hello Entry!\\\"를 모두 대문자로 바꾼 \\\"HELLO ENTRY!\\\"를 2초간 말한 다음 모두 소문자로 바꾼 \\\"hello entry!\\\"를 2초간 말합니다.",
        "ask_and_wait_desc": "오브젝트가 A 내용을 말풍선으로 묻고, 대답을 입력받습니다. 대답은 실행화면 또는 콘솔창에서 입력할 수 있으며 입력된 값은 'Entry.answer()'에 저장됩니다. <br>(이 명령어를 사용하면 실행화면에 ‘대답 창’이 생성됩니다.)",
        "ask_and_wait_elements": "A-- \\\"문자열\\\"",
        "ask_and_wait_exampleCode": "def when_start():\n    Entry.input(\\\"이름을 입력해보세요.\\\")\n    Entry.print(Entry.answer() + \\\" 반가워!\\\")",
        "ask_and_wait_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 \\\"이름을 입력해보세요.\\\"라고 말풍선으로 묻습니다. 이름을 입력하면 \\\"(입력한 이름) 반가워!\\\"라 말합니다.",
        "get_canvas_input_value_desc": "Entry.input(A) 명령에 의해 실행화면 또는 콘솔에서 입력받은 값입니다.",
        "get_canvas_input_value_exampleCode": "def when_start():\n    Entry.input(\\\"이름을 입력해보세요.\\\")\n    Entry.print(Entry.answer() + \\\" 반가워!\\\")",
        "get_canvas_input_value_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 \\\"이름을 입력해보세요.\\\"라고 말풍선으로 묻습니다. 이름을 입력하면 \\\"(입력한 이름) 반가워!\\\"라 말합니다.",
        "set_visible_answer_desc": "실행화면의 대답 창을 A로 설정합니다.",
        "set_visible_answer_elements": "A-- 아래 선택지 중 하나<br>① \\\"hide\\\" : 대답 창을 숨김<br>② \\\"show\\\" : 대답 창을 보임",
        "set_visible_answer_exampleCode": "def when_start():\n    Entry.answer_view(\\\"hide\\\")\n    Entry.input(\\\"나이를 입력하세요.\\\")\n    Entry.print(Entry.answer())",
        "set_visible_answer_exampleDesc": "[시작하기]버튼을 클릭하면 대답창이 숨겨지고, 오브젝트가 \\\"나이를 입력하세요.\\\"라고 말풍선으로 묻습니다. 나이를 입력하면 오브젝트가 입력한 나이를 말합니다.",
        "get_variable_desc": "A 변수에 저장된 값입니다.",
        "get_variable_elements": "A-- 변수명<br>① 모든 오브젝트에서 사용: A<br>② 이 오브젝트에서 사용: self.A",
        "get_variable_exampleCode": "age = 16\n\ndef when_start():\n    Entry.print(age)",
        "get_variable_exampleDesc": "age라는 변수를 만들고 그 값을 16으로 정합니다. [시작하기]버튼을 클릭하면 오브젝트가 age 변수에 들어 가 있는 값인 \\\"16\\\"을 말합니다.",
        "change_variable_desc": "A 변수에 B만큼 더합니다.",
        "change_variable_elements": "A-- 변수명<br>① 모든 오브젝트에서 사용: A<br>② 이 오브젝트에서 사용: self.A%nextB-- 숫자값",
        "change_variable_exampleCode": "age = 16\n\ndef when_start():\n    Entry.print_for_sec(age, 2)\n    age += 2\n    Entry.print_for_sec(age, 2)",
        "change_variable_exampleDesc": "age라는 변수를 만들고 그 값을 16으로 정합니다. [시작하기]버튼을 클릭하면 오브젝트가 age 변수에 들어 가 있는 값인 \\\"16\\\"을 2초 동안 말합니다. 그 후 age변수에 2를 더하고 더한값인 \\\"18\\\"을 2초 동안 말합니다.",
        "set_variable_desc": "A 변수의 값을 B로 정합니다. 만약 A 변수가 없으면  [속성] 탭에 A 변수가 자동 생성됩니다.",
        "set_variable_elements": "A-- 변수명<br>① 모든 오브젝트에서 사용: A<br>② 이 오브젝트에서 사용: self.A%nextB-- 변수에 넣을 값<br>① 문자 : \\\"안녕!\\\", \\\"엔트리\\\" 등 <br>② 숫자 : 0, 10, 35 등",
        "set_variable_exampleCode": "age = 16\n\ndef when_start():\n    Entry.print(age)",
        "set_variable_exampleDesc": "age라는 변수를 만들고 그 값을 16으로 정합니다. [시작하기]버튼을 클릭하면 오브젝트가 age 변수에 들어 가 있는 값인 \\\"16\\\"을 말합니다.",
        "show_variable_desc": "A 변수 창을 실행화면에 보이게 합니다.",
        "show_variable_elements": "A-- \\\"변수명\\\"<br>① 모든 오브젝트에서 사용: \\\"A\\\"<br>② 이 오브젝트에서 사용: \\\"self.A\\\"",
        "show_variable_exampleCode": "age = 16\n\ndef when_start():\n    Entry.hide_variable(\\\"age\\\")\n    Entry.wait_for_sec(2)\n    age = 20\n    Entry.show_variable(\\\"age\\\")",
        "show_variable_exampleDesc": "age라는 변수를 만들고 그 값을 16으로 정합니다. [시작하기]버튼을 클릭하면 age변수창을 실행화면에서 숨깁니다. 2초 후 변수값을 17로 바꾸고 age변수창을 실행화면에 보이게 합니다.",
        "hide_variable_desc": "A 변수 창을 실행화면에서 숨깁니다.",
        "hide_variable_elements": "A-- \\\"변수명\\\"<br>① 모든 오브젝트에서 사용: \\\"A\\\"<br>② 이 오브젝트에서 사용: \\\"self.A\\\"",
        "hide_variable_exampleCode": "age = 16\n\ndef when_start():\n    Entry.hide_variable(\\\"age\\\")\n    Entry.print_for_sec(age, 2)",
        "hide_variable_exampleDesc": "age라는 변수를 만들고 그 값을 16으로 정합니다. [시작하기]버튼을 클릭하면 age변수창을 실행화면에서 숨기고, 오브젝트가 age 변수에 들어 가 있는 값인 \\\"16\\\"을 2초 동안 말합니다.",
        "value_of_index_from_list_desc": "A 리스트에서 B위치의 항목 값을 의미합니다. <br>(첫 번째 항목의 위치는 0부터 시작합니다.)",
        "value_of_index_from_list_elements": "A-- 리스트명<br>① 모든 오브젝트에서 사용: A<br>② 이 오브젝트에서 사용: self.A%nextB-- 리스트 항목의 위치",
        "value_of_index_from_list_exampleCode": "basket = [\\\"apple\\\", \\\"orange\\\", \\\"pear\\\", \\\"grape\\\"]\n\ndef when_start():\n    Entry.print(basket[1])\n",
        "value_of_index_from_list_exampleDesc": "basket이라는 리스트를 만들고 4개의 항목을 넣습니다. [시작하기]버튼을 클릭하면 오브젝트가 basket 리스트의 1번째 항목인 orange를 말합니다.",
        "add_value_to_list_desc": "A 리스트의 마지막 항목으로 B값이 추가됩니다.",
        "add_value_to_list_elements": "A-- 리스트명<br>① 모든 오브젝트에서 사용: A<br>② 이 오브젝트에서 사용: self.A%nextB-- 리스트에 넣을 항목 값<br>① 문자 : \\\"안녕!\\\", \\\"엔트리\\\" 등 <br>② 숫자 : 0, 10, 35 등",
        "add_value_to_list_exampleCode": "basket = [\\\"apple\\\", \\\"orange\\\", \\\"pear\\\", \\\"grape\\\"]\n\ndef when_start():\n    basket.append(\\\"juice\\\")\n    Entry.print(basket[4])",
        "add_value_to_list_exampleDesc": "basket이라는 리스트를 만들고 4개의 항목을 넣습니다. [시작하기]버튼을 클릭하면 \\\"juice\\\"를 basket의 마지막 항목으로 추가합니다. 오브젝트는 basket의 4번째 항목인 \\\"juice\\\"를 말합니다.",
        "remove_value_from_list_desc": "A 리스트의 B위치에 있는 항목을 삭제합니다.<br>(첫 번째 항목의 위치는 0부터 시작합니다.)",
        "remove_value_from_list_elements": "A-- 리스트명<br>① 모든 오브젝트에서 사용: A<br>② 이 오브젝트에서 사용: self.A%nextB-- 리스트 항목의 위치값",
        "remove_value_from_list_exampleCode": "basket = [\\\"apple\\\", \\\"orange\\\", \\\"pear\\\", \\\"grape\\\"]\ndef when_start():\n    basket.pop(0)\n    Entry.print(basket[0])",
        "remove_value_from_list_exampleDesc": "basket이라는 리스트를 만들고 4개의 항목을 넣습니다. [시작하기]버튼을 클릭하면 basket의 0번째 항목인 apple을 삭제합니다. 오브젝트는 새롭게 basket의 0번째 항목이 된 \\\"orange\\\"를 말합니다.",
        "insert_value_to_list_desc": "A 리스트의 B위치에 C항목을 끼워 넣습니다. <br>(첫 번째 항목의 위치는 0부터 시작합니다. B위치보다 뒤에 있는 항목들은 순서가 하나씩 밀려납니다.)",
        "insert_value_to_list_elements": "A-- 리스트명<br>① 모든 오브젝트에서 사용: A<br>② 이 오브젝트에서 사용: self.A%nextB-- 리스트 항목의 위치%nextC-- 리스트에 넣을 항목 값<br>① 문자 : \\\"안녕!\\\", \\\"엔트리\\\" 등 <br>② 숫자 : 0, 10, 35 등",
        "insert_value_to_list_exampleCode": "basket = [\\\"apple\\\", \\\"orange\\\", \\\"pear\\\", \\\"grape\\\"]\n\ndef when_start():\n    basket.insert(1, \\\"juice\\\")\n    Entry.print(basket[2])",
        "insert_value_to_list_exampleDesc": "basket이라는 리스트를 만들고 4개의 항목을 넣습니다. [시작하기]버튼을 클릭하면 basket의 1번째 위치에 항목 \\\"juice\\\"를 끼워 넣습니다. 오브젝트는 새롭게 basket의 2번째 항목이 된 \\\"orange\\\"를 말합니다.",
        "change_value_list_index_desc": "A 리스트에서 B위치에 있는 항목의 값을 C 값으로 바꿉니다.<br>(첫 번째 항목의 위치는 0부터 시작합니다.)",
        "change_value_list_index_elements": "A-- 리스트명<br>① 모든 오브젝트에서 사용: A<br>② 이 오브젝트에서 사용: self.A%nextB-- 리스트 항목의 위치%nextC-- 리스트에 넣을 항목 값<br>① 문자 : \\\"안녕!\\\", \\\"엔트리\\\" 등 <br>② 숫자 : 0, 10, 35 등",
        "change_value_list_index_exampleCode": "basket = [\\\"apple\\\", \\\"orange\\\", \\\"pear\\\", \\\"grape\\\"]\n\ndef when_start():\n    basket[0] = \\\"juice\\\"\n    Entry.print(basket[0])",
        "change_value_list_index_exampleDesc": "basket이라는 리스트를 만들고 4개의 항목을 넣습니다. [시작하기]버튼을 클릭하면 basket의 0번째 위치의 항목 \\\"apple\\\"을 \\\"juice\\\"로 바꿉니다. 오브젝트는 바뀐 basket의 0번째 항목 \\\"juice\\\"를 말합니다.",
        "length_of_list_desc": "A 리스트가 보유한 항목 개수 값입니다.",
        "length_of_list_elements": "A-- 리스트명<br>① 모든 오브젝트에서 사용: A<br>② 이 오브젝트에서 사용: self.A",
        "length_of_list_exampleCode": "basket = [\\\"apple\\\", \\\"orange\\\", \\\"pear\\\", \\\"grape\\\"]\n\ndef when_start():\n    Entry.print(len(basket))",
        "length_of_list_exampleDesc": "basket이라는 리스트를 만들고 4개의 항목을 넣습니다. [시작하기]버튼을 클릭하면 오브젝트는  basket의 항목 개수인 4를 말합니다.",
        "is_included_in_list_desc": "A값을 가진 항목이 B리스트에 포함되어 있는지 확인합니다.",
        "is_included_in_list_elements": "A-- 리스트의 항목 값<br>① 문자 : \\\"안녕!\\\", \\\"엔트리\\\" 등 <br>② 숫자 : 0, 10, 35 등%nextB-- 리스트명<br>① 모든 오브젝트에서 사용: A<br>② 이 오브젝트에서 사용: self.A",
        "is_included_in_list_exampleCode": "basket = [\\\"apple\\\", \\\"orange\\\", \\\"pear\\\", \\\"grape\\\"]\n\ndef when_start():\n    if \\\"apple\\\" in basket:\n        Entry.print(\\\"사과가 있어!\\\")",
        "is_included_in_list_exampleDesc": "basket이라는 리스트를 만들고 4개의 항목을 넣습니다. [시작하기]버튼을 클릭하면 basket 리스트에 \\\"apple\\\"항목이 있는지 확인합니다. \\\"apple\\\"항목이 있기 때문에 오브젝트는 \\\"사과가 있어!\\\"라 말합니다.",
        "show_list_desc": "선택한 리스트 창을 실행화면에 보이게 합니다.",
        "show_list_elements": "A-- \\\"리스트명\\\"<br>① 모든 오브젝트에서 사용: \\\"A\\\"<br>② 이 오브젝트에서 사용: \\\"self.A\\\"",
        "show_list_exampleCode": "basket = [\\\"apple\\\", \\\"orange\\\", \\\"pear\\\", \\\"grape\\\"]\n\ndef when_start():\n    Entry.hide_list(\\\"basket\\\")\n    Entry.wait_for_sec(2)\n    Entry.show_list(\\\"basket\\\")",
        "show_list_exampleDesc": "basket이라는 리스트를 만들고 4개의 항목을 넣습니다. [시작하기]버튼을 클릭하면 basket 리스트를 2초간 숨긴 다음 보여줍니다.",
        "hide_list_desc": "선택한 리스트 창을 실행화면에서 숨깁니다.",
        "hide_list_elements": "A-- \\\"리스트명\\\"<br>① 모든 오브젝트에서 사용: \\\"A\\\"<br>② 이 오브젝트에서 사용: \\\"self.A\\\"",
        "hide_list_exampleCode": "basket = [\\\"apple\\\", \\\"orange\\\", \\\"pear\\\", \\\"grape\\\"]\n\ndef when_start():\n    Entry.hide_list(\\\"basket\\\")\n    Entry.wait_for_sec(2)\n    Entry.show_list(\\\"basket\\\")",
        "hide_list_exampleDesc": "basket이라는 리스트를 만들고 4개의 항목을 넣습니다. [시작하기]버튼을 클릭하면 basket 리스트를 2초간 숨긴 다음 보여줍니다.",
        "boolean_and_or_desc": "A와 B의 판단값을 확인하여 True 또는 False로 판단합니다.",
        "boolean_and_or_elements": "A, B-- True 또는 False로 판단할 수 있는 명령어 입력(판단 카테고리의 명령어)<br>① and : A와 B의 판단이 모두 True인 경우 True, 아닌 경우 False<br>② or : A와 B의 판단 중 하나라도 True인 경우 True, 아닌 경우 False",
        "boolean_and_or_exampleCode": "def when_start():\n    while True:\n        if Entry.is_key_pressed(\\\"a\\\") and Entry.is_key_pressed(\\\"s\\\"):\n            Entry.add_effect(\\\"color\\\", 10)",
        "boolean_and_or_exampleDesc": "[시작하기]버튼을 클릭하고 키보드의 \\\"a\\\" 와 \\\"s\\\"키를 동시에 눌렀을 때, 색깔 효과를 10만큼 줍니다.",
        "check_weather_desc": "B날짜에 C지역의 날씨가 A인 경우 True로 판단합니다.",
        "check_weather_elements": "A-- 아래 선택지 중 하나<br>①    \\\"sunny\\\" : 맑음<br>②    \\\"partly cloudy\\\" : 구름조금<br>③    \\\"mostly cloudy\\\" : 구름많음<br>④    \\\"cloudy\\\" : 흐림<br>⑤    \\\"rainy\\\" : 비<br>⑥    \\\"sleet\\\" : 진눈깨비<br>⑦    \\\"snowy\\\" : 눈%nextB-- 아래 선택지 중 하나<br>①    \\\"yesterday\\\" : 어제<br>②    \\\"today\\\" : 오늘<br>③    \\\"tomorrow\\\" : 내일<br>④    \\\"After 2 days\\\" : 모레<br>⑤    \\\"After 3 days\\\" : 3일 후<br>⑥    \\\"After 4 days\\\" : 4일 후<br>⑦    \\\"After 5 days\\\" : 5일 후<br>⑧    \\\"After 6 days\\\" : 6일 후%nextC-- 아래 선택지 중 하나<br>①    \\\"Seoul\\\" : 서울<br>②    \\\"Gangwon-do\\\" : 강원<br>③    \\\"Gyeonggi-do\\\" : 경기<br>④    \\\"Gyeongsangnam-do\\\" : 경남<br>⑤    \\\"Gyeongsangbuk-do\\\" : 경북<br>⑥    \\\"Gwangju\\\" : 광주<br>⑦    \\\"Daegu\\\" : 대구<br>⑧    \\\"Daejeon\\\" : 대전<br>⑨    \\\"Busan\\\" : 부산<br>⑩    \\\"Sejong\\\" : 세종<br>⑪    \\\"Ulsan\\\" : 울산<br>⑫    \\\"Incheon\\\" : 인천<br>⑬    \\\"Jeollanam-do\\\" : 전남<br>⑭    \\\"Jeollabuk-do\\\" : 전북<br>⑮    \\\"Jeju\\\" : 제주<br>Ⓐ \\\"Chungcheongnam-do\\\" : 충남<br>Ⓑ \\\"Chungcheongbuk-do\\\": 충북",
        "check_weather_exampleCode": "def when_start():\n    if Weather.is_condition_sunny(\\\"today\\\", \\\"Seoul\\\"):\n        Entry.print(\\\"오늘 서울의 날씨는 맑습니다.\\\")",
        "check_weather_exampleDesc": "[시작하기]버튼을 클릭하면 오늘 서울의 날씨가 맑은지 확인합니다. 만약 서울의 날씨가 맑다면 오브젝트가 \\\"오늘 서울의 날씨는 맑습니다.\\\"라고 말합니다.​",
        "check_finedust_desc": "선택한 지역의 현재 미세먼지 정보를 실제 미세먼지 등급과 비교하여 일치하는 경우 ‘참’으로 판단합니다.",
        "check_finedust_elements": "A-- 아래 선택지 중 하나<br>①    \\\"good\\\" : 좋음<br>②    \\\"normal\\\" : 보통<br>③    \\\"bad\\\" : 나쁨<br>④    \\\"very bad\\\" : 매우나쁨%nextB-- 아래 선택지 중 하나<br>①    \\\"Seoul\\\" : 서울<br>②    \\\"Gangwon-do\\\" : 강원<br>③    \\\"Gyeonggi-do\\\" : 경기<br>④    \\\"Gyeongsangnam-do\\\" : 경남<br>⑤    \\\"Gyeongsangbuk-do\\\" : 경북<br>⑥    \\\"Gwangju\\\" : 광주<br>⑦    \\\"Daegu\\\" : 대구<br>⑧    \\\"Daejeon\\\" : 대전<br>⑨    \\\"Busan\\\" : 부산<br>⑩    \\\"Sejong\\\" : 세종<br>⑪    \\\"Ulsan\\\" : 울산<br>⑫    \\\"Incheon\\\" : 인천<br>⑬    \\\"Jeollanam-do\\\" : 전남<br>⑭    \\\"Jeollabuk-do\\\" : 전북<br>⑮    \\\"Jeju\\\" : 제주<br>Ⓐ \\\"Chungcheongnam-do\\\" : 충남<br>Ⓑ \\\"Chungcheongbuk-do\\\": 충북",
        "check_finedust_exampleCode": "def when_start():\n    if Weather.is_current_finedust_grade_good(\\\"Seoul\\\"):\n        Entry.print(\\\"현재 서울의 미세먼지 등급은 좋음입니다.\\\")",
        "check_finedust_exampleDesc": "[시작하기]버튼을 클릭하면 현재 서울의 미세먼지 등급이 좋음인지 확인합니다. 만약 서울의 날씨가 맑다면 오브젝트가 “오늘 서울의 미세먼지 등급은 좋음입니다.”라고 말합니다.​",
        "get_weather_data_desc": "선택한 날짜와 지역의 각종 날씨 정보값(최저기온, 최고기온, 습도, 강수량, 강수확률, 풍속)입니다.",
        "get_weather_data_elements": "A-- 아래 선택지 중 하나<br>①    \\\"the lowest temperature\\\" : 최저기온<br>②    \\\"the highest temperature\\\" : 최고기온<br>③    \\\"humidity\\\" : 습도<br>④    \\\"precipitation\\\" : 강수량<br>⑤    \\\"precipitation probability\\\" : 강수확률<br>⑥    \\\"wind speed\\\" : 풍속%nextB-- 아래 선택지 중 하나<br>①    \\\"yesterday\\\" : 어제<br>②    \\\"today\\\" : 오늘<br>③    \\\"tomorrow\\\" : 내일<br>④    \\\"After 2 days\\\" : 모레<br>⑤    \\\"After 3 days\\\" : 3일 후<br>⑥    \\\"After 4 days\\\" : 4일 후<br>⑦    \\\"After 5 days\\\" : 5일 후<br>⑧    \\\"After 6 days\\\" : 6일 후%nextC-- 아래 선택지 중 하나<br>①    \\\"Seoul\\\" : 서울<br>②    \\\"Gangwon-do\\\" : 강원<br>③    \\\"Gyeonggi-do\\\" : 경기<br>④    \\\"Gyeongsangnam-do\\\" : 경남<br>⑤    \\\"Gyeongsangbuk-do\\\" : 경북<br>⑥    \\\"Gwangju\\\" : 광주<br>⑦    \\\"Daegu\\\" : 대구<br>⑧    \\\"Daejeon\\\" : 대전<br>⑨    \\\"Busan\\\" : 부산<br>⑩    \\\"Sejong\\\" : 세종<br>⑪    \\\"Ulsan\\\" : 울산<br>⑫    \\\"Incheon\\\" : 인천<br>⑬    \\\"Jeollanam-do\\\" : 전남<br>⑭    \\\"Jeollabuk-do\\\" : 전북<br>⑮    \\\"Jeju\\\" : 제주<br>Ⓐ \\\"Chungcheongnam-do\\\" : 충남<br>Ⓑ \\\"Chungcheongbuk-do\\\": 충북",
        "get_weather_data_exampleCode": "def when_start():\n    Entry.print(Weather.get_lowest_temperature(\\\"today\\\", \\\"Seoul\\\"))",
        "get_weather_data_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 오늘 서울의 최저기온을 말합니다.​",
        "get_current_weather_data_desc": "현재 B지역의 A 날씨 정보값을 의미합니다.",
        "get_current_weather_data_elements": "A-- 아래 선택지 중 하나<br>①    \\\"Seoul\\\" : 서울<br>②    \\\"Gangwon-do\\\" : 강원<br>③    \\\"Gyeonggi-do\\\" : 경기<br>④    \\\"Gyeongsangnam-do\\\" : 경남<br>⑤    \\\"Gyeongsangbuk-do\\\" : 경북<br>⑥    \\\"Gwangju\\\" : 광주<br>⑦    \\\"Daegu\\\" : 대구<br>⑧    \\\"Daejeon\\\" : 대전<br>⑨    \\\"Busan\\\" : 부산<br>⑩    \\\"Sejong\\\" : 세종<br>⑪    \\\"Ulsan\\\" : 울산<br>⑫    \\\"Incheon\\\" : 인천<br>⑬    \\\"Jeollanam-do\\\" : 전남<br>⑭    \\\"Jeollabuk-do\\\" : 전북<br>⑮    \\\"Jeju\\\" : 제주<br>Ⓐ \\\"Chungcheongnam-do\\\" : 충남<br>Ⓑ \\\"Chungcheongbuk-do\\\": 충북%nextB-- 아래 선택지 중 하나<br>①    \\\"temperature\\\" : 기온<br>②    \\\"concentration of fine dust\\\" : 미세먼지농도",
        "get_current_weather_data_exampleCode": "def when_start():\n    Entry.print(Weather.get_current_temperature(\\\"Seoul\\\"))",
        "get_current_weather_data_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 현재 서울의 기온을 말합니다.",
        "get_today_temperature_desc": "오늘 A지역의 B 시간대 기온 정보값을 의미합니다.",
        "get_today_temperature_elements": "A-- 아래 선택지 중 하나<br>①    \\\"Seoul\\\" : 서울<br>②    \\\"Gangwon-do\\\" : 강원<br>③    \\\"Gyeonggi-do\\\" : 경기<br>④    \\\"Gyeongsangnam-do\\\" : 경남<br>⑤    \\\"Gyeongsangbuk-do\\\" : 경북<br>⑥    \\\"Gwangju\\\" : 광주<br>⑦    \\\"Daegu\\\" : 대구<br>⑧    \\\"Daejeon\\\" : 대전<br>⑨    \\\"Busan\\\" : 부산<br>⑩    \\\"Sejong\\\" : 세종<br>⑪    \\\"Ulsan\\\" : 울산<br>⑫    \\\"Incheon\\\" : 인천<br>⑬    \\\"Jeollanam-do\\\" : 전남<br>⑭    \\\"Jeollabuk-do\\\" : 전북<br>⑮    \\\"Jeju\\\" : 제주<br>Ⓐ \\\"Chungcheongnam-do\\\" : 충남<br>Ⓑ \\\"Chungcheongbuk-do\\\": 충북%nextB-- 아래 선택지 중 하나<br>①    \\\"00\\\" : 당일 00시 측정된 기온값<br>②    \\\"03\\\" : 당일 03시 측정된 기온값<br>③    \\\"06\\\" : 당일 06시 측정된 기온값<br>④    \\\"09\\\" : 당일 09시 측정된 기온값<br>⑤    \\\"12\\\" : 당일 12시 측정된 기온값<br>⑥    \\\"15\\\" : 당일 15시 측정된 기온값<br>⑦    \\\"18\\\" : 당일 18시 측정된 기온값<br>⑧    \\\"21\\\" : 당일 21시 측정된 기온값",
        "get_today_temperature_exampleCode": "def when_start():\n    Entry.print(Weather.get_today_temperature(\\\"Seoul\\\", 00))",
        "get_today_temperature_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 오늘 서울의 00시 기온을 말합니다.​",
        "check_city_weather_desc": "B날짜에 C지역의 날씨가 A인 경우 True로 판단합니다.",
        "check_city_weather_elements": "A-- 아래 선택지 중 하나<br>①    \\\"sunny\\\" : 맑음<br>②    \\\"partly cloudy\\\" : 구름조금<br>③    \\\"mostly cloudy\\\" : 구름많음<br>④    \\\"cloudy\\\" : 흐림<br>⑤    \\\"rainy\\\" : 비<br>⑥    \\\"sleet\\\" : 진눈깨비<br>⑦    \\\"snowy\\\" : 눈%nextB-- 아래 선택지 중 하나<br>①    \\\"yesterday\\\" : 어제<br>②    \\\"today\\\" : 오늘<br>③    \\\"tomorrow\\\" : 내일<br>④    \\\"After 2 days\\\" : 모레<br>⑤    \\\"After 3 days\\\" : 3일 후<br>⑥    \\\"After 4 days\\\" : 4일 후<br>⑦    \\\"After 5 days\\\" : 5일 후<br>⑧    \\\"After 6 days\\\" : 6일 후%nextC-- 아래 선택지 중 하나<br>①    \\\"Seoul\\\" : 서울<br>②    \\\"Gangwon-do\\\" : 강원<br>③    \\\"Gyeonggi-do\\\" : 경기<br>④    \\\"Gyeongsangnam-do\\\" : 경남<br>⑤    \\\"Gyeongsangbuk-do\\\" : 경북<br>⑥    \\\"Gwangju\\\" : 광주<br>⑦    \\\"Daegu\\\" : 대구<br>⑧    \\\"Daejeon\\\" : 대전<br>⑨    \\\"Busan\\\" : 부산<br>⑩    \\\"Sejong\\\" : 세종<br>⑪    \\\"Ulsan\\\" : 울산<br>⑫    \\\"Incheon\\\" : 인천<br>⑬    \\\"Jeollanam-do\\\" : 전남<br>⑭    \\\"Jeollabuk-do\\\" : 전북<br>⑮    \\\"Jeju\\\" : 제주<br>Ⓐ \\\"Chungcheongnam-do\\\" : 충남<br>Ⓑ \\\"Chungcheongbuk-do\\\": 충북",
        "check_city_weather_exampleCode": "def when_start():\n    if Weather.is_condition_sunny(\\\"today\\\", \\\"Seoul\\\"):\n        Entry.print(\\\"오늘 서울의 날씨는 맑습니다.\\\")",
        "check_city_weather_exampleDesc": "[시작하기]버튼을 클릭하면 오늘 서울의 날씨가 맑은지 확인합니다. 만약 서울의 날씨가 맑다면 오브젝트가 \\\"오늘 서울의 날씨는 맑습니다.\\\"라고 말합니다.​",
        "check_city_finedust_desc": "선택한 지역의 현재 미세먼지 정보를 실제 미세먼지 등급과 비교하여 일치하는 경우 ‘참’으로 판단합니다.",
        "check_city_finedust_elements": "A-- 아래 선택지 중 하나<br>①    \\\"good\\\" : 좋음<br>②    \\\"normal\\\" : 보통<br>③    \\\"bad\\\" : 나쁨<br>④    \\\"very bad\\\" : 매우나쁨%nextB-- 아래 선택지 중 하나<br>①    \\\"Seoul\\\" : 서울<br>②    \\\"Gangwon-do\\\" : 강원<br>③    \\\"Gyeonggi-do\\\" : 경기<br>④    \\\"Gyeongsangnam-do\\\" : 경남<br>⑤    \\\"Gyeongsangbuk-do\\\" : 경북<br>⑥    \\\"Gwangju\\\" : 광주<br>⑦    \\\"Daegu\\\" : 대구<br>⑧    \\\"Daejeon\\\" : 대전<br>⑨    \\\"Busan\\\" : 부산<br>⑩    \\\"Sejong\\\" : 세종<br>⑪    \\\"Ulsan\\\" : 울산<br>⑫    \\\"Incheon\\\" : 인천<br>⑬    \\\"Jeollanam-do\\\" : 전남<br>⑭    \\\"Jeollabuk-do\\\" : 전북<br>⑮    \\\"Jeju\\\" : 제주<br>Ⓐ \\\"Chungcheongnam-do\\\" : 충남<br>Ⓑ \\\"Chungcheongbuk-do\\\": 충북",
        "check_city_finedust_exampleCode": "def when_start():\n    if Weather.is_current_finedust_grade_good(\\\"Seoul\\\"):\n        Entry.print(\\\"현재 서울의 미세먼지 등급은 좋음입니다.\\\")",
        "check_city_finedust_exampleDesc": "[시작하기]버튼을 클릭하면 현재 서울의 미세먼지 등급이 좋음인지 확인합니다. 만약 서울의 날씨가 맑다면 오브젝트가 “오늘 서울의 미세먼지 등급은 좋음입니다.”라고 말합니다.​",
        "get_city_weather_data_desc": "선택한 날짜와 지역의 각종 날씨 정보값(최저기온, 최고기온, 습도, 강수량, 강수확률, 풍속)입니다.",
        "get_city_weather_data_elements": "A-- 아래 선택지 중 하나<br>①    \\\"the lowest temperature\\\" : 최저기온<br>②    \\\"the highest temperature\\\" : 최고기온<br>③    \\\"humidity\\\" : 습도<br>④    \\\"precipitation\\\" : 강수량<br>⑤    \\\"precipitation probability\\\" : 강수확률<br>⑥    \\\"wind speed\\\" : 풍속%nextB-- 아래 선택지 중 하나<br>①    \\\"yesterday\\\" : 어제<br>②    \\\"today\\\" : 오늘<br>③    \\\"tomorrow\\\" : 내일<br>④    \\\"After 2 days\\\" : 모레<br>⑤    \\\"After 3 days\\\" : 3일 후<br>⑥    \\\"After 4 days\\\" : 4일 후<br>⑦    \\\"After 5 days\\\" : 5일 후<br>⑧    \\\"After 6 days\\\" : 6일 후%nextC-- 아래 선택지 중 하나<br>①    \\\"Seoul\\\" : 서울<br>②    \\\"Gangwon-do\\\" : 강원<br>③    \\\"Gyeonggi-do\\\" : 경기<br>④    \\\"Gyeongsangnam-do\\\" : 경남<br>⑤    \\\"Gyeongsangbuk-do\\\" : 경북<br>⑥    \\\"Gwangju\\\" : 광주<br>⑦    \\\"Daegu\\\" : 대구<br>⑧    \\\"Daejeon\\\" : 대전<br>⑨    \\\"Busan\\\" : 부산<br>⑩    \\\"Sejong\\\" : 세종<br>⑪    \\\"Ulsan\\\" : 울산<br>⑫    \\\"Incheon\\\" : 인천<br>⑬    \\\"Jeollanam-do\\\" : 전남<br>⑭    \\\"Jeollabuk-do\\\" : 전북<br>⑮    \\\"Jeju\\\" : 제주<br>Ⓐ \\\"Chungcheongnam-do\\\" : 충남<br>Ⓑ \\\"Chungcheongbuk-do\\\": 충북",
        "get_city_weather_data_exampleCode": "def when_start():\n    Entry.print(Weather.get_lowest_temperature(\\\"today\\\", \\\"Seoul\\\"))",
        "get_city_weather_data_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 오늘 서울의 최저기온을 말합니다.​",
        "get_current_city_weather_data_desc": "현재 B지역의 A 날씨 정보값을 의미합니다.",
        "get_current_city_weather_data_elements": "A-- 아래 선택지 중 하나<br>①    \\\"Seoul\\\" : 서울<br>②    \\\"Gangwon-do\\\" : 강원<br>③    \\\"Gyeonggi-do\\\" : 경기<br>④    \\\"Gyeongsangnam-do\\\" : 경남<br>⑤    \\\"Gyeongsangbuk-do\\\" : 경북<br>⑥    \\\"Gwangju\\\" : 광주<br>⑦    \\\"Daegu\\\" : 대구<br>⑧    \\\"Daejeon\\\" : 대전<br>⑨    \\\"Busan\\\" : 부산<br>⑩    \\\"Sejong\\\" : 세종<br>⑪    \\\"Ulsan\\\" : 울산<br>⑫    \\\"Incheon\\\" : 인천<br>⑬    \\\"Jeollanam-do\\\" : 전남<br>⑭    \\\"Jeollabuk-do\\\" : 전북<br>⑮    \\\"Jeju\\\" : 제주<br>Ⓐ \\\"Chungcheongnam-do\\\" : 충남<br>Ⓑ \\\"Chungcheongbuk-do\\\": 충북%nextB-- 아래 선택지 중 하나<br>①    \\\"temperature\\\" : 기온<br>②    \\\"concentration of fine dust\\\" : 미세먼지농도",
        "get_current_city_weather_data_exampleCode": "def when_start():\n    Entry.print(Weather.get_current_temperature(\\\"Seoul\\\"))",
        "get_current_city_weather_data_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 현재 서울의 기온을 말합니다.",
        "get_today_city_temperature_desc": "오늘 A지역의 B 시간대 기온 정보값을 의미합니다.",
        "get_today_city_temperature_elements": "A-- 아래 선택지 중 하나<br>①    \\\"Seoul\\\" : 서울<br>②    \\\"Gangwon-do\\\" : 강원<br>③    \\\"Gyeonggi-do\\\" : 경기<br>④    \\\"Gyeongsangnam-do\\\" : 경남<br>⑤    \\\"Gyeongsangbuk-do\\\" : 경북<br>⑥    \\\"Gwangju\\\" : 광주<br>⑦    \\\"Daegu\\\" : 대구<br>⑧    \\\"Daejeon\\\" : 대전<br>⑨    \\\"Busan\\\" : 부산<br>⑩    \\\"Sejong\\\" : 세종<br>⑪    \\\"Ulsan\\\" : 울산<br>⑫    \\\"Incheon\\\" : 인천<br>⑬    \\\"Jeollanam-do\\\" : 전남<br>⑭    \\\"Jeollabuk-do\\\" : 전북<br>⑮    \\\"Jeju\\\" : 제주<br>Ⓐ \\\"Chungcheongnam-do\\\" : 충남<br>Ⓑ \\\"Chungcheongbuk-do\\\": 충북%nextB-- 아래 선택지 중 하나<br>①    \\\"00\\\" : 당일 00시 측정된 기온값<br>②    \\\"03\\\" : 당일 03시 측정된 기온값<br>③    \\\"06\\\" : 당일 06시 측정된 기온값<br>④    \\\"09\\\" : 당일 09시 측정된 기온값<br>⑤    \\\"12\\\" : 당일 12시 측정된 기온값<br>⑥    \\\"15\\\" : 당일 15시 측정된 기온값<br>⑦    \\\"18\\\" : 당일 18시 측정된 기온값<br>⑧    \\\"21\\\" : 당일 21시 측정된 기온값",
        "get_today_city_temperature_exampleCode": "def when_start():\n    Entry.print(Weather.get_today_city_temperature(\\\"Seoul\\\", 00))",
        "get_today_city_temperature_exampleDesc": "[시작하기]버튼을 클릭하면 오브젝트가 오늘 서울의 00시 기온을 말합니다.​"
    },

    "SharePolicy": { "title": "엔트리 작품/게시물 공유 가이드" },
    "General": {
        "alert_title": "알림",
        "confirm_title": "확인",
        "left": "왼쪽",
        "right": "오른쪽",
        "apply": "켜기",
        "clear": " 끄기",
        "clock": "시계",
        "font_size": "글자 크기",
        "counter_clock": "반시계",
        "second": "초",
        "note_a": "라",
        "note_b": "시",
        "note_c": "도",
        "note_d": "레",
        "note_e": "미",
        "note_f": "파",
        "note_g": "솔",
        "dont_show_again": "다시보지 않기"
    },
    "EntryStatic": {
        "art_category_all": "모든 작품",
        "art_category_game": "게임",
        "art_category_living": "생활과 도구",
        "art_category_storytelling": "스토리텔링",
        "art_category_arts": "예술",
        "art_category_knowledge": "지식 공유",
        "art_category_etc": "기타",
        "art_sort_updated": "최신순",
        "art_sort_visit": "조회순",
        "art_sort_likeCnt": "좋아요순",
        "art_sort_comment": "댓글순",
        "art_period_all": "전체기간",
        "art_period_day": "오늘",
        "art_period_week": "최근 1주일",
        "art_period_month": "최근 1개월",
        "art_period_three_month": "최근 3개월",
        "group": "학급 공유하기"
    },
    "Fonts": {
        "batang": "바탕체",
        "jeju_hallasan": "한라산체",
        "gothic": "나눔고딕체",
        "myeongjo": "나눔명조",
        "pen_script": "나눔손글씨",
        "square_round": "나눔스퀘어라운드체",
        "gothic_coding": "코딩고딕체",
        "jalnan": "잘난체",
        "designhouse": "디자인하우스체",
        "dunggeunmo": "둥근모꼴체",
        "uhbeemysen": "어비마이센체",
        "sd_comic_stencil": "산돌 코믹스탠실",
        "sd_childfundkorea": "산돌 초록우산 어린이",
        "sd_cinema_theater": "산돌 씨네마극장",
        "sd_mapssi": "산돌 맵씨",
        "sd_shabang": "산돌 별이샤방샤방",
        "sd_woodcarving": "산돌 목각",
        "sd_yongbi": "산돌 용비어천가"
    },
    "Workspace": {
        "check_result_value": "결과값을 가짐",
        "check_local_variable": "지역변수를 사용",
        "local_variable": "지역변수",
        "local_variable_dup": "같은 이름의 지역변수가 이미 있어 이름이 자동으로 변경되었습니다.",
        "local_variable_rename": "지역변수 이름 변경 완료",
        "local_variable_rename_failed": "지역변수 이름 변경 실패",
        "local_variable_rename_ok": "지역변수의 이름이 성공적으로 변경되었습니다.",
        "use_block_objects1": "사용된 오브젝트 (블록 {0}개)",
        "use_block_objects2": "사용된 오브젝트 ({0})",
        "func_property": "함수 속성",
        "object_not_found_for_paste": "붙여넣기 할 오브젝트가 없습니다.",
        "my_block": "나의 블록",
        "download_image_name": "엔트리 블록",
        "remove_object": "오브젝트 삭제",
        "remove_object_msg": "(이)가 삭제되었습니다.",
        "shape_remove_fail": "모양 삭제 실패",
        "shape_remove_fail_msg": "적어도 하나 이상의 모양이 존재하여야 합니다.",
        "shape_remove_ok": "모양이 삭제 되었습니다. ",
        "shape_remove_ok_msg": "이(가) 삭제 되었습니다.",
        "sound_remove_fail": "소리 삭제 실패",
        "sound_remove_ok": "소리 삭제 완료",
        "sound_remove_ok_msg": "이(가) 삭제 되었습니다.",
        "will_you_delete_function": "함수는 한번 삭제하면 취소가 불가능 합니다.\n정말 삭제 하시겠습니까?",
        "check_runtime_error": "빨간색으로 표시된 블록을 확인해 주세요.",
        "Ellipse": "원",
        "hue": "색상",
        "red": "빨강(R)",
        "green": "녹색(G)",
        "blue": "파랑(B)",
        "saturation": "채도",
        "load_ai_utilize_train_block": "모델 학습",
        "load_ai_utilize_block": "인공지능 블록 불러오기",
        "load_expansion_block": "확장 블록 불러오기",
        "brightness": "명도",
        "font_textblock_strikethrough": "가로줄",
        "font_textblock_underline": "밑줄",
        "font_textblock_italic": "이탤릭",
        "font_textblock_bold": "볼드",
        "variable_create": "변수 만들기",
        "create_list_block": "리스트 만들기",
        "function_create": "함수 만들기",
        "blocks_comming_soon": "열심히 연구 중입니다.\n조금만 기다려 주세요!",
        "open_analizy_data_import": "테이블 불러오기",
        "Variable_Timer": "초시계",
        "add_object": "오브젝트 추가하기",
        "run": "시작하기",
        "stop": "정지하기",
        "tab_code": "블록",
        "tab_picture": "모양",
        "tab_text": "글상자",
        "tab_sound": "소리",
        "tab_attribute": "속성",
        "tab_table": "테이블",
        "my_storage": "나의 보관함",
        "cannot_edit_click_to_stop": "실행 중에는 수정할 수 없습니다.<br>클릭하여 정지하기.",
        "picture_add": "모양 추가하기",
        "add_object_before_edit": "모양 편집을 위해<br>오브젝트를 추가해주세요.",
        "align_left": "왼쪽 정렬",
        "align_center": "가운데 정렬",
        "align_right": "오른쪽 정렬",
        "bold": "굵게",
        "font_underline": "밑줄",
        "font_tilt": "기울임",
        "font_cancel": "취소선",
        "font_color": "글꼴 색상",
        "font_fill": "채우기 색상",
        "textbox_input": "글상자의 내용을 입력해주세요.",
        "sound_add": "소리 추가하기",
        "table_add": "테이블 추가하기",
        "save": "저장하기",
        "add_table_before_edit": "테이블을 추가해주세요.",
        "all": "전체",
        "variable": "변수",
        "message": "신호",
        "list": "리스트",
        "func": "함수",
        "variable_add": "변수 추가하기",
        "message_create": "신호 추가하기",
        "list_create": "리스트 추가하기",
        "function_add": "함수 추가하기",
        "Variable_placeholder_name": "변수 이름",
        "Variable_placeholder_content": "변수의 이름을 입력해주세요.",
        "use_all_objects": "모든 오브젝트에 사용",
        "variable_create_normal": "일반 변수로 사용\n(작품에 저장)",
        "variable_create_cloud": "공유 변수로 사용\n(서버에 저장)",
        "variable_create_real_time": "실시간 변수로 사용\n(서버에 저장)",
        "Variable_use_this_object": "이 오브젝트에서 사용",
        "list_name": "리스트 이름",
        "list_create_placeholder": "리스트의 이름을 입력해주세요.",
        "list_create_normal": "일반 리스트로 사용\n(작품에 저장)",
        "list_create_cloud": "공유 리스트로 사용 \n(서버에 저장)",
        "list_create_real_time": "실시간 리스트로 사용\n(서버에 저장)",
        "message_create_placeholder": "신호의 이름을 입력해주세요.",
        "playground_block_drop": "나의 보관함의 블록을\n조립소에 추가합니다.",
        "container_object_drop": "나의 보관함의 오브젝트를\n오브젝트 리스트에 추가합니다.",
        "my_storage_block_drop": "블록을\n나의 보관함에\n추가합니다.",
        "Size": "크기",
        "rotation": "방향(°)",
        "direction": "이동 방향(°)",
        "rotate_method": "회전방식",
        "show_variable": "변수 노출",
        "select_library": "오브젝트 선택",
        "upload": "파일 올리기",
        "draw_new": "새로 그리기",
        "textbox": "글상자",
        "people": "일반 사람들",
        "animal": "동물",
        "plant": "식물",
        "fantasy": "판타지/기타",
        "interface": "인터페이스",
        "new_picture": "새그림",
        "painter_file_save": "저장하기",
        "painter_file_saveas": "새 모양으로 저장",
        "paste_picture": "붙이기",
        "cut_picture": "자르기",
        "remove_all": "모두 지우기",
        "font_family": "글꼴",
        "picture_size": "크기",
        "picture_rotation": "회전",
        "select_picture": "모양 선택",
        "pause": "일시정지",
        "select_all": "모두",
        "upload_addfile": "파일 올리기",
        "speed": "속도 조절",
        "restart": "다시시작",
        "select_sound": "소리 선택",
        "things": "물건",
        "cannot_open_private_project": "비공개 작품은 불러올 수 없습니다. 홈으로 이동합니다.",
        "project": "작품",
        "Variable_used_at_all_objects": "모든 오브젝트에서 사용되는 변수",
        "Variable_used_at_special_object": "특정 오브젝트에서만 사용되는 변수",
        "Variable_property": "변수 속성",
        "default_value": "기본값 ",
        "variable_default_value": "변수 기본값",
        "list_default_value": "리스트 기본값",
        "slide": "슬라이드",
        "min_value": "최솟값",
        "max_value": "최댓값",
        "Variable_used_objects": "사용된 오브젝트",
        "no_use": "사용되지 않음",
        "List_used_all_objects": "모든 오브젝트에서 사용되는 리스트",
        "list_used_specific_objects": "특정 오브젝트에서만 사용되는 리스트",
        "list_property": "리스트 속성",
        "list_export": "리스트 내보내기",
        "list_import": "리스트 불러오기",
        "number_of_list": "리스트 항목 수",
        "List_used_objects": "사용된 오브젝트",
        "empty_of_list": "추가된 항목이 없습니다",
        "object_not_exist_error": "오브젝트가 존재하지 않습니다. 오브젝트를 추가한 후 시도해주세요.",
        "variable_rename": "변수 이름을 변경합니다. ",
        "variable_rename_ok": "변수의 이름이 성공적으로 변경 되었습니다.",
        "Message_placeholder_name": "신호 이름",
        "add_object_alert": "경고",
        "add_object_alert_msg": "오브젝트를 추가해주세요",
        "Scene_delete_error": "장면은 최소 하나 이상 존재해야 합니다.",
        "upload_fail_msg": "업로드에 실패하였습니다. \n 다시 한번 시도해주세요.",
        "select_table": "테이블 선택",
        "draw_new_table": "새로 만들기",
        "data_table": "테이블",
        "upload_not_supported_file_msg": "업로드 할 수 없는 파일 형식입니다.",
        "duplicate_scene": "복제하기",
        "cloned_scene": "복제본_",
        "context_duplicate": "복제",
        "context_remove": "삭제",
        "copy_file": "복사하기",
        "context_rename": "이름 수정",
        "context_download": "PC에 저장",
        "upload_error_msg": "이용 정책을 위반하는 이미지로 의심되어\n업로드 할 수 없습니다.\n문제가 없다고 생각하시는 경우\n'문의하기'를 통해 이미지를 전달해 주세요."
    },
    "Painter": {
        "Pan": "이동",
        "Ellipse": "원",
        "Eraser": "지우기",
        "Fill": "채우기",
        "Text": "글상자",
        "Rectangle": "사각형",
        "Line": "직선",
        "Pencil": "펜",
        "Path": "형태",
        "front": "맨 앞으로",
        "font_color": "글꼴 색상",
        "font_fill": "채우기 색상",
        "font_size": "글꼴 크기",
        "new_picture": "새그림",
        "painter_file_save": "저장하기",
        "painter_file_saveas": "새 모양으로 저장",
        "picture_import": "모양 가져오기",
        "bitmap": "비트맵",
        "vector": "벡터",
        "copy_picture": "복사",
        "paste_picture": "붙여넣기",
        "cut_picture": "자르기",
        "delete_picture": "삭제",
        "remove_all": "모두 삭제",
        "group": "그룹화",
        "ungroup": "그룹 해제",
        "forward": "앞으로",
        "backward": "뒤로",
        "back": "맨 뒤로",
        "font": "글꼴",
        "outline_thickness": "윤곽선 굵기",
        "outline_color": "윤곽선 색상",
        "font_family": "글꼴 스타일",
        "picture_size": "크기",
        "picture_rotation": "회전",
        "inversion": "반전",
        "thickness_of_eraser": "지우개 굵기",
        "Select": "선택",
        "edit_way": "편집 방법",
        "line": "직선",
        "vertex": "꼭지점"
    },
    "Blocks": {
        "copy_paste_comment": "메모 복사 & 붙여넣기",
        "copy_comment": "메모 복사하기",
        "delete_comment": "메모 삭제하기",
        "fold_comment": "메모 접기",
        "open_comment": "메모 열기",
        "separate_comment": "메모 분리하기",
        "video_pose_model": "사람 모델",
        "video_face_model": "얼굴 모델",
        "video_object_model": "사물 모델",
        "ALBERT_sensor_acceleration_x": "x축 가속도",
        "ALBERT_sensor_acceleration_y": "y축 가속도",
        "ALBERT_sensor_acceleration_z": "z축 가속도",
        "ALBERT_sensor_front_oid": "앞쪽 OID",
        "ALBERT_sensor_back_oid": "뒤쪽 OID",
        "ALBERT_sensor_position_x": "x 위치",
        "ALBERT_sensor_position_y": "y 위치",
        "ALBERT_sensor_orientation": "방향",
        "ALBERT_sensor_temperature": "온도",
        "ALBERT_sensor_signal_strength": "신호 세기",
        "ALBERT_sensor_left_proximity": "왼쪽 근접 센서",
        "ALBERT_sensor_right_proximity": "오른쪽 근접 센서",
        "ALBERT_sensor_light": "밝기",
        "chocopi_port": "포트",
        "coconut_sensor_temperature": "온도",
        "coconut_sensor_acceleration_x": "x축 가속도",
        "coconut_sensor_acceleration_y": "y축 가속도",
        "coconut_sensor_acceleration_z": "z축 가속도",
        "coconut_sensor_left_proximity": "왼쪽 전방 센서",
        "coconut_sensor_right_proximity": "오른쪽 전방 센서",
        "coconut_sensor_left_floor": "왼쪽 바닥센서",
        "coconut_sensor_right_floor": "오른쪽 바닥 센서",
        "coconut_sensor_light": "밝기",
        "HAMSTER_sensor_temperature": "온도",
        "HAMSTER_sensor_input_a": "입력 A",
        "HAMSTER_sensor_input_b": "입력 B",
        "HAMSTER_sensor_acceleration_x": "x축 가속도",
        "HAMSTER_sensor_acceleration_y": "y축 가속도",
        "HAMSTER_sensor_acceleration_z": "z축 가속도",
        "HAMSTER_sensor_left_proximity": "왼쪽 근접 센서",
        "HAMSTER_sensor_right_proximity": "오른쪽 근접 센서",
        "HAMSTER_sensor_left_floor": "왼쪽 바닥 센서",
        "HAMSTER_sensor_right_floor": "오른쪽 바닥 센서",
        "HAMSTER_sensor_light": "밝기",
        "jdkit_joystick_leftleftright": "왼쪽 좌우",
        "jdkit_joystick_lefttopbottom": "왼쪽 상하",
        "jdkit_joystick_rightleftright": "오른쪽 좌우",
        "jdkit_joystick_righttopbottom": "오른쪽 상하",
        "ROBOID_color_number": "색깔 번호",
        "ROBOID_floor": "바닥 센서",
        "ROBOID_button": "버튼",
        "ROBOID_acceleration_x": "x축 가속도",
        "ROBOID_acceleration_y": "y축 가속도",
        "ROBOID_acceleration_z": "z축 가속도",
        "location_entire": "전체",
        "location_seoul": "서울",
        "location_seoul_jongno_gu": "종로구",
        "location_seoul_jung_gu": "중구",
        "location_seoul_yongsan_gu": "용산구",
        "location_seoul_seongdong_gu": "성동구",
        "location_seoul_gwangjin_gu": "광진구",
        "location_seoul_dongdaemun_gu": "동대문구",
        "location_seoul_jungnang_gu": "중랑구",
        "location_seoul_seongbuk_gu": "성북구",
        "location_seoul_gangbuk_gu": "강북구",
        "location_seoul_dobong_gu": "도봉구",
        "location_seoul_nowon_gu": "노원구",
        "location_seoul_eunpyeong_gu": "은평구",
        "location_seoul_seodaemun_gu": "서대문구",
        "location_seoul_mapo_gu": "마포구",
        "location_seoul_yangcheon_gu": "양천구",
        "location_seoul_gangseo_gu": "강서구",
        "location_seoul_guro_gu": "구로구",
        "location_seoul_geumcheon_gu": "금천구",
        "location_seoul_yeongdeungpo_gu": "영등포구",
        "location_seoul_dongjak_gu": "동작구",
        "location_seoul_gwanak_gu": "관악구",
        "location_seoul_seocho_gu": "서초구",
        "location_seoul_gangnam_gu": "강남구",
        "location_seoul_songpa_gu": "송파구",
        "location_seoul_gangdong_gu": "강동구",
        "location_gangwon": "강원",
        "location_gangwon_chuncheon": "춘천시",
        "location_gangwon_wonju": "원주시",
        "location_gangwon_gangneung_si": "강릉시",
        "location_gangwon_donghae": "동해시",
        "location_gangwon_taebaek_si": "태백시",
        "location_gangwon_sokcho": "속초시",
        "location_gangwon_samcheok_si": "삼척시",
        "location_gangwon_hongcheon": "홍천군",
        "location_gangwon_hoengseong_gun": "횡성군",
        "location_gangwon_yeongwol_gun": "영월군",
        "location_gangwon_pyeongchang": "평창군",
        "location_gangwon_jeongseon": "정선군",
        "location_gangwon_cheolwon": "철원군",
        "location_gangwon_hwacheon": "화천군",
        "location_gangwon_yanggu": "양구군",
        "location_gangwon_inje": "인제군",
        "location_gangwon_goseong": "고성군",
        "location_gangwon_yangyang": "양양군",
        "location_gyeonggi": "경기",
        "location_gyeonggi_suwon_si": "수원시",
        "location_gyeonggi_seongnam": "성남시",
        "location_gyeonggi_uijeongbu": "의정부시",
        "location_gyeonggi_anyang_si": "안양시",
        "location_gyeonggi_bucheon_si": "부천시",
        "location_gyeonggi_gwangmyeong_si": "광명시",
        "location_gyeonggi_pyeongtaek_si": "평택시",
        "location_gyeonggi_dongducheon_si": "동두천시",
        "location_gyeonggi_ansan_si": "안산시",
        "location_gyeonggi_goyang_si": "고양시",
        "location_gyeonggi_gwacheon_si": "과천시",
        "location_gyeonggi_guri": "구리시",
        "location_gyeonggi_namyangju_si": "남양주시",
        "location_gyeonggi_osan": "오산시",
        "location_jeollanam_goheung": "고흥군",
        "location_gyeonggi_siheung": "시흥시",
        "location_jeollanam_boseong": "보성군",
        "location_jeollanam_hwasun": "화순군",
        "location_gyeonggi_gunpo_si": "군포시",
        "location_jeollanam_jangheung": "장흥군",
        "location_gyeonggi_uiwang_si": "의왕시",
        "location_jeollanam_gangjin": "강진군",
        "location_gyeonggi_hanam": "하남시",
        "location_jeollanam_haenam": "해남군",
        "location_gyeonggi_yongin_si": "용인시",
        "location_jeollanam_yeongam": "영암군",
        "location_gyeonggi_paju": "파주시",
        "location_jeollanam_jindo": "무안군",
        "location_gyeonggi_icheon": "이천시",
        "location_jeollanam_muan": "함평군",
        "location_jeollanam_hampyeong": "영광군",
        "location_gyeonggi_anseong_si": "안성시",
        "location_jeollanam_yeonggwang": "장성군",
        "location_gyeonggi_gimpo": "김포시",
        "location_jeollanam_jangseong": "완도군",
        "location_gyeonggi_hwaseong_si": "화성시",
        "location_jeollanam_wando": "진도군",
        "location_gyeonggi_gwangju": "광주시",
        "location_jeollanam_sinan": "신안군",
        "location_jeollabuk": "전북",
        "location_gyeonggi_yangju_si": "양주시",
        "location_jeollabuk_jeonju": "전주시",
        "location_gyeonggi_pocheon": "포천시",
        "location_jeollabuk_gunsan_si": "군산시",
        "location_gyeonggi_yeoju": "여주시",
        "location_jeollabuk_iksan": "익산시",
        "location_gyeonggi_yeoncheon_gun": "연천군",
        "location_gyeonggi_gapyeong_gun": "가평군",
        "location_jeollabuk_jeongeup": "정읍시",
        "location_gyeonggi_yangpyeong": "양평군",
        "location_jeollabuk_namwon": "남원시",
        "location_gyeongsangnam": "경남",
        "location_jeollabuk_gimje_si": "김제시",
        "location_gyeongsangnam_changwon_si": "창원시",
        "location_jeollabuk_wanju": "완주군",
        "location_gyeongsangnam_jinju": "진주시",
        "location_jeollabuk_jinan": "진안군",
        "location_gyeongsangnam_tongyeong_si": "통영시",
        "location_jeollabuk_muju": "무주군",
        "location_gyeongsangnam_sacheon_si": "사천시",
        "location_jeollabuk_jangsu": "장수군",
        "location_gyeongsangnam_gimhae_si": "김해시",
        "location_jeollabuk_imsil": "임실군",
        "location_gyeongsangnam_miryang_si": "밀양시",
        "location_jeollabuk_sunchang": "순창군",
        "location_gyeongsangnam_geoje_si": "거제시",
        "location_jeollabuk_gochang": "고창군",
        "location_gyeongsangnam_yangsan_si": "양산시",
        "location_jeollabuk_buan": "부안군",
        "location_gyeongsangnam_uiryeong": "의령군",
        "location_jeju": "제주",
        "location_gyeongsangnam_haman": "함안군",
        "location_jeju_jeju_si": "제주시",
        "location_gyeongsangnam_changnyeong": "창녕군",
        "location_jeju_seogwipo": "서귀포시",
        "location_gyeongsangnam_goseong": "고성군",
        "location_gyeongsangnam_namhae": "남해군",
        "location_chungcheongnam": "충남",
        "location_gyeongsangnam_hadong": "하동군",
        "location_chungcheongnam_cheonan": "천안시",
        "location_gyeongsangnam_sancheong": "산청군",
        "location_chungcheongnam_gongju": "공주시",
        "location_gyeongsangnam_hamyang": "함양군",
        "location_gyeongsangnam_geochang": "거창군",
        "location_chungcheongnam_boryeong": "보령시",
        "location_gyeongsangnam_hapcheon": "합천군",
        "location_chungcheongnam_asan": "아산시",
        "location_gyeongsangbuk": "경북",
        "location_chungcheongnam_seosan": "서산시",
        "location_gyeongsangbuk_pohang_si": "포항시",
        "location_gyeongsangbuk_gyeongju_si": "경주시",
        "location_chungcheongnam_nonsan": "논산시",
        "location_gyeongsangbuk_gimcheon_si": "김천시",
        "location_chungcheongnam_gyeryong": "계룡시",
        "location_gyeongsangbuk_andong_si": "안동시",
        "location_chungcheongnam_dangjin": "당진시",
        "location_gyeongsangbuk_gumi_si": "구미시",
        "location_gyeongsangbuk_yeongju_si": "영주시",
        "location_chungcheongnam_geumsan": "금산군",
        "location_chungcheongnam_buyeo": "부여군",
        "location_gyeongsangbuk_yeongcheon_si": "영천시",
        "location_chungcheongnam_seocheon": "서천군",
        "location_gyeongsangbuk_sangju_si": "상주시",
        "location_chungcheongnam_cheongyang": "청양군",
        "location_gyeongsangbuk_mungyeong_si": "문경시",
        "location_gyeongsangbuk_gyeongsan_si": "경산시",
        "location_chungcheongnam_hongseong": "홍성군",
        "location_gyeongsangbuk_gunwi": "군위군",
        "location_chungcheongnam_yesan": "예산군",
        "location_gyeongsangbuk_uiseong": "의성군",
        "location_chungcheongnam_taean": "태안군",
        "location_gyeongsangbuk_cheongsong": "청송군",
        "location_chungcheongbuk": "충북",
        "location_gyeongsangbuk_goryong": "영양군",
        "location_chungcheongbuk_cheongju": "청주시",
        "location_gyeongsangbuk_yeongdeok": "영덕군",
        "location_gyeongsangbuk_cheongdo": "청도군",
        "location_chungcheongbuk_chungju": "충주시",
        "location_gyeongsangbuk_golyeong": "고령군",
        "location_chungcheongbuk_jecheon": "제천시",
        "location_gyeongsangbuk_seongju": "성주군",
        "location_chungcheongbuk_boeun": "보은군",
        "location_gyeongsangbuk_chilgok": "칠곡군",
        "location_chungcheongbuk_okcheon": "옥천군",
        "location_gyeongsangbuk_yecheon": "예천군",
        "location_chungcheongbuk_yeongdong": "영동군",
        "location_gyeongsangbuk_bonghwa": "봉화군",
        "location_chungcheongbuk_jeungpyeong": "증평군",
        "location_gyeongsangbuk_uljin": "울진군",
        "location_chungcheongbuk_jincheon": "진천군",
        "location_gyeongsangbuk_ulleung": "울릉군",
        "location_chungcheongbuk_goesan": "괴산군",
        "location_gwangju": "광주",
        "location_chungcheongbuk_eumseong": "음성군",
        "location_gwangju_dong_gu": "동구",
        "location_chungcheongbuk_danyang": "단양군",
        "location_gwangju_seo_gu": "서구",
        "location_gwangju_nam_gu": "남구",
        "location_gwangju_buk_gu": "북구",
        "location_gwangju_gwangsan_gu": "광산구",
        "location_daegu": "대구",
        "location_daegu_jung_gu": "중구",
        "location_daegu_dong_gu": "동구",
        "location_daegu_seo_gu": "서구",
        "location_daegu_nam_gu": "남구",
        "location_daegu_buk_gu": "북구",
        "location_daegu_suseong_gu": "수성구",
        "location_daegu_dalseo_gu": "달서구",
        "location_daegu_dalseong": "달성군",
        "location_daejeon": "대전",
        "location_daejeon_dong_gu": "동구",
        "location_daejeon_jung_gu": "중구",
        "location_daejeon_seo_gu": "서구",
        "location_daejeon_yuseong_gu": "유성구",
        "location_daejeon_daedeok_gu": "대덕구",
        "learn_popup_title": "데이터 입력",
        "arduino_noti_text": "모바일 기기는 추후 지원 합니다.",
        "location_busan": "부산",
        "location_busan_jung_gu": "중구",
        "ARDUINO_download_connector": "• 연결 프로그램 다운로드",
        "location_busan_seo_gu": "서구",
        "download_guide": "• 연결 안내 다운로드",
        "location_busan_dong_gu": "동구",
        "ARDUINO_download_source": "• 엔트리 아두이노 소스",
        "location_busan_yeongdo_gu": "영도구",
        "ARDUINO_connected": "하드웨어가 연결되었습니다. ",
        "location_busan_busanjin_gu": "부산진구",
        "ARDUINO_connect": "* 하드웨어를 연결하세요.",
        "location_busan_dongnae_gu": "동래구",
        "ARDUINO_reconnect": "하드웨어 연결하기",
        "location_busan_nam_gu": "남구",
        "ROBOT_reconnect": "로봇 연결하기",
        "location_busan_buk_gu": "북구",
        "ARDUINO_open_connector": "연결 프로그램 열기",
        "location_busan_haeundae_gu": "해운대구",
        "ARDUINO_cloud_pc_connector": "클라우드 PC 연결하기",
        "location_busan_saha_gu": "사하구",
        "location_busan_geumjeong_gu": "금정구",
        "location_busan_gangseo_gu": "강서구",
        "CALC_get_x_coordinate": "X 좌푯값",
        "location_busan_yeonje": "연제구",
        "CALC_get_y_coordinate": "Y 좌푯값",
        "location_busan_suyeong_gu": "수영구",
        "CALC_get_angle": "각도값",
        "location_busan_sasang_gu": "사상구",
        "CALC_rotation_value": "방향값",
        "location_busan_gijang": "기장군",
        "CALC_direction_value": "이동 방향값",
        "location_sejong": "세종",
        "CALC_calc_mod_3": "의 나머지",
        "location_ulsan": "울산",
        "CALC_timer_visible_1": "초시계",
        "location_ulsan_jung_gu": "중구",
        "CALC_timer_visible_show": "보이기",
        "location_ulsan_nam_gu": "남구",
        "CALC_timer_visible_hide": "숨기기",
        "location_ulsan_dong_gu": "동구",
        "CALC_timer_visible_2": "",
        "location_ulsan_buk_gu": "북구",
        "FUNCTION_explanation_1": "이름",
        "location_ulsan_ulju": "울주군",
        "location_incheon": "인천",
        "location_incheon_jung_gu": "중구",
        "location_incheon_dong_gu": "동구",
        "location_incheon_nam_gu": "남구",
        "location_incheon_yeonsu_gu": "연수구",
        "FUNC": "함수",
        "location_incheon_namdong_gu": "남동구",
        "location_incheon_bupyeong_gu": "부평구",
        "color": "색깔",
        "location_incheon_gyeyang_gu": "계양구",
        "brightness": "밝기",
        "location_incheon_seo_gu": "서구",
        "location_incheon_ganghwa": "강화군",
        "opacity": "불투명도",
        "location_incheon_ongjin_gun": "옹진군",
        "location_jeollanam": "전남",
        "transparency": "투명도",
        "location_jeollanam_mokpo": "목포시",
        "location_jeollanam_yosu": "여수시",
        "location_jeollanam_suncheon_si": "순천시",
        "JUDGEMENT_boolean_and": "그리고",
        "location_jeollanam_naju": "나주시",
        "JUDGEMENT_boolean_or": "또는",
        "location_jeollanam_gwangyang_si": "광양시",
        "JUDGEMENT_true": " 참 ",
        "location_jeollanam_damyang": "담양군",
        "JUDGEMENT_false": " 거짓 ",
        "location_jeollanam_gokseong": "곡성군",
        "location_jeollanam_gurye": "구례군",
        "wall": "벽",
        "START_press_some_key_up": "위쪽 화살표",
        "START_press_some_key_down": "아래쪽 화살표",
        "START_press_some_key_right": "오른쪽 화살표",
        "START_press_some_key_left": "왼쪽 화살표",
        "START_press_some_key_space": "스페이스",
        "START_press_some_key_enter": "엔터",
        "SCENE_start_scene_next": "다음",
        "SCENE_start_scene_pre": "이전",
        "FLOW_repeat_while_true_until": "이 될 때까지",
        "FLOW_repeat_while_true_while": "인 동안",
        "FLOW_stop_object_all": "모든",
        "FLOW_stop_object_this_object": "자신의",
        "FLOW_stop_object_this_thread": "이",
        "FLOW_stop_object_other_thread": "자신의 다른",
        "FLOW_stop_object_other_objects": "다른 오브젝트의",
        "speak": "말하기",
        "think": "생각하기",
        "block_hi": "안녕!",
        "LOOKS_change_shape_next": "다음",
        "LOOKS_change_shape_prev": "이전",
        "LOOKS_change_object_index_sub_1": "맨 앞으로",
        "LOOKS_change_object_index_sub_2": "앞으로",
        "LOOKS_change_object_index_sub_3": "뒤로",
        "LOOKS_change_object_index_sub_4": "맨 뒤로",
        "entry": "엔트리",
        "JUDGEMENT_is_clicked": "마우스를 클릭했는가?",
        "JUDGEMENT_is_press_some_key_2": "키가 눌러져 있는가?",
        "JUDGEMENT_reach_something_1": "",
        "JUDGEMENT_reach_something_2": "에 닿았는가?",
        "JUDGEMENT_is_boost_mode": "부스트모드가 켜져 있는가?",
        "JUDGEMENT_boolean_not_1": "",
        "JUDGEMENT_boolean_not_2": "(이)가 아니다",
        "CALC_calc_rand_1": "",
        "CALC_calc_rand_2": "부터",
        "CALC_calc_rand_3": "사이의 무작위 수",
        "CALC_coordinate_mouse_1": "마우스",
        "CALC_coordinate_mouse_2": "좌표",
        "CALC_coordinate_object_1": "",
        "CALC_coordinate_object_2": "의",
        "CALC_coordinate_x_value": "x 좌푯값",
        "CALC_coordinate_y_value": "y 좌푯값",
        "CALC_coordinate_rotation_value": "방향",
        "CALC_coordinate_direction_value": "이동방향",
        "CALC_coordinate_size_value": "크기",
        "CALC_picture_index": "모양 번호",
        "CALC_picture_name": "모양 이름",
        "CALC_get_sound_volume": " 소릿값",
        "CALC_quotient_and_mod_1": "",
        "CALC_quotient_and_mod_2": "/",
        "CALC_quotient_and_mod_3": "의",
        "CALC_quotient_and_mod_sub_1": "몫",
        "CALC_quotient_and_mod_sub_2": "나머지",
        "CALC_calc_operation_of_1": "",
        "CALC_calc_operation_of_2": "의",
        "CALC_calc_operation_square": "제곱",
        "CALC_calc_operation_root": "루트",
        "CALC_calc_operation_sin": "사인값",
        "CALC_calc_operation_cos": "코사인값",
        "CALC_calc_operation_tan": "탄젠트값",
        "CALC_calc_operation_asin": "아크사인값",
        "CALC_calc_operation_acos": "아크코사인값",
        "CALC_calc_operation_atan": "아크탄젠트값",
        "CALC_calc_operation_log": "로그값",
        "CALC_calc_operation_ln": "자연로그값",
        "CALC_calc_operation_unnatural": "소수점 부분",
        "CALC_calc_operation_floor": "소수점 버림값",
        "CALC_calc_operation_ceil": "소수점 올림값",
        "CALC_calc_operation_round": "소수점 반올림값",
        "CALC_calc_operation_factorial": "펙토리얼값",
        "CALC_calc_operation_abs": "절댓값",
        "CALC_get_timer_value": " 초시계 값",
        "CALC_choose_project_timer_action_1": "초시계",
        "CALC_choose_project_timer_action_sub_1": "시작하기",
        "CALC_choose_project_timer_action_sub_2": "정지하기",
        "CALC_choose_project_timer_action_sub_3": "초기화하기",
        "CALC_choose_project_timer_action_2": "",
        "CALC_get_date_1": " 현재",
        "CALC_get_date_year": "연도",
        "CALC_get_date_month": "월",
        "CALC_get_date_day": "일",
        "CALC_get_date_hour": "시각(시)",
        "CALC_get_date_minute": "시각(분)",
        "CALC_get_date_second": "시각(초)",
        "CALC_get_date_2": "",
        "CALC_distance_something_1": "",
        "CALC_distance_something_2": "까지의 거리",
        "CALC_get_sound_duration_1": "",
        "CALC_get_sound_duration_2": "소리의 길이",
        "CALC_length_of_string_1": "",
        "CALC_length_of_string_2": "의 글자 수",
        "VARIABLE_combine_something_1": "",
        "VARIABLE_combine_something_2": "과(와)",
        "VARIABLE_combine_something_3": "를 합치기",
        "CALC_char_at_1": "",
        "CALC_char_at_2": "의",
        "CALC_char_at_3": "번째 글자",
        "hi_entry": "안녕 엔트리!",
        "CALC_substring_1": "",
        "CALC_substring_2": "의",
        "CALC_substring_3": "번째 글자부터",
        "CALC_substring_4": "번째 글자까지의 글자",
        "CALC_index_of_string_1": "",
        "CALC_index_of_string_2": "에서",
        "CALC_index_of_string_3": "의 시작 위치",
        "CALC_replace_string_1": "",
        "CALC_replace_string_2": "의",
        "CALC_replace_string_3": "을(를)",
        "CALC_replace_string_4": "로 바꾸기",
        "hello": "안녕",
        "nice": "반가워",
        "CALC_change_string_case_1": "",
        "CALC_change_string_case_2": "의",
        "CALC_change_string_case_sub_1": "대문자",
        "CALC_change_string_case_sub_2": "소문자",
        "CALC_change_string_case_3": " ",
        "VARIABLE_get_canvas_input_value": " 대답 ",
        "VARIABLE_get_variable_1": "값",
        "VARIABLE_value_of_index_from_list_1": "",
        "VARIABLE_value_of_index_from_list_2": "의",
        "VARIABLE_value_of_index_from_list_3": "번째 항목",
        "VARIABLE_length_of_list_1": "",
        "VARIABLE_length_of_list_2": " 항목 수",
        "VARIABLE_is_included_in_list_1": "",
        "VARIABLE_is_included_in_list_2": "에",
        "VARIABLE_is_included_in_list_3": "이 포함되어 있는가?",
        "table_row": "행",
        "table_col": "열",
        "table_sum": "합",
        "table_max": "최대",
        "table_min": "최소",
        "table_avg": "평균",
        "table_stdev": "표준편차",
        "date_yesterday": "어제",
        "date_today": "오늘",
        "date_tomorrow": "내일",
        "date_after_2_days": "모레",
        "date_after_3_days": "3일 후",
        "date_after_4_days": "4일 후",
        "date_after_5_days": "5일 후",
        "date_after_6_days": "6일 후",
        "tts_kind": "친절한",
        "tts_sweet": "감미로운",
        "tts_echo": "울리는",
        "tts_mischievous": "장난스러운",
        "tts_dainty": "앙증맞은",
        "tts_veryslow": "매우 느린",
        "tts_slow": "느린",
        "tts_normal": "보통",
        "tts_fast": "빠른",
        "tts_veryfast": "매우 빠른",
        "tts_verylow": "매우 낮은",
        "tts_low": "낮은",
        "tts_high": "높은",
        "tts_veryhigh": "매우 높은",
        "korean": "한국어",
        "english": "영어",
        "japan": "일본어",
        "chinese_simplified": "중국어간체",
        "chinese_traditional": "중국어번체",
        "spanish": "스페인어",
        "french": "프랑스어",
        "german": "독일어",
        "russian": "러시아어",
        "portuguese": "포르투갈어",
        "thai": "태국어",
        "vietnamese": "베트남",
        "indonesian": "인도네시아어",
        "hindi": "힌디어",
        "AI_UTILIZE": "인공지능",
        "video_show_video": "보이기",
        "video_hide_video": "숨기기",
        "video_brightness": "밝기",
        "video_transparency": "투명도",
        "video_left_right": "좌우",
        "video_top_bottom": "상하",
        "video_human": "사람",
        "video_face": "얼굴",
        "video_object": "사물",
        "video_start": "시작하기",
        "video_end": "중지하기",
        "video_gender": "성별",
        "video_age": "나이",
        "video_emotion": "감정",
        "video_motion_onself": "자신",
        "video_motion_onscreen": "실행화면",
        "video_motion_scale": "움직임",
        "video_motion_direction_horizontal": "좌우방향",
        "video_motion_direction_vertical": "상하방향",
        "ALTINO_Steering_Angle_Left10": "왼쪽으로-10",
        "ALTINO_Steering_Angle_Left15": "왼쪽으로-15",
        "ALTINO_Steering_Angle_Left20": "왼쪽으로-20",
        "ALTINO_Steering_Angle_Right5": "오른쪽으로-5",
        "ALTINO_Steering_Angle_Right10": "오른쪽으로-10",
        "ALTINO_Steering_Angle_Right15": "오른쪽으로-15",
        "XBOT_D2_digitalInput": "D2 디지털 입력",
        "XBOT_D3_digitalInput": "D3 디지털 입력",
        "XBOT_D11_digitalInput": "D11 디지털 입력",
        "XBOT_CDS": "광 센서 값",
        "XBOT_MIC": "마이크 센서 값",
        "XBOT_analog0": "아날로그 0번 핀 값",
        "ALTINO_Steering_Angle_Right20": "오른쪽으로-20",
        "XBOT_analog1": "아날로그 1번 핀 값",
        "XBOT_analog2": "아날로그 2번 핀 값",
        "XBOT_analog3": "아날로그 3번 핀 값",
        "XBOT_High": "높음",
        "XBOT_Low": "낮음",
        "ALTINO_h": "끄기",
        "XBOT_Head": "머리(D8)",
        "ALTINO_c": "C(도)",
        "XBOT_ArmR": "오른 팔(D9)",
        "XBOT_ArmL": "왼 팔(D10)",
        "XBOT_rightWheel": "오른쪽",
        "ALTINO_c2": "C#(도#)",
        "ALTINO_d": "D(레)",
        "ALTINO_d2": "D#(레#)",
        "ALTINO_e": "E(미)",
        "EXPANSION_WEATHER_sunny": "맑음",
        "ALTINO_f": "F(파)",
        "XBOT_leftWheel": "왼쪽",
        "ALTINO_f2": "F#(파#)",
        "XBOT_bothWheel": "양쪽",
        "XBOT_c": "도",
        "XBOT_d": "레",
        "XBOT_e": "미",
        "XBOT_f": "파",
        "XBOT_g": "솔",
        "XBOT_a": "라",
        "XBOT_b": "시",
        "EXPANSION_WEATHER_partly_cloudy": "구름조금",
        "EXPANSION_WEATHER_mostly_cloudy": "구름많음",
        "EXPANSION_WEATHER_cloudy": "흐림",
        "ALTINO_g": "G(솔)",
        "EXPANSION_WEATHER_rainy": "비",
        "EXPANSION_WEATHER_sleet": "진눈깨비",
        "EXPANSION_WEATHER_snowy": "눈",
        "ALTINO_g2": "G#(솔#)",
        "EXPANSION_WEATHER_finedust_good": "좋음",
        "ALTINO_a": "A(라)",
        "EXPANSION_WEATHER_finedust_normal": "보통",
        "ALTINO_a2": "A#(라#)",
        "EXPANSION_WEATHER_finedust_bad": "나쁨",
        "ALTINO_b": "B(시)",
        "EXPANSION_WEATHER_finedust_very_bad": "매우나쁨",
        "ALTINO_Led_Forward_Light": "전방",
        "EXPANSION_WEATHER_lowest_temperature": "최저기온(℃)",
        "ALTINO_Led_Turn_Left_Light": "왼쪽 방향지시",
        "EXPANSION_WEATHER_highest_temperature": "최고기온(℃)",
        "ALTINO_Led_Turn_Right_Light": "오른쪽 방향지시",
        "EXPANSION_WEATHER_humidity": "습도(%)",
        "ALTINO_Led_Brake_Light": "브레이크",
        "EXPANSION_WEATHER_precipitation": "강수량(mm)",
        "ALTINO_Led_Reverse_Light": "후진",
        "EXPANSION_WEATHER_precipitation_probability": "강수확률(%)",
        "ALTINO_h2": "켜기",
        "EXPANSION_WEATHER_wind_speed": "풍속(m/s)",
        "EXPANSION_WEATHER_temperature": "기온(℃)",
        "EXPANSION_WEATHER_finedust": "미세먼지농도(㎍)",
        "ardublock_motor_forward": "앞",
        "ardublock_motor_backward": "뒤",
        "ARDUINO_on": "켜기",
        "ARDUINO_off": "끄기",
        "EXPANSION_FESTIVAL_title": "제목",
        "EXPANSION_FESTIVAL_area": "지역",
        "EXPANSION_FESTIVAL_start_date": "시작일",
        "EXPANSION_FESTIVAL_end_date": "종료일",
        "EXPANSION_FESTIVAL_address": "주소",
        "EXPANSION_FESTIVAL_overview": "개요",
        "EXPANSION_FESTIVAL_homepage": "홈페이지",
        "behaviorConduct01001": "태풍",
        "behaviorConduct01002": "홍수",
        "behaviorConduct01003": "호우",
        "behaviorConduct01004": "강풍",
        "behaviorConduct01005": "대설",
        "behaviorConduct01006": "한파",
        "behaviorConduct01007": "풍랑",
        "behaviorConduct01008": "황사",
        "behaviorConduct01009": "폭염",
        "behaviorConduct01010": "가뭄",
        "behaviorConduct01011": "지진",
        "behaviorConduct01013": "해일",
        "behaviorConduct01014": "산사태",
        "behaviorConduct03002": "응급처치",
        "behaviorConduct03003": "심폐소생술",
        "behaviorConduct03004": "소화기사용법",
        "behaviorConduct03016": "소화전사용법",
        "ROBOID_head": "앞쪽",
        "behaviorConduct03005": "식중독",
        "behaviorConduct03006": "산행안전",
        "behaviorConduct03008": "실종유괴",
        "behaviorConduct03009": "성폭력",
        "behaviorConduct03010": "학교 폭력",
        "behaviorConduct03011": "가정 폭력",
        "behaviorConduct03012": "억류 및 납치",
        "behaviorConduct03013": "교통사고",
        "behaviorConduct03014": "승강기 안전사고",
        "behaviorConduct03015": "미세먼지",
        "tts_female": "여성",
        "tts_male": "남성",
        "ROBOID_tail": "뒤쪽",
        "SCENE": "장면",
        "entry_bot_name": "엔트리봇",
        "doggi_bark": "강아지 짖는 소리",
        "walking_entryBot": "엔트리봇_걷기",
        "silent": "무음",
        "do_name": "도",
        "do_sharp_name": "도#(레♭)",
        "re_name": "레",
        "re_sharp_name": "레#(미♭)",
        "BITBRICK_dc_direction_cw": "시계",
        "BITBRICK_dc_direction_ccw": "반시계",
        "blacksmith_toggle_on": "켜기",
        "blacksmith_toggle_off": "끄기",
        "blacksmith_lcd_first_line": "첫 번째",
        "show_all_comment": "모든 메모 보이기",
        "blacksmith_lcd_seconds_line": "두 번째",
        "mi_name": "미",
        "fa_name": "파",
        "fa_sharp_name": "파#(솔♭)",
        "sol_name": "솔",
        "sol_sharp_name": "솔#(라♭)",
        "la_name": "라",
        "la_sharp_name": "라#(시♭)",
        "si_name": "시",
        "ROBOID_color_black": "검은색",
        "ROBOID_clicked": "클릭했는가",
        "ROBOID_double_clicked": "더블클릭했는가",
        "ROBOID_long_pressed": "오래 눌렀는가",
        "ROBOID_color_any": "아무 색",
        "ROBOID_back": "뒤쪽",
        "START": "시작",
        "FLOW": "흐름",
        "MOVING": "움직임",
        "LOOKS": "생김새",
        "BRUSH": "붓",
        "ROBOID_sound_dibidibidip": "디비디비딥",
        "TEXT": "글상자",
        "ROBOID_sound_good_job": "잘 했어요",
        "SOUND": "소리",
        "JUDGEMENT": "판단",
        "CALC": "계산",
        "VARIABLE": "자료",
        "ANALYSIS": "데이터분석",
        "EXPANSION": "확장",
        "ARDUINO": "하드웨어",
        "ROBOID_sound_march": "행진",
        "ROBOID_sound_birthday": "생일",
        "no_target": "대상 없음",
        "Paste_blocks": "붙여넣기",
        "tidy_up_block": "코드 정리하기",
        "Clear_all_blocks": "모든 코드 삭제하기",
        "add_comment": "메모 추가하기",
        "hide_all_comment": "모든 메모 숨기기",
        "ROBOID_left": "왼쪽",
        "ROBOID_right": "오른쪽",
        "ROBOID_both": "양쪽",
        "ROBOID_color_red": "빨간색",
        "ROBOID_color_yellow": "노란색",
        "ROBOID_color_green": "초록색",
        "ROBOID_color_sky_blue": "하늘색",
        "ROBOID_color_blue": "파란색",
        "ROBOID_color_purple": "자주색",
        "ROBOID_color_white": "하얀색",
        "ROBOID_unit_cm": "cm",
        "oneself": "자신",
        "ROBOID_unit_sec": "초",
        "ROBOID_unit_pulse": "펄스",
        "ROBOID_unit_deg": "도",
        "ROBOID_color_orange": "주황색",
        "ROBOID_color_violet": "보라색",
        "ROBOID_sound_beep": "삐",
        "ROBOID_sound_random_beep": "무작위 삐",
        "ROBOID_sound_siren": "사이렌",
        "ROBOID_sound_engine": "엔진",
        "ROBOID_sound_robot": "로봇",
        "ALTINO_CDS": "조도",
        "ALTINO_ACCX": "가속도-X",
        "ALTINO_ACCY": "가속도-Y",
        "ALTINO_ACCZ": "가속도-Z",
        "ALTINO_MAGX": "지자기-X",
        "ALTINO_MAGY": "지자기-Y",
        "ALTINO_MAGZ": "지자기-Z",
        "ALTINO_GYROX": "자이로-X",
        "ALTINO_GYROY": "자이로-Y",
        "ALTINO_GYROZ": "자이로-Z",
        "ALTINO_IR1": "적외선-1",
        "ALTINO_IR2": "적외선-2",
        "ALTINO_IR3": "적외선-3",
        "ALTINO_IR4": "적외선-4",
        "ALTINO_IR5": "적외선-5",
        "ALTINO_IR6": "적외선-6",
        "ALTINO_TEM": "온도",
        "ALTINO_TOR2": "왼쪽 뒷바퀴 전류",
        "ALTINO_TOR1": "오른쪽 뒷바퀴 전류",
        "ALTINO_STTOR": "조향전류",
        "ALTINO_BAT": "배터리",
        "ALTINO_Steering_Angle_Center": "중앙",
        "ALTINO_Steering_Angle_Left5": "왼쪽으로-5",
        "mouse_pointer": "마우스포인터",
        "self": "자신",
        "wall_up": "위쪽 벽",
        "wall_down": "아래쪽 벽",
        "wall_right": "오른쪽 벽",
        "wall_left": "왼쪽 벽",
        "length_of_string": "번째 글자부터",
        "auto": "자동",
        "behaviorConduct01001001": "태풍이 오기 전",
        "behaviorConduct01001002": "태풍이 왔을 때",
        "behaviorConduct01001003": "태풍이 지나간 후",
        "behaviorConduct03002002": "화상 처치",
        "behaviorConduct03002003": "고열 예방",
        "behaviorConduct03002004": "뱀에 물렸을 때 처치",
        "behaviorConduct03002005": "벌에 쏘였을 때 처치",
        "behaviorConduct03002006": "과호흡증후군 응급처치",
        "chocopi_touch_event_touch": "만질 때",
        "chocopi_touch_event_untouch": "뗄 때",
        "chocopi_control_event_pressed": "누를 때",
        "chocopi_control_event_released": "뗄 때",
        "chocopi_joystick_X": "조이스틱 좌우",
        "chocopi_joystick_Y": "조이스틱 상하",
        "chocopi_pot": "볼륨",
        "chocopi_motion_photogate_time_unblocked": "연 시간",
        "chocopi_motion_photogate_time_blocked": "막은 시간",
        "chocopi_motion_photogate_event_unblocked": "열었을 때",
        "chocopi_motion_photogate_event_blocked": "막았을 때",
        "coconut_move_forward": "앞으로",
        "coconut_move_backward": "뒤로",
        "coconut_turn_left": "왼쪽",
        "coconut_turn_right": "오른쪽",
        "coconut_color_red": "빨간색",
        "coconut_color_yellow": "노란색",
        "coconut_color_green": "초록색",
        "coconut_color_cyan": "하늘색",
        "coconut_color_blue": "파란색",
        "coconut_color_magenta": "보라색",
        "coconut_color_white": "흰색",
        "coconut_left_led": "왼쪽",
        "coconut_right_led": "오른쪽",
        "coconut_both_leds": "모든",
        "coconut_note_c": "도",
        "coconut_note_d": "레",
        "coconut_note_e": "미",
        "coconut_note_f": "파",
        "coconut_note_g": "솔",
        "coconut_note_a": "라",
        "coconut_note_b": "시",
        "coconut_play_buzzer_hn": "2분음표",
        "coconut_play_buzzer_qn": "4분음표",
        "coconut_play_buzzer_en": "8분음표",
        "coconut_play_buzzer_sn": "16분음표",
        "coconut_play_buzzer_tn": "32분음표",
        "coconut_play_buzzer_wn": "온음표",
        "coconut_play_buzzer_dhn": "점2분음표",
        "coconut_play_buzzer_dqn": "점4분음표",
        "coconut_play_buzzer_den": "점8분음표",
        "coconut_play_buzzer_dsn": "점16분음표",
        "coconut_play_buzzer_dtn": "점32분음표",
        "coconut_rest_buzzer_hr": "2분쉼표",
        "coconut_rest_buzzer_qr": "4분쉼표",
        "coconut_rest_buzzer_er": "8분쉼표",
        "coconut_rest_buzzer_sr": "16분쉼표",
        "coconut_rest_buzzer_tr": "32분쉼표",
        "coconut_rest_buzzer_wr": "온쉼표",
        "ALBERT_note_c": "도",
        "ALBERT_note_d": "레",
        "ALBERT_note_e": "미",
        "ALBERT_note_f": "파",
        "ALBERT_note_g": "솔",
        "ALBERT_note_a": "라",
        "ALBERT_note_b": "시",
        "coconut_play_midi_1": "반짝반짝 작은별",
        "coconut_play_midi_2": "곰세마리",
        "coconut_play_midi_3": "모차르트 자장가",
        "coconut_play_midi_4": "도레미송",
        "coconut_play_midi_5": "나비야",
        "coconut_sensor_both_floor": "모든",
        "coconut_floor_sensing_on": "감지",
        "coconut_floor_sensing_off": "미감지",
        "coconut_sensor_both_proximity": "모든",
        "coconut_dotmatrix_set_on": "켜짐",
        "coconut_dotmatrix_set_off": "꺼짐",
        "coconut_dotmatrix_row_0": "모든",
        "coconut_dotmatrix_row_1": "1",
        "coconut_dotmatrix_row_2": "2",
        "coconut_dotmatrix_row_3": "3",
        "coconut_dotmatrix_row_4": "4",
        "coconut_dotmatrix_row_5": "5",
        "coconut_dotmatrix_row_6": "6",
        "coconut_dotmatrix_row_7": "7",
        "coconut_dotmatrix_row_8": "8",
        "coconut_dotmatrix_col_0": "모든",
        "coconut_dotmatrix_col_1": "1",
        "coconut_dotmatrix_col_2": "2",
        "coconut_dotmatrix_col_3": "3",
        "coconut_dotmatrix_col_4": "4",
        "coconut_dotmatrix_col_5": "5",
        "coconut_dotmatrix_col_6": "6",
        "coconut_dotmatrix_col_7": "7",
        "coconut_dotmatrix_col_8": "8",
        "coconut_x_axis": "X축",
        "coconut_y_axis": "Y축",
        "coconut_z_axis": "Z축",
        "CODEino_sensor_name_0": "소리",
        "CODEino_sensor_name_1": "빛",
        "CODEino_sensor_name_2": "슬라이더",
        "CODEino_sensor_name_3": "저항-A",
        "CODEino_sensor_name_4": "저항-B",
        "CODEino_sensor_name_5": "저항-C",
        "CODEino_sensor_name_6": "저항-D",
        "CODEino_string_11": "소리큼",
        "CODEino_string_12": "소리작음",
        "CODEino_string_14": "밝음",
        "CODEino_string_15": "어두움",
        "CODEino_string_3": "버튼누름",
        "CODEino_string_4": "A 연결됨",
        "CODEino_string_5": "B 연결됨",
        "CODEino_string_6": "C 연결됨",
        "CODEino_string_7": "D 연결됨",
        "CODEino_string_16": "왼쪽 기울임",
        "CODEino_string_17": "오른쪽 기울임",
        "CODEino_string_18": "위쪽 기울임",
        "CODEino_string_19": "아래쪽 기울임",
        "CODEino_string_20": "뒤집힘",
        "CODEino_led_red": "빨강",
        "CODEino_led_green": "초록",
        "CODEino_led_blue": "파랑",
        "jdkit_led_turnon": "켜기",
        "jdkit_led_turnoff": "끄기",
        "jdkit_led": "LED",
        "ev3_cw": "시계",
        "ev3_ccw": "반시계",
        "roborobo_motor_stop": "정지",
        "roborobo_motor_CW": "정회전",
        "roborobo_motor_CCW": "역회전",
        "FUNBOARD_bt_up": "빨강(A)",
        "FUNBOARD_bt_down": "노랑(B)",
        "FUNBOARD_bt_left": "초록(C)",
        "FUNBOARD_bt_right": "파랑(D)",
        "FUNBOARD_touchbt_up": "A(빨강)",
        "FUNBOARD_touchbt_down": "B(노랑)",
        "FUNBOARD_touchbt_left": "C(초록)",
        "FUNBOARD_touchbt_right": "D(파랑)",
        "FUNBOARD_touchbt_space": "E",
        "FUNBOARD_touchbt_enter": "F",
        "FUNBOARD_touchbt_escape": "G",
        "FUNBOARD_sensor_slide": "슬라이드 (막대 조정)",
        "FUNBOARD_sensor_cds": "Cds (밝기 감지)",
        "FUNBOARD_sensor_mic": "마이크 (소리 감지)",
        "FUNBOARD_sensor_state_1": "작다",
        "FUNBOARD_sensor_state_2": "크다",
        "FUNBOARD_led_color_red": "빨강",
        "FUNBOARD_led_color_yellow": "노랑",
        "FUNBOARD_led_color_green": "초록",
        "FUNBOARD_led_color_blue": "파랑",
        "FUNBOARD_led_color_all": "모두",
        "FUNBOARD_do_on": "켜기",
        "FUNBOARD_do_off": "끄기",
        "FUNBOARD_row_tag": "줄",
        "FUNBOARD_column_tag": "칸",
        "FUNBOARD_scroll_no": "없음",
        "FUNBOARD_scroll_left": "왼쪽으로",
        "FUNBOARD_scroll_right": "오른쪽으로",
        "FUNBOARD_scroll_up": "위쪽으로",
        "FUNBOARD_scroll_down": "아래쪽으로",
        "HAMSTER_sensor_signal_strength": "신호 세기",
        "HAMSTER_turn_once_left": "왼쪽",
        "HAMSTER_turn_right": "오른쪽",
        "HAMSTER_left_wheel": "왼쪽",
        "HAMSTER_right_wheel": "오른쪽",
        "HAMSTER_both_wheels": "양쪽",
        "HAMSTER_color_black": "검은색",
        "HAMSTER_color_white": "하얀색",
        "HAMSTER_left_floor_sensor": "왼쪽",
        "HAMSTER_right_floor_sensor": "오른쪽",
        "HAMSTER_both_floor_sensors": "양쪽",
        "HAMSTER_front": "앞쪽",
        "HAMSTER_rear": "뒤쪽",
        "HAMSTER_left_led": "왼쪽",
        "HAMSTER_right_led": "오른쪽",
        "HAMSTER_both_leds": "양쪽",
        "HAMSTER_color_red": "빨간색",
        "HAMSTER_color_yellow": "노란색",
        "HAMSTER_color_green": "초록색",
        "HAMSTER_color_cyan": "하늘색",
        "HAMSTER_color_blue": "파란색",
        "HAMSTER_color_magenta": "자주색",
        "HAMSTER_port_a": "A",
        "HAMSTER_port_b": "B",
        "HAMSTER_port_ab": "A와 B",
        "HAMSTER_analog_input": "아날로그 입력",
        "HAMSTER_digital_input": "디지털 입력",
        "HAMSTER_servo_output": "서보 출력",
        "HW_MOTOR": "모터",
        "HW_MELODY": "멜로디",
        "HW_SENSOR": "센서",
        "HW_LED": "발광다이오드",
        "HW_ROBOT": "로봇",
        "HAMSTER_pwm_output": "PWM 출력",
        "HAMSTER_digital_output": "디지털 출력",
        "jdkit_clockwise": "시계방향",
        "jdkit_counterclockwise": "반시계방향",
        "jdkit_motor_lefttop": "왼쪽위",
        "jdkit_motor_leftbottom": "왼쪽아래",
        "jdkit_motor_righttop": "오른쪽위",
        "jdkit_motor_rightbottom": "오른쪽아래",
        "jdkit_gyro_frontrear": "앞뒤",
        "jdkit_gyro_leftright": "좌우",
        "jdkit_led_color_green": "초록색",
        "jdkit_led_color_orange": "오랜지색",
        "jdkit_tune_do": "도",
        "jdkit_tune_re": "레",
        "jdkit_tune_mi": "미",
        "jdkit_tune_fa": "파",
        "jdkit_tune_sol": "솔",
        "jdkit_tune_la": "라",
        "jdkit_tune_si": "시",
        "modi_enviroment_temperature": "온도",
        "modi_enviroment_humidity": "습도",
        "modi_enviroment_illuminance": "조도",
        "modi_enviroment_red": "빨강",
        "modi_enviroment_bule": "파랑",
        "modi_enviroment_green": "초록",
        "modi_gyroscope_xAcceleratior": "X축 가속",
        "modi_gyroscope_yAcceleratior": "Y축 가속",
        "modi_gyroscope_zAcceleratior": "Z축 가속",
        "modi_motor_angle": "각도",
        "modi_motor_speed": "속도",
        "modi_motor_torque": "회전",
        "modi_speaker_F_PA_5": "파5",
        "modi_speaker_F_SOL_5": "솔5",
        "modi_speaker_F_RA_5": "라5",
        "modi_speaker_F_SO_5": "시5",
        "modi_speaker_F_PA_S_5": "파#5",
        "modi_speaker_F_SOL_S_5": "솔#5",
        "modi_speaker_F_RA_S_5": "라#5",
        "modi_speaker_F_DO_6": "도6",
        "modi_speaker_F_RE_6": "레6",
        "modi_speaker_F_MI_6": "미6",
        "modi_speaker_F_PA_6": "파6",
        "modi_speaker_F_SOL_6": "솔6",
        "modi_speaker_F_RA_6": "라6",
        "modi_speaker_F_SO_6": "시6",
        "modi_speaker_F_DO_S_6": "도#6",
        "modi_speaker_F_RE_S_6": "레#6",
        "modi_speaker_F_PA_S_6": "파#6",
        "modi_speaker_F_SOL_S_6": "솔#6",
        "modi_speaker_F_RA_S_6": "라#6",
        "modi_speaker_F_DO_7": "도7",
        "modi_speaker_F_RE_7": "레7",
        "modi_speaker_F_MI_7": "미7",
        "modi_speaker_F_DO_S_7": "도#7",
        "modi_speaker_F_RE_S_7": "레#7",
        "roborobo_color_red": " 빨간색  ",
        "roborobo_color_green": " 녹색 ",
        "roborobo_color_blue": " 파란색 ",
        "roborobo_color_yellow": " 노란색 ",
        "roborobo_on": "켜기",
        "roborobo_off": "끄기",
        "roborobo_motor1": "모터1",
        "roborobo_motor2": "모터2",
        "robotis_cm_spring_left": "왼쪽 접촉 센서",
        "robotis_cm_spring_right": "오른쪽 접촉 센서",
        "robotis_cm_switch": "선택 버튼 상태",
        "robotis_cm_sound_detected": "최종 소리 감지 횟수",
        "robotis_cm_sound_detecting": "실시간 소리 감지 횟수",
        "robotis_cm_ir_left": "왼쪽 적외선 센서",
        "robotis_cm_ir_right": "오른쪽 적외선 센서",
        "robotis_cm_calibration_left": "왼쪽 적외선 센서 캘리브레이션 값",
        "robotis_cm_calibration_right": "오른쪽 적외선 센서 캘리브레이션 값",
        "robotis_common_on": "켜기",
        "robotis_common_off": "끄기",
        "robotis_common_clockwhise": "시계방향",
        "robotis_common_counter_clockwhise": "반시계방향",
        "robotis_cm_user_button": "사용자 버튼 상태",
        "robotis_aux_servo_position": "서보모터 위치",
        "robotis_aux_ir": "적외선센서",
        "robotis_aux_touch": "접촉센서",
        "robotis_aux_brightness": "조도센서(CDS)",
        "robotis_aux_hydro_themo_humidity": "온습도센서(습도)",
        "robotis_aux_hydro_themo_temper": "온습도센서(온도)",
        "robotis_aux_temperature": "온도센서",
        "robotis_aux_ultrasonic": "초음파센서",
        "robotis_aux_magnetic": "자석센서",
        "robotis_aux_motion_detection": "동작감지센서",
        "robotis_aux_color": "컬러센서",
        "robotis_aux_custom": "사용자 장치",
        "robotis_common_red_color": "빨간색",
        "robotis_common_green_color": "녹색",
        "robotis_common_blue_color": "파란색",
        "robotis_common_port_1": "포트 1",
        "robotis_common_port_2": "포트 2",
        "robotis_common_port_3": "포트 3",
        "robotis_common_port_4": "포트 4",
        "robotis_common_port_5": "포트 5",
        "robotis_common_port_6": "포트 6",
        "robotis_common_wheel_mode": "회전모드",
        "robotis_common_joint_mode": "관절모드",
        "robotis_cm_led_both": "양 쪽 LED",
        "robotis_cm_led_right": "오른쪽 LED",
        "robotis_cm_led_left": "왼쪽 LED",
        "robotori_D2_Input": "디지털 2번 핀 입력 값",
        "robotori_D3_Input": "디지털 3번 핀 입력 값",
        "robotori_A0_Input": "아날로그 0번 핀 입력 값",
        "robotori_A1_Input": "아날로그 1번 핀 입력 값",
        "robotori_A2_Input": "아날로그 2번 핀 입력 값",
        "robotori_A3_Input": "아날로그 3번 핀 입력 값",
        "robotori_A4_Input": "아날로그 4번 핀 입력 값",
        "robotori_A5_Input": "아날로그 5번 핀 입력 값",
        "robotori_D10_Output": "10번",
        "robotori_D11_Output": "11번",
        "robotori_D12_Output": "12번",
        "robotori_D13_Output": "13번",
        "robotori_On": "켜짐",
        "robotori_Off": "꺼짐",
        "robotori_analog5": "5번 핀 출력 값",
        "robotori_analog6": "6번 핀 출력 값",
        "robotori_analog9": "9번 핀 출력 값",
        "robotori_DC_rightmotor": "오른쪽",
        "robotori_DC_leftmotor": "왼쪽",
        "robotori_DC_STOP": "정지",
        "robotori_DC_CW": "시계방향",
        "robotori_DC_CCW": "반시계방향",
        "rokoboard_sensor_name_1": "빛",
        "rokoboard_sensor_name_0": "소리",
        "rokoboard_sensor_name_2": "슬라이더",
        "rokoboard_sensor_name_3": "저항-A",
        "rokoboard_sensor_name_4": "저항-B",
        "rokoboard_sensor_name_5": "저항-C",
        "rokoboard_sensor_name_6": "저항-D",
        "rokoboard_string_1": "버튼을 눌렀는가?",
        "VARIABLE_change_variable": "변수 더하기",
        "FUNCTION_character_variable": "문자/숫자값",
        "Duplication_option": "코드 복사 & 붙여넣기",
        "CONTEXT_COPY_option": "코드 복사",
        "Delete_Blocks": "코드 삭제",
        "add_my_storage": "나의 보관함에 추가하기",
        "FUNCTION_define": "함수 정의하기",
        "export_object": "오브젝트 내보내기",
        "OnBlock": "켜짐(HIGH, 5V)",
        "OffBlock": "꺼짐(LOW, 0V)",
        "AllOnBlock": "모두 켜짐",
        "AllOffBlock": "모두 꺼짐",
        "BacklightOn": "켜기",
        "BacklightOff": "끄기",
        "lineForward": "직진",
        "Left": "좌회전",
        "Right": "우회전",
        "LineBack": "후진",
        "ForwardSpeed": "직진속도",
        "TurnSpeed": "회전속도",
        "ForwardOverTime": "교차로 직진시간",
        "Tracer": "라인트레이서",
        "RemotBit": "조종기(비트수신)",
        "RemotPs2": "조종기(PS2)",
        "RichShield_pulldown": "기본",
        "RichShield_pullup": "풀업",
        "chocopi_motion_angle_x": "각도X",
        "chocopi_motion_angle_y": "각도Y",
        "chocopi_motion_angle_z": "각도Z",
        "RichShield_lcd_first_line": "첫 번째",
        "RichShield_lcd_seconds_line": "두 번째",
        "RichShield_toggle_on": "켜기",
        "RichShield_toggle_off": "끄기",
        "ROBOID_sensor_left_proximity": "왼쪽 근접 센서",
        "ROBOID_sensor_right_proximity": "오른쪽 근접 센서",
        "ROBOID_sensor_acceleration_x": "x축 가속도",
        "ROBOID_sensor_acceleration_y": "y축 가속도",
        "ROBOID_sensor_acceleration_z": "z축 가속도",
        "ROBOID_sensor_front_oid": "앞쪽 OID",
        "ROBOID_sensor_rear_oid": "뒤쪽 OID",
        "ROBOID_sensor_position_x": "x 위치",
        "ROBOID_sensor_position_y": "y 위치",
        "ROBOID_sensor_orientation": "방향",
        "ROBOID_sensor_light": "밝기",
        "ROBOID_sensor_temperature": "온도",
        "ROBOID_sensor_signal_strength": "신호 세기",
        "ROBOID_front": "앞쪽",
        "ROBOID_rear": "뒤쪽",
        "ROBOID_forward2": "앞으로",
        "ROBOID_backward2": "뒤로",
        "ROBOID_tilt_forward": "앞으로 기울임",
        "ROBOID_tilt_backward": "뒤로 기울임",
        "ROBOID_tilt_left": "왼쪽으로 기울임",
        "ROBOID_tilt_right": "오른쪽으로 기울임",
        "ROBOID_tilt_flip": "거꾸로 뒤집음",
        "ROBOID_tilt_not": "기울이지 않음",
        "ROBOID_battery_normal": "배터리 정상",
        "ROBOID_battery_low": "배터리 부족",
        "ROBOID_battery_empty": "배터리 없음",
        "ROBOID_turn_on": "켜기",
        "ROBOID_turn_off": "끄기",
        "ROBOID_note_c": "도",
        "ROBOID_note_c_sharp": "도♯(레♭)",
        "ROBOID_note_d": "레",
        "ROBOID_note_d_sharp": "레♯(미♭)",
        "ROBOID_note_e": "미",
        "ROBOID_note_f": "파",
        "ROBOID_note_f_sharp": "파♯(솔♭)",
        "ROBOID_note_g": "솔",
        "ROBOID_note_g_sharp": "솔♯(라♭)",
        "ROBOID_note_a": "라",
        "ROBOID_note_a_sharp": "라♯(시♭)",
        "ROBOID_note_b": "시",
        "ROBOID_monitor_left_wheel": "왼쪽 바퀴",
        "ROBOID_monitor_right_wheel": "오른쪽 바퀴",
        "ROBOID_monitor_left_eye": "왼쪽 눈",
        "ROBOID_monitor_right_eye": "오른쪽 눈",
        "ROBOID_monitor_buzzer": "버저",
        "ROBOID_monitor_note": "음표",
        "ROBOID_sensor_mic_touch": "마이크 터치",
        "ROBOID_sensor_volume_up_touch": "소리 크게 터치",
        "ROBOID_sensor_volume_down_touch": "소리 작게 터치",
        "ROBOID_sensor_play_touch": "실행 터치",
        "ROBOID_sensor_back_touch": "뒤로 터치",
        "ROBOID_sensor_oid_mode": "OID 모드",
        "ROBOID_sensor_oid": "OID",
        "ROBOID_sensor_lift": "들어올림",
        "ROBOID_button_mic": "마이크",
        "ROBOID_button_volume_up": "소리 크게",
        "ROBOID_button_volume_down": "소리 작게",
        "ROBOID_button_play": "실행",
        "ROBOID_button_back": "뒤로",
        "ROBOID_button_clicked": "클릭했는가",
        "ROBOID_button_long_pressed": "오래 눌렀는가(1.5초)",
        "ROBOID_button_long_long_pressed": "아주 오래 눌렀는가(3초)",
        "ROBOID_tap": "두드림",
        "ROBOID_lift": "들어올림",
        "ROBOID_forward": "앞쪽",
        "ROBOID_backward": "뒤쪽",
        "ROBOID_sound_noise": "지지직",
        "ALTINO_Line": "번째 줄",
        "ALTINO_REMOTE": "리모콘 수신 값",
        "ALTINO_STVAR": "조향 가변저항",
        "ALTINO_Value": "출력 값",
        "ALTINO_dot_display_1": "한문자",
        "ALTINO_dot_display_2": "출력하기",
        "ALTINO_sound_oct": "옥타브",
        "ALTINO_leftWheel": "왼쪽",
        "ALTINO_melody_ms": "연주하기",
        "ALTINO_outputValue": "출력 값",
        "ALTINO_rightWheel": "오른쪽",
        "ALTINO_set": "로 정하기",
        "ALTINO_stopAll": "모두",
        "ALTINO_stopDrive": "주행",
        "ALTINO_stopSteering": "조향",
        "ALTINO_stopSound": "소리",
        "ALTINO_stopLight": "라이트",
        "ALTINO_stopDisplay": "표시하기",
        "ALTINO_dot_line_1": "1행",
        "ALTINO_dot_line_2": "2행",
        "ALTINO_dot_line_3": "3행",
        "ALTINO_dot_line_4": "4행",
        "ALTINO_dot_line_5": "5행",
        "ALTINO_dot_line_6": "6행",
        "ALTINO_dot_line_7": "7행",
        "ALTINO_dot_line_8": "8행",
        "Action": "동작",
        "Sound": "소리",
        "Back": "뒤",
        "Red": "빨간",
        "Green": "초록",
        "Blue": "파란",
        "Cheer": "환호",
        "Glad": "반가움",
        "Dissatisfaction": "불만",
        "Angry": "화남",
        "Laughter": "웃음",
        "Praise": "칭찬",
        "Praise2": "칭찬2",
        "Consolation": "위로",
        "Surprised": "놀람",
        "Warning": "경고",
        "Fear": "공포",
        "Forward": "앞",
        "LightSensorValue": "광센서 값",
        "MicSensorValue": "마이크 값",
        "IR0Value": "IR 0 값",
        "IR1Value": "IR 1 값",
        "IR2Value": "IR 2 값",
        "IR3Value": "IR 3 값",
        "Remocon": "리모컨",
        "Head": "머리",
        "LeftArm": "왼 팔",
        "RightArm": "오른 팔",
        "BITBRICK_light": "밝기센서",
        "BITBRICK_IR": "거리센서",
        "BITBRICK_touch": "버튼",
        "BITBRICK_ultrasonicSensor": "초음파센서",
        "BITBRICK_vibrationSensor": "진동센서",
        "BITBRICK_potentiometer": "가변저항",
        "BITBRICK_MIC": "소리센서",
        "BITBRICK_UserSensor": "사용자입력",
        "BITBRICK_UserInput": "사용자입력",
        "ROBOID_sensor_color_r": "색깔 R",
        "ROBOID_sensor_color_g": "색깔 G",
        "ROBOID_sensor_color_b": "색깔 B",
        "ROBOID_sensor_floor": "바닥 센서",
        "ROBOID_sensor_button": "버튼",
        "ROBOID_sensor_color_number": "색깔 번호",
        "ROBOID_sensor_color_pattern": "색깔 패턴",
        "ROBOID_free_fall": "자유 낙하",
        "ROBOID_sound_chop": "쩝",
        "ROBOID_sound_happy": "행복",
        "ROBOID_sound_angry": "화남",
        "ROBOID_sound_sad": "슬픔",
        "ROBOID_sound_sleep": "졸림",
        "monitor_joystick_left_x": "왼쪽 조이스틱 X",
        "monitor_joystick_left_y": "왼쪽 조이스틱 Y",
        "monitor_joystick_left_direction": "왼쪽 조이스틱 방향",
        "monitor_joystick_left_event": "왼쪽 조이스틱 이벤트",
        "monitor_joystick_right_x": "오른쪽 조이스틱 X",
        "monitor_joystick_right_y": "오른쪽 조이스틱 Y",
        "monitor_joystick_right_direction": "오른쪽 조이스틱 방향",
        "monitor_joystick_right_event": "오른쪽 조이스틱 이벤트",
        "monitor_button_button": "버튼",
        "monitor_button_event": "버튼 이벤트",
        "monitor_entryhw_countTransferReserved": "전송 예정 데이터",
        "common_light_color_red": "빨강",
        "common_light_color_yellow": "노랑",
        "common_light_color_green": "초록",
        "common_light_color_cyan": "하늘색",
        "common_light_color_blue": "파랑",
        "common_light_color_magenta": "자홍",
        "common_light_color_white": "흰색",
        "common_light_color_black": "검정",
        "common_light_color_cottoncandy": "구름솜사탕",
        "common_light_color_emerald": "에메랄드",
        "common_light_color_lavender": "라벤더",
        "common_light_color_muscat": "청포도",
        "common_light_color_strawberrymilk": "딸기우유",
        "common_light_color_sunset": "저녁노을",
        "common_light_mode_hold": "켜짐",
        "common_light_mode_flicker": "깜빡임",
        "common_light_mode_flicker_double": "2번 연속 깜빡임",
        "common_light_mode_dimming": "천천히 깜빡임",
        "common_light_mode_sunrise": "점점 밝아짐",
        "common_light_mode_sunset": "점점 어두워짐",
        "common_light_mode_rainbow": "무지개",
        "common_light_mode_rainbow2": "무지개2",
        "common_light_brightness_all": "전체",
        "common_light_brightness_b100": "밝기 100%",
        "common_light_brightness_b25": "밝기 25%",
        "common_light_brightness_b50": "밝기 50%",
        "common_light_brightness_b75": "밝기 75%",
        "common_light_brightness_off": "끄기",
        "common_light_brightness_on": "켜기",
        "common_left": "왼쪽",
        "common_right": "오른쪽",
        "common_roll": "Roll",
        "common_pitch": "Pitch",
        "common_yaw": "Yaw",
        "common_throttle": "Throttle",
        "controller_button": "버튼",
        "controller_button_event": "버튼 이벤트",
        "controller_button_front_left": "전면 왼쪽 버튼",
        "controller_button_front_right": "전면 오른쪽 버튼",
        "controller_button_top_left": "상단 왼쪽 버튼",
        "controller_button_top_right": "상단 오른쪽 버튼",
        "controller_button_center_up": "중앙 위 버튼",
        "controller_button_center_left": "중앙 왼쪽 버튼",
        "controller_button_center": "중앙 버튼(전원)",
        "controller_button_center_right": "중앙 오른쪽 버튼",
        "controller_button_center_down": "중앙 아래쪽 버튼",
        "controller_button_bottom_left": "하단 왼쪽 버튼",
        "controller_button_bottom_right": "하단 오른쪽 버튼",
        "controller_buzzer": "버저",
        "controller_buzzer_a": "라",
        "controller_buzzer_as": "라#",
        "controller_buzzer_b": "시",
        "controller_buzzer_c": "도",
        "controller_buzzer_cs": "도#",
        "controller_buzzer_d": "레",
        "controller_buzzer_ds": "레#",
        "controller_buzzer_e": "미",
        "controller_buzzer_f": "파",
        "controller_buzzer_fs": "파#",
        "controller_buzzer_g": "솔",
        "controller_buzzer_gs": "솔#",
        "controller_buzzer_mute": "쉼",
        "controller_joystick_direction_left_up": "왼쪽 위",
        "controller_joystick_direction_up": "위",
        "controller_joystick_direction_right_up": "오른쪽 위",
        "controller_joystick_direction_left": "왼쪽",
        "controller_joystick_direction_center": "중앙",
        "controller_joystick_direction_right": "오른쪽",
        "controller_joystick_direction_left_down": "왼쪽 아래",
        "controller_joystick_direction_down": "아래",
        "controller_joystick_direction_right_down": "오른쪽 아래",
        "controller_joystick_left_direction": "왼쪽 조이스틱 방향",
        "controller_joystick_left_event": "왼쪽 조이스틱 이벤트",
        "controller_joystick_left_x": "왼쪽 조이스틱 가로축",
        "controller_joystick_left_y": "왼쪽 조이스틱 세로축",
        "controller_joystick_right_direction": "오른쪽 조이스틱 방향",
        "controller_joystick_right_event": "오른쪽 조이스틱 이벤트",
        "controller_joystick_right_x": "오른쪽 조이스틱 가로축",
        "controller_joystick_right_y": "오른쪽 조이스틱 세로축",
        "entryhw_count_transfer_reserved": "전송 예약된 데이터 수",
        "common_drone": "드론",
        "common_controller": "조종기",
        "controller_button_front_left_top": "전면 왼쪽 상단 버튼",
        "controller_button_front_left_bottom": "전면 왼쪽 하단 버튼",
        "controller_button_front_right_top": "전면 오른쪽 상단 버튼",
        "controller_button_front_right_bottom": "전면 오른쪽 하단 버튼",
        "controller_display_align_center": "가운데",
        "controller_display_align_left": "왼쪽",
        "controller_display_align_right": "오른쪽",
        "controller_display_flagfill_off": "채우지 않음",
        "controller_display_flagfill_on": "채움",
        "controller_display_font_10x16": "큼",
        "controller_display_font_5x8": "작음",
        "controller_display_line_dashed": "파선",
        "controller_display_line_dotted": "점선",
        "controller_display_line_solid": "실선",
        "controller_display_pixel_black": "검은색",
        "controller_display_pixel_white": "흰색",
        "controller_display_pixel_inverse": "반전",
        "monitor_state_modeFlight": "비행 모드",
        "monitor_state_modeControlFlight": "비행 제어기 모드",
        "monitor_state_modeMovement": "이동 상태",
        "monitor_state_headless": "헤드리스",
        "monitor_state_controlSpeed": "제어 속도",
        "monitor_state_sensorOrientation": "센서 방향",
        "monitor_state_battery": "배터리",
        "monitor_motion_accelX": "가속도 X",
        "monitor_motion_accelY": "가속도 Y",
        "monitor_motion_accelZ": "가속도 Z",
        "monitor_motion_gyroRoll": "자이로 Roll",
        "monitor_motion_gyroPitch": "자이로 Pitch",
        "monitor_motion_gyroYaw": "자이로 Yaw",
        "monitor_motion_angleRoll": "자세 Roll",
        "monitor_motion_anglePitch": "자세 Pitch",
        "monitor_motion_angleYaw": "자세 Yaw",
        "monitor_battle_ir_message": "IR Message",
        "monitor_informationAssembledForEntry_positionX": "위치 X",
        "monitor_informationAssembledForEntry_positionY": "위치 Y",
        "monitor_informationAssembledForEntry_positionZ": "위치 Z",
        "monitor_informationAssembledForEntry_altitude": "고도",
        "monitor_informationAssembledForEntry_rangeHeight": "거리 센서의 높이",
        "drone_accel_x": "가속도 x",
        "drone_accel_y": "가속도 y",
        "drone_accel_z": "가속도 z",
        "drone_gyro_pitch": "각속도 Pitch",
        "drone_gyro_roll": "각속도 Roll",
        "drone_gyro_yaw": "각속도 Yaw",
        "drone_attitude_pitch": "자세 Pitch",
        "drone_attitude_roll": "자세 Roll",
        "drone_attitude_yaw": "자세 Yaw",
        "drone_control_quad_roll": "Roll",
        "drone_control_quad_pitch": "Pitch",
        "drone_control_quad_throttle": "Throttle",
        "drone_control_quad_yaw": "Yaw",
        "drone_control_quad_roll_left": "왼쪽",
        "drone_control_quad_roll_right": "오른쪽",
        "drone_control_quad_pitch_backward": "뒤",
        "drone_control_quad_pitch_forward": "앞",
        "drone_control_quad_throttle_down": "아래",
        "drone_control_quad_throttle_up": "위",
        "drone_control_quad_yaw_ccw": "반시계 방향",
        "drone_control_quad_yaw_cw": "시계 방향",
        "drone_headless_normal": "off (숙련자용)",
        "drone_headless_headless": "on (초보자용)",
        "drone_light_color_body": "몸체",
        "drone_light_manual_body_blue": "파랑",
        "drone_light_manual_body_green": "초록",
        "drone_light_manual_body_red": "빨강",
        "drone_motor_rotation_clockwise": "시계 방향",
        "drone_motor_rotation_counterclockwise": "반시계 방향",
        "drone_altitude": "해발고도",
        "drone_range_height": "바닥과의 거리",
        "drone_battle_ir_message": "적외선 데이터",
        "drone_state_mode_system": "시스템 모드",
        "drone_state_mode_flight": "비행 동작 상태",
        "drone_state_mode_control_flight": "비행 제어 모드",
        "drone_state_mode_movement": "이동 상태",
        "drone_state_headless": "Headless",
        "drone_state_control_speed": "제어 속도",
        "drone_state_battery": "배터리",
        "drone_positionX": "위치 X",
        "drone_positionY": "위치 Y",
        "drone_positionZ": "위치 Z",
        "drone_state_sensor_orientation": "센서 방향",
        "monitor_range_front": "정면 거리 센서",
        "monitor_range_bottom": "바닥 거리 센서",
        "monitor_cardColor_frontHue": "카드 위 색상",
        "monitor_cardColor_frontSaturation": "카드 위 채도",
        "monitor_cardColor_frontValue": "카드 위 명도",
        "monitor_cardColor_frontLightness": "카드 위 밝기",
        "monitor_cardColor_rearHue": "카드 아래 색상",
        "monitor_cardColor_rearSaturation": "카드 아래 채도",
        "monitor_cardColor_rearValue": "카드 아래 명도",
        "monitor_cardColor_rearLightness": "카드 아래 밝기",
        "monitor_cardColor_frontColor": "카드 위 색",
        "monitor_cardColor_rearColor": "카드 아래 색",
        "monitor_cardColor_card": "카드",
        "drone_range_front": "정면과의 거리",
        "drone_cardcolor_front_hue": "앞 색상",
        "drone_cardcolor_front_saturation": "앞 채도",
        "drone_cardcolor_front_value": "앞 명도",
        "drone_cardcolor_front_lightness": "앞 밝기",
        "drone_cardcolor_rear_hue": "뒤 색상",
        "drone_cardcolor_rear_saturation": "뒤 채도",
        "drone_cardcolor_rear_value": "뒤 명도",
        "drone_cardcolor_rear_lightness": "뒤 밝기",
        "drone_cardcolor_front_color": "앞 카드 색",
        "drone_cardcolor_rear_color": "뒤 카드 색",
        "drone_cardcolor_card": "카드",
        "byrobot_dronefighter_drone_state_mode_system": "시스템 모드",
        "byrobot_dronefighter_drone_state_mode_vehicle": "드론파이터 모드",
        "byrobot_dronefighter_drone_state_mode_flight": "비행 모드",
        "byrobot_dronefighter_drone_state_mode_drive": "자동차 모드",
        "byrobot_dronefighter_drone_state_mode_coordinate": "기본 좌표계",
        "byrobot_dronefighter_drone_state_battery": "배터리",
        "byrobot_dronefighter_drone_attitude_roll": "자세 Roll",
        "byrobot_dronefighter_drone_attitude_pitch": "자세 Pitch",
        "byrobot_dronefighter_drone_attitude_yaw": "자세 Yaw",
        "byrobot_dronefighter_drone_irmessage": "적외선 수신 값",
        "byrobot_dronefighter_controller_joystick_left_x": "왼쪽 조이스틱 가로축",
        "byrobot_dronefighter_controller_joystick_left_y": "왼쪽 조이스틱 세로축",
        "byrobot_dronefighter_controller_joystick_left_direction": "왼쪽 조이스틱 방향",
        "byrobot_dronefighter_controller_joystick_left_event": "왼쪽 조이스틱 이벤트",
        "byrobot_dronefighter_controller_joystick_left_command": "왼쪽 조이스틱 명령",
        "byrobot_dronefighter_controller_joystick_right_x": "오른쪽 조이스틱 가로축",
        "byrobot_dronefighter_controller_joystick_right_y": "오른쪽 조이스틱 세로축",
        "byrobot_dronefighter_controller_joystick_right_direction": "오른쪽 조이스틱 방향",
        "byrobot_dronefighter_controller_joystick_right_event": "오른쪽 조이스틱 이벤트",
        "byrobot_dronefighter_controller_joystick_right_command": "오른쪽 조이스틱 명령",
        "byrobot_dronefighter_controller_joystick_direction_left_up": "왼쪽 위",
        "byrobot_dronefighter_controller_joystick_direction_up": "위",
        "byrobot_dronefighter_controller_joystick_direction_right_up": "오른쪽 위",
        "byrobot_dronefighter_controller_joystick_direction_left": "왼쪽",
        "byrobot_dronefighter_controller_joystick_direction_center": "중앙",
        "byrobot_dronefighter_controller_joystick_direction_right": "오른쪽",
        "byrobot_dronefighter_controller_joystick_direction_left_down": "왼쪽 아래",
        "byrobot_dronefighter_controller_joystick_direction_down": "아래",
        "byrobot_dronefighter_controller_joystick_direction_right_down": "오른쪽 아래",
        "byrobot_dronefighter_controller_button_button": "버튼",
        "byrobot_dronefighter_controller_button_event": "버튼 이벤트",
        "byrobot_dronefighter_controller_button_front_left": "왼쪽 빨간 버튼",
        "byrobot_dronefighter_controller_button_front_right": "오른쪽 빨간 버튼",
        "byrobot_dronefighter_controller_button_front_left_right": "양쪽 빨간 버튼",
        "byrobot_dronefighter_controller_button_center_up_left": "트림 좌회전 버튼",
        "byrobot_dronefighter_controller_button_center_up_right": "트림 우회전 버튼",
        "byrobot_dronefighter_controller_button_center_up": "트림 앞 버튼",
        "byrobot_dronefighter_controller_button_center_left": "트림 왼쪽 버튼",
        "byrobot_dronefighter_controller_button_center_right": "트림 오른쪽 버튼",
        "byrobot_dronefighter_controller_button_center_down": "트림 뒤 버튼",
        "byrobot_dronefighter_controller_button_bottom_left": "왼쪽 둥근 버튼",
        "byrobot_dronefighter_controller_button_bottom_right": "오른쪽 둥근 버튼",
        "byrobot_dronefighter_controller_button_bottom_left_right": "양쪽 둥근 버튼",
        "byrobot_dronefighter_entryhw_count_transfer_reserved": "전송 예약된 데이터 수",
        "byrobot_dronefighter_common_roll": "Roll",
        "byrobot_dronefighter_common_pitch": "Pitch",
        "byrobot_dronefighter_common_yaw": "Yaw",
        "byrobot_dronefighter_common_throttle": "Throttle",
        "byrobot_dronefighter_common_left": "왼쪽",
        "byrobot_dronefighter_common_right": "오른쪽",
        "byrobot_dronefighter_common_light_manual_on": "켜기",
        "byrobot_dronefighter_common_light_manual_off": "끄기",
        "byrobot_dronefighter_common_light_manual_b25": "밝기 25%",
        "byrobot_dronefighter_common_light_manual_b50": "밝기 50%",
        "byrobot_dronefighter_common_light_manual_b75": "밝기 75%",
        "byrobot_dronefighter_common_light_manual_b100": "밝기 100%",
        "byrobot_dronefighter_common_light_manual_all": "전체",
        "byrobot_dronefighter_common_light_manual_red": "빨강",
        "byrobot_dronefighter_common_light_manual_blue": "파랑",
        "byrobot_dronefighter_common_light_manual_1": "1",
        "byrobot_dronefighter_common_light_manual_2": "2",
        "byrobot_dronefighter_common_light_manual_3": "3",
        "byrobot_dronefighter_common_light_manual_4": "4",
        "byrobot_dronefighter_common_light_manual_5": "5",
        "byrobot_dronefighter_common_light_manual_6": "6",
        "byrobot_dronefighter_controller_buzzer": "버저",
        "byrobot_dronefighter_controller_buzzer_mute": "쉼",
        "byrobot_dronefighter_controller_buzzer_c": "도",
        "byrobot_dronefighter_controller_buzzer_cs": "도#",
        "byrobot_dronefighter_controller_buzzer_d": "레",
        "byrobot_dronefighter_controller_buzzer_ds": "레#",
        "byrobot_dronefighter_controller_buzzer_e": "미",
        "byrobot_dronefighter_controller_buzzer_f": "파",
        "byrobot_dronefighter_controller_buzzer_fs": "파#",
        "byrobot_dronefighter_controller_buzzer_g": "솔",
        "byrobot_dronefighter_controller_buzzer_gs": "솔#",
        "byrobot_dronefighter_controller_buzzer_a": "라",
        "byrobot_dronefighter_controller_buzzer_as": "라#",
        "byrobot_dronefighter_controller_buzzer_b": "시",
        "byrobot_dronefighter_controller_userinterface_preset_clear": "모두 지우기",
        "byrobot_dronefighter_controller_userinterface_preset_dronefighter2017": "기본",
        "byrobot_dronefighter_controller_userinterface_preset_education": "교육용",
        "byrobot_dronefighter_controller_userinterface_command_setup_button_frontleft_down": "왼쪽 빨간 버튼을 눌렀을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_button_frontright_down": "오른쪽 빨간 버튼을 눌렀을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_button_midturnleft_down": "트림 좌회전 버튼을 눌렀을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_button_midturnright_down": "트림 우회전 버튼을 눌렀을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_button_midup_down": "트림 앞 버튼을 눌렀을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_button_midleft_down": "트림 왼쪽 버튼을 눌렀을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_button_midright_down": "트림 오른쪽 버튼을 눌렀을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_button_middown_down": "트림 뒤 버튼을 눌렀을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_joystick_left_up_in": "왼쪽 조이스틱을 위로 움직였을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_joystick_left_left_in": "왼쪽 조이스틱을 왼쪽으로 움직였을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_joystick_left_right_in": "왼쪽 조이스틱을 오른쪽으로 움직였을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_joystick_left_down_in": "왼쪽 조이스틱을 아래로 움직였을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_joystick_right_up_in": "오른쪽 조이스틱을 위로 움직였을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_joystick_right_left_in": "오른쪽 조이스틱을 왼쪽으로 움직였을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_joystick_right_right_in": "오른쪽 조이스틱을 오른쪽으로 움직였을 때",
        "byrobot_dronefighter_controller_userinterface_command_setup_joystick_right_down_in": "오른쪽 조이스틱을 아래로 움직였을 때",
        "byrobot_dronefighter_controller_userinterface_function_joystickcalibration_reset": "조이스틱 보정 초기화",
        "byrobot_dronefighter_controller_userinterface_function_change_team_red": "팀 - 레드",
        "byrobot_dronefighter_controller_userinterface_function_change_team_blue": "팀 - 블루",
        "byrobot_dronefighter_controller_userinterface_function_change_mode_vehicle_flight": "드론",
        "byrobot_dronefighter_controller_userinterface_function_change_mode_vehicle_flightnoguard": "드론 - 가드 없음",
        "byrobot_dronefighter_controller_userinterface_function_change_mode_vehicle_drive": "자동차",
        "byrobot_dronefighter_controller_userinterface_function_change_coordinate_local": "방위 - 일반",
        "byrobot_dronefighter_controller_userinterface_function_change_coordinate_world": "방위 - 앱솔루트",
        "byrobot_dronefighter_controller_userinterface_function_change_mode_control_mode1": "조종 - MODE 1",
        "byrobot_dronefighter_controller_userinterface_function_change_mode_control_mode2": "조종 - MODE 2",
        "byrobot_dronefighter_controller_userinterface_function_change_mode_control_mode3": "조종 - MODE 3",
        "byrobot_dronefighter_controller_userinterface_function_change_mode_control_mode4": "조종 - MODE 4",
        "byrobot_dronefighter_controller_userinterface_function_gyrobias_reset": "자이로 바이어스 리셋",
        "byrobot_dronefighter_controller_userinterface_function_change_mode_usb_cdc": "USB 시리얼 통신 장치",
        "byrobot_dronefighter_controller_userinterface_function_change_mode_usb_hid": "USB 게임 컨트롤러",
        "byrobot_dronefighter_drone_team": "팀 ",
        "byrobot_dronefighter_drone_team_red": "레드",
        "byrobot_dronefighter_drone_team_blue": "블루",
        "byrobot_dronefighter_drone_coordinate_world": "앱솔루트",
        "byrobot_dronefighter_drone_coordinate_local": "일반",
        "byrobot_dronefighter_drone_mode_vehicle_flight": "드론",
        "byrobot_dronefighter_drone_mode_vehicle_drive": "자동차",
        "byrobot_dronefighter_drone_control_double_wheel": "방향",
        "byrobot_dronefighter_drone_control_double_wheel_left": "왼쪽 회전",
        "byrobot_dronefighter_drone_control_double_wheel_right": "오른쪽 회전",
        "byrobot_dronefighter_drone_control_double_accel_forward": "전진",
        "byrobot_dronefighter_drone_control_double_accel_backward": "후진",
        "byrobot_dronefighter_drone_control_quad_roll": "Roll",
        "byrobot_dronefighter_drone_control_quad_pitch": "Pitch",
        "byrobot_dronefighter_drone_control_quad_yaw": "Yaw",
        "byrobot_dronefighter_drone_control_quad_throttle": "Throttle",
        "byrobot_dronefighter_drone_control_quad_roll_left": "왼쪽",
        "byrobot_dronefighter_drone_control_quad_roll_right": "오른쪽",
        "byrobot_dronefighter_drone_control_quad_pitch_forward": "앞으로",
        "byrobot_dronefighter_drone_control_quad_pitch_backward": "뒤로",
        "byrobot_dronefighter_drone_control_quad_yaw_left": "왼쪽 회전",
        "byrobot_dronefighter_drone_control_quad_yaw_right": "오른쪽 회전",
        "byrobot_dronefighter_drone_control_quad_throttle_up": "위",
        "byrobot_dronefighter_drone_control_quad_throttle_down": "아래",
        "byrobot_petrone_v2_common_left": "왼쪽",
        "byrobot_petrone_v2_common_light_color_cottoncandy": "구름솜사탕",
        "byrobot_petrone_v2_common_light_color_emerald": "에메랄드",
        "byrobot_petrone_v2_common_light_color_lavender": "라벤더",
        "byrobot_petrone_v2_common_light_mode_dimming": "천천히 깜빡임",
        "byrobot_petrone_v2_common_light_mode_flicker": "깜빡임",
        "byrobot_petrone_v2_common_light_mode_flicker_double": "2번 연속 깜빡임",
        "byrobot_petrone_v2_common_light_mode_hold": "켜짐",
        "byrobot_petrone_v2_common_light_color_muscat": "청포도",
        "byrobot_petrone_v2_common_light_color_strawberrymilk": "딸기우유",
        "byrobot_petrone_v2_common_light_color_sunset": "저녁노을",
        "byrobot_petrone_v2_common_light_manual_all": "전체",
        "byrobot_petrone_v2_common_light_manual_b100": "밝기 100%",
        "byrobot_petrone_v2_common_light_manual_b25": "밝기 25%",
        "byrobot_petrone_v2_common_light_manual_b50": "밝기 50%",
        "byrobot_petrone_v2_common_light_manual_b75": "밝기 75%",
        "byrobot_petrone_v2_common_light_manual_blue": "파랑",
        "byrobot_petrone_v2_common_light_manual_cyan": "하늘색",
        "byrobot_petrone_v2_common_light_manual_green": "초록",
        "byrobot_petrone_v2_common_light_manual_magenta": "핑크",
        "byrobot_petrone_v2_common_light_manual_off": "끄기",
        "byrobot_petrone_v2_common_light_manual_on": "켜기",
        "byrobot_petrone_v2_common_light_manual_red": "빨강",
        "byrobot_petrone_v2_common_light_manual_white": "흰색",
        "byrobot_petrone_v2_common_light_manual_yellow": "노랑",
        "byrobot_petrone_v2_common_pitch": "Pitch",
        "byrobot_petrone_v2_common_right": "오른쪽",
        "byrobot_petrone_v2_common_roll": "Roll",
        "byrobot_petrone_v2_common_throttle": "Throttle",
        "byrobot_petrone_v2_common_yaw": "Yaw",
        "byrobot_petrone_v2_controller_button_bottom_left": "왼쪽 둥근 버튼",
        "byrobot_petrone_v2_controller_button_bottom_left_right": "양쪽 둥근 버튼",
        "byrobot_petrone_v2_controller_button_bottom_right": "오른쪽 둥근 버튼",
        "byrobot_petrone_v2_controller_button_button": "버튼",
        "byrobot_petrone_v2_controller_button_center_down": "트림 뒤 버튼",
        "byrobot_petrone_v2_controller_button_center_left": "트림 왼쪽 버튼",
        "byrobot_petrone_v2_controller_button_center_right": "트림 오른쪽 버튼",
        "byrobot_petrone_v2_controller_button_center_up": "트림 앞 버튼",
        "byrobot_petrone_v2_controller_button_center_up_left": "트림 좌회전 버튼",
        "byrobot_petrone_v2_controller_button_center_up_right": "트림 우회전 버튼",
        "byrobot_petrone_v2_controller_button_event": "버튼 이벤트",
        "byrobot_petrone_v2_controller_button_front_left": "왼쪽 빨간 버튼",
        "byrobot_petrone_v2_controller_button_front_left_right": "양쪽 빨간 버튼",
        "byrobot_petrone_v2_controller_button_front_right": "오른쪽 빨간 버튼",
        "byrobot_petrone_v2_controller_buzzer": "버저",
        "byrobot_petrone_v2_controller_buzzer_a": "라",
        "byrobot_petrone_v2_controller_buzzer_as": "라#",
        "byrobot_petrone_v2_controller_buzzer_b": "시",
        "byrobot_petrone_v2_controller_buzzer_c": "도",
        "byrobot_petrone_v2_controller_buzzer_cs": "도#",
        "byrobot_petrone_v2_controller_buzzer_d": "레",
        "byrobot_petrone_v2_controller_buzzer_ds": "레#",
        "byrobot_petrone_v2_controller_buzzer_e": "미",
        "byrobot_petrone_v2_controller_buzzer_f": "파",
        "byrobot_petrone_v2_controller_buzzer_fs": "파#",
        "byrobot_petrone_v2_controller_buzzer_g": "솔",
        "byrobot_petrone_v2_controller_buzzer_gs": "솔#",
        "byrobot_petrone_v2_controller_buzzer_mute": "쉼",
        "byrobot_petrone_v2_controller_display_align_center": "가운데",
        "byrobot_petrone_v2_controller_display_align_left": "왼쪽",
        "byrobot_petrone_v2_controller_display_align_right": "오른쪽",
        "byrobot_petrone_v2_controller_display_flagfill_off": "채우지 않음",
        "byrobot_petrone_v2_controller_display_flagfill_on": "채움",
        "byrobot_petrone_v2_controller_display_font_10x16": "큼",
        "byrobot_petrone_v2_controller_display_font_5x8": "작음",
        "byrobot_petrone_v2_controller_display_line_dashed": "파선",
        "byrobot_petrone_v2_controller_display_line_dotted": "점선",
        "byrobot_petrone_v2_controller_display_line_solid": "실선",
        "byrobot_petrone_v2_controller_display_pixel_black": "검은색",
        "byrobot_petrone_v2_controller_display_pixel_white": "흰색",
        "byrobot_petrone_v2_controller_joystick_direction_center": "중앙",
        "byrobot_petrone_v2_controller_joystick_direction_down": "아래",
        "byrobot_petrone_v2_controller_joystick_direction_left": "왼쪽",
        "byrobot_petrone_v2_controller_joystick_direction_left_down": "왼쪽 아래",
        "byrobot_petrone_v2_controller_joystick_direction_left_up": "왼쪽 위",
        "byrobot_petrone_v2_controller_joystick_direction_right": "오른쪽",
        "byrobot_petrone_v2_controller_joystick_direction_right_down": "오른쪽 아래",
        "byrobot_petrone_v2_controller_joystick_direction_right_up": "오른쪽 위",
        "byrobot_petrone_v2_controller_joystick_direction_up": "위",
        "byrobot_petrone_v2_controller_joystick_left_direction": "왼쪽 조이스틱 방향",
        "byrobot_petrone_v2_controller_joystick_left_event": "왼쪽 조이스틱 이벤트",
        "byrobot_petrone_v2_controller_joystick_left_x": "왼쪽 조이스틱 가로축",
        "byrobot_petrone_v2_controller_joystick_left_y": "왼쪽 조이스틱 세로축",
        "byrobot_petrone_v2_controller_joystick_right_direction": "오른쪽 조이스틱 방향",
        "byrobot_petrone_v2_controller_joystick_right_event": "오른쪽 조이스틱 이벤트",
        "byrobot_petrone_v2_controller_joystick_right_x": "오른쪽 조이스틱 가로축",
        "byrobot_petrone_v2_controller_joystick_right_y": "오른쪽 조이스틱 세로축",
        "byrobot_petrone_v2_entryhw_count_transfer_reserved": "전송 예약된 데이터 수",
        "byrobot_petrone_v2_drone_accel_x": "가속도 x",
        "byrobot_petrone_v2_drone_accel_y": "가속도 y",
        "byrobot_petrone_v2_drone_accel_z": "가속도 z",
        "byrobot_petrone_v2_drone_attitude_pitch": "자세 Pitch",
        "byrobot_petrone_v2_drone_attitude_roll": "자세 Roll",
        "byrobot_petrone_v2_drone_attitude_yaw": "자세 Yaw",
        "byrobot_petrone_v2_drone_control_double_accel_forward": "전진/후진",
        "byrobot_petrone_v2_drone_control_double_wheel": "방향",
        "byrobot_petrone_v2_drone_control_double_wheel_left": "왼쪽 회전",
        "byrobot_petrone_v2_drone_control_double_wheel_right": "오른쪽 회전",
        "byrobot_petrone_v2_drone_control_quad_pitch": "Pitch",
        "byrobot_petrone_v2_drone_control_quad_pitch_backward": "뒤로",
        "byrobot_petrone_v2_drone_control_quad_pitch_forward": "앞으로",
        "byrobot_petrone_v2_drone_control_quad_roll": "Roll",
        "byrobot_petrone_v2_drone_control_quad_roll_left": "왼쪽",
        "byrobot_petrone_v2_drone_control_quad_roll_right": "오른쪽",
        "byrobot_petrone_v2_drone_control_quad_throttle": "Throttle",
        "byrobot_petrone_v2_drone_control_quad_throttle_down": "아래",
        "byrobot_petrone_v2_drone_control_quad_throttle_up": "위",
        "byrobot_petrone_v2_drone_control_quad_yaw": "Yaw",
        "byrobot_petrone_v2_drone_control_quad_yaw_left": "왼쪽 회전",
        "byrobot_petrone_v2_drone_control_quad_yaw_right": "오른쪽 회전",
        "byrobot_petrone_v2_drone_coordinate_local": "off (숙련자용)",
        "byrobot_petrone_v2_drone_coordinate_world": "on (초보자용)",
        "byrobot_petrone_v2_drone_gyro_pitch": "각속도 Pitch",
        "byrobot_petrone_v2_drone_gyro_roll": "각속도 Roll",
        "byrobot_petrone_v2_drone_gyro_yaw": "각속도 Yaw",
        "byrobot_petrone_v2_drone_imageflow_positionX": "image flow X",
        "byrobot_petrone_v2_drone_imageflow_positionY": "image flow Y",
        "byrobot_petrone_v2_drone_irmessage": "적외선 수신 값",
        "byrobot_petrone_v2_drone_irmessage_direction": "적외선 수신 방향",
        "byrobot_petrone_v2_drone_irmessage_direction_front": "앞",
        "byrobot_petrone_v2_drone_irmessage_direction_rear": "뒤",
        "byrobot_petrone_v2_drone_light_color_arm": "팔",
        "byrobot_petrone_v2_drone_light_color_eye": "눈",
        "byrobot_petrone_v2_drone_light_manual_arm_blue": "팔 파랑",
        "byrobot_petrone_v2_drone_light_manual_arm_green": "팔 초록",
        "byrobot_petrone_v2_drone_light_manual_arm_red": "팔 빨강",
        "byrobot_petrone_v2_drone_light_manual_eye_blue": "눈 파랑",
        "byrobot_petrone_v2_drone_light_manual_eye_green": "눈 초록",
        "byrobot_petrone_v2_drone_light_manual_eye_red": "눈 빨강",
        "byrobot_petrone_v2_drone_motor_rotation_clockwise": "시계 방향",
        "byrobot_petrone_v2_drone_motor_rotation_counterclockwise": "반시계 방향",
        "byrobot_petrone_v2_drone_pressure_pressure": "해발고도",
        "byrobot_petrone_v2_drone_pressure_temperature": "온도",
        "byrobot_petrone_v2_drone_range_bottom": "바닥까지 거리",
        "byrobot_petrone_v2_drone_state_battery": "배터리",
        "byrobot_petrone_v2_drone_state_mode_coordinate": "기본 좌표계",
        "byrobot_petrone_v2_drone_state_mode_drive": "자동차 동작 상태",
        "byrobot_petrone_v2_drone_state_mode_flight": "비행 동작 상태",
        "byrobot_petrone_v2_drone_state_mode_system": "시스템 모드",
        "byrobot_petrone_v2_drone_state_mode_vehicle": "Vehicle mode",
        "byrobot_petrone_v2_drone_team": "팀 ",
        "byrobot_petrone_v2_drone_team_blue": "블루",
        "byrobot_petrone_v2_drone_team_red": "레드",
        "byrobot_petrone_v2_drone_vehicle_drive": "자동차",
        "byrobot_petrone_v2_drone_vehicle_drive_fpv": "자동차(FPV)",
        "byrobot_petrone_v2_drone_vehicle_flight": "드론(가드 포함)",
        "byrobot_petrone_v2_drone_vehicle_flight_fpv": "드론(FPV)",
        "byrobot_petrone_v2_drone_vehicle_flight_noguard": "드론(가드 없음)",
        "ROBOID_sensor_signal_strength_dbm": "신호 세기 (dBm)",
        "ROBOID_sensor_input_sa": "입력 Sa",
        "ROBOID_sensor_input_sb": "입력 Sb",
        "ROBOID_sensor_input_sc": "입력 Sc",
        "ROBOID_sensor_input_la": "입력 La",
        "ROBOID_sensor_input_lb": "입력 Lb",
        "ROBOID_sensor_input_lc": "입력 Lc",
        "ROBOID_sensor_step_count": "스텝 수",
        "ROBOID_monitor_output_sa": "출력 Sa",
        "ROBOID_monitor_output_sb": "출력 Sb",
        "ROBOID_monitor_output_sc": "출력 Sc",
        "ROBOID_monitor_output_la": "출력 La",
        "ROBOID_monitor_output_lb": "출력 Lb",
        "ROBOID_monitor_output_lc": "출력 Lc",
        "ROBOID_monitor_output_mab": "출력 Mab",
        "ROBOID_monitor_output_mcd": "출력 Mcd",
        "ROBOID_logo_sky_direction": "로고가 하늘 방향",
        "ROBOID_logo_earth_direction": "로고가 땅 방향",
        "ROBOID_power_switch_sky_direction": "전원 스위치가 하늘 방향",
        "ROBOID_power_switch_earth_direction": "전원 스위치가 땅 방향",
        "ROBOID_port_s_sky_direction": "포트 S가 하늘 방향",
        "ROBOID_port_s_earth_direction": "포트 S가 땅 방향",
        "ROBOID_speaker_internal": "내부 스피커",
        "ROBOID_speaker_port_mab": "포트 Mab",
        "ROBOID_io_mode_makey": "메이키",
        "ROBOID_io_mode_button": "버튼",
        "ROBOID_io_mode_digital_pull_up": "디지털 (풀업)",
        "ROBOID_io_mode_digital_pull_down": "디지털 (풀다운)",
        "ROBOID_io_mode_analog": "아날로그",
        "ROBOID_io_mode_voltage": "전압",
        "ROBOID_io_mode_pulse": "펄스",
        "ROBOID_io_mode_pulse_pull_up": "펄스 (풀업)",
        "ROBOID_io_mode_pulse_pull_down": "펄스 (풀다운)",
        "ROBOID_io_mode_normal": "기본",
        "ROBOID_io_mode_power": "파워",
        "ROBOID_io_port_high_current_mab": "고전류 Ma(-)b",
        "ROBOID_io_port_high_current_mcd": "고전류 Mc(-)d",
        "ROBOID_io_action_stop": "정지하기",
        "ROBOID_io_action_turn_off": "전원 끄기",
        "ROBOID_range_integer": "없음",
        "ROBOID_range_real": "있음",
        "ROBOID_led_intensity_dark": "어두운",
        "ROBOID_led_intensity_normal": "기본",
        "ROBOID_led_intensity_bright": "밝은",
        "ROBOID_led_type_default": "기본",
        "ROBOID_led_type_crgb": "-RGB",
        "ROBOID_led_type_crbg": "-RBG",
        "ROBOID_led_type_cgrb": "-GRB",
        "ROBOID_led_type_cgbr": "-GBR",
        "ROBOID_led_type_cbrg": "-BRG",
        "ROBOID_led_type_cbgr": "-BGR",
        "ROBOID_led_type_argb": "+RGB",
        "ROBOID_led_type_arbg": "+RBG",
        "ROBOID_led_type_agrb": "+GRB",
        "ROBOID_led_type_agbr": "+GBR",
        "ROBOID_led_type_abrg": "+BRG",
        "ROBOID_led_type_abgr": "+BGR",
        "ROBOID_neopixel_3_colors": "3색",
        "ROBOID_neopixel_6_colors": "6색",
        "ROBOID_neopixel_12_colors": "12색",
        "ROBOID_neopixel_red_green": "빨간색부터 초록색까지",
        "ROBOID_neopixel_red_blue": "빨간색부터 파란색까지",
        "ROBOID_neopixel_red_white": "빨간색부터 하얀색까지",
        "ROBOID_neopixel_green_red": "초록색부터 빨간색까지",
        "ROBOID_neopixel_green_blue": "초록색부터 파란색까지",
        "ROBOID_neopixel_green_white": "초록색부터 하얀색까지",
        "ROBOID_neopixel_blue_red": "파란색부터 빨간색까지",
        "ROBOID_neopixel_blue_green": "파란색부터 초록색까지",
        "ROBOID_neopixel_blue_white": "파란색부터 하얀색까지",
        "ROBOID_neopixel_white_red": "하얀색부터 빨간색까지",
        "ROBOID_neopixel_white_green": "하얀색부터 초록색까지",
        "ROBOID_neopixel_white_blue": "하얀색부터 파란색까지",
        "ROBOID_neopixel_red_black": "빨간색 점점 어둡게",
        "ROBOID_neopixel_green_black": "초록색 점점 어둡게",
        "ROBOID_neopixel_blue_black": "파란색 점점 어둡게",
        "ROBOID_neopixel_white_black": "하얀색 점점 어둡게",
        "ROBOID_neopixel_black_red": "빨간색 점점 밝게",
        "ROBOID_neopixel_black_green": "초록색 점점 밝게",
        "ROBOID_neopixel_black_blue": "파란색 점점 밝게",
        "ROBOID_neopixel_black_white": "하얀색 점점 밝게",
        "ROBOID_serial_string": "글자",
        "ROBOID_serial_string_line": "글자 한 줄",
        "ROBOID_serial_all": "모두",
        "ROBOID_serial_until_comma": ",(쉼표)까지",
        "ROBOID_serial_until_colon": ":(쌍점)까지",
        "ROBOID_serial_until_dollar": "$까지",
        "ROBOID_serial_until_sharp": "#까지",
        "ROBOID_serial_until_new_line": "줄 바꿈까지",
        "ROBOID_serial_port_wa_rb": "La(쓰기) Lb(읽기)",
        "ROBOID_serial_port_ra_wb": "La(읽기) Lb(쓰기)",
        "ROBOID_serial_port_wa": "La(쓰기)",
        "ROBOID_serial_port_ra": "La(읽기)",
        "ROBOID_pid_10": "PID-10 초음파 센서(HC-SR04+)",
        "ROBOID_pid_11_1": "PID-11-1 온습도 센서(DHT11)",
        "ROBOID_pid_11_2": "PID-11-2 온습도 센서(DHT21)",
        "ROBOID_pid_11_3": "PID-11-3 온습도 센서(DHT22)",
        "ROBOID_pid_12": "PID-12 온도 센서(DS18B20)",
        "ROBOID_pid_13": "PID-13 조이스틱과 버튼",
        "ROBOID_pid_14": "PID-14 듀얼 조이스틱",
        "ROBOID_pid_15": "PID-15 IR 송수신기",
        "ROBOID_pid_16": "PID-16 엔코더",
        "ROBOID_pid_distance": "거리 (cm)",
        "ROBOID_pid_temperature": "온도 (℃)",
        "ROBOID_pid_humidity": "습도 (%RH)",
        "ROBOID_pid_x1": "x1",
        "ROBOID_pid_y1": "y1",
        "ROBOID_pid_x2": "x2",
        "ROBOID_pid_y2": "y2",
        "ROBOID_pid_button1": "버튼1",
        "ROBOID_pid_button2": "버튼2",
        "ROBOID_pid_encoder": "엔코더",
        "ROBOID_shape_square": "사각형",
        "ROBOID_shape_triangle": "삼각형",
        "ROBOID_shape_diamond": "다이아몬드",
        "ROBOID_shape_circle": "원",
        "ROBOID_shape_x": "X",
        "ROBOID_shape_like": "좋음",
        "ROBOID_shape_dislike": "싫음",
        "ROBOID_shape_angry": "화남",
        "ROBOID_shape_open_mouth": "입 열기",
        "ROBOID_shape_close_mouth": "입 닫기",
        "ROBOID_shape_walk1": "걷기 1",
        "ROBOID_shape_walk2": "걷기 2",
        "ROBOID_shape_heart": "하트",
        "ROBOID_shape_star": "별",
        "ROBOID_shape_airplane": "비행기",
        "ROBOID_shape_puppy": "강아지",
        "ROBOID_shape_butterfly": "나비",
        "ROBOID_shape_quarter_note": "4분 음표",
        "ROBOID_shape_eighth_note": "8분 음표",
        "ROBOID_shape_left_arrow": "왼쪽 화살표",
        "ROBOID_shape_right_arrow": "오른쪽 화살표",
        "ROBOID_shape_up_arrow": "위쪽 화살표",
        "ROBOID_shape_down_arrow": "아래쪽 화살표",
        "ROBOID_hat_background": "배경",
        "ROBOID_hat_all": "모두",
        "ROBOID_hat_clear": "지우기",
        "ROBOID_hat_show": "보이기",
        "ROBOID_hat_hide": "숨기기",
        "ROBOID_hat_clockwise": "시계",
        "ROBOID_hat_counterclockwise": "반시계",
        "ROBOID_hat_left_right": "왼쪽-오른쪽",
        "ROBOID_hat_up_down": "위-아래",
        "ROBOID_hat_auto": "자동",
        "ROBOID_hat_manual": "수동",
        "ROBOID_hat_other_sprite": "다른 그림",
        "ROBOID_hat_left_wall": "왼쪽 벽",
        "ROBOID_hat_right_wall": "오른쪽 벽",
        "ROBOID_hat_top_wall": "위쪽 벽",
        "ROBOID_hat_bottom_wall": "아래쪽 벽",
        "ROBOID_hat_any_wall": "아무 벽",
        "choco_move_step": "칸",
        "choco_move_cm": "cm",
        "choco_trun_drgree": "도",
        "choco_trun_round": "바퀴",
        "choco_toggle_on": "켜기",
        "choco_toggle_off": "끄기",
        "choco_direction_right": "오른쪽",
        "choco_direction_left": "왼쪽",
        "choco_direction_dual": "양쪽(오른쪽,왼쪽)",
        "choco_color_off": "끄기",
        "choco_color_blue": "파란색",
        "choco_color_red": "빨간색",
        "choco_color_green": "초록색",
        "choco_color_yellow": "노랑색",
        "choco_color_pink": "분홍색",
        "choco_color_bluegreen": "청록색",
        "choco_color_white": "흰색",
        "choco_sound_car": "자동차",
        "choco_sound_robot": "로봇",
        "choco_sound_dog": "강아지",
        "choco_sound_cat": "고양이",
        "choco_sound_chicken": "닭",
        "choco_sound_tiger": "호랑이",
        "choco_sound_lion": "사자",
        "choco_sound_fart": "방귀소리",
        "choco_sound_helicopter": "헬리콥터",
        "choco_sound_train": "기차",
        "choco_sound_frog": "개구리",
        "choco_sound_jjajan": "짜잔(효과음)",
        "choco_sound_sheep": "양",
        "choco_sound_elephant": "코끼리",
        "choco_sound_camel": "낙타",
        "choco_sound_dolphin": "고래",
        "choco_sound_ttiyong": "띠용(효과음)",
        "choco_sound_hello_parrot": "헬로(앵무새)",
        "choco_sound_hello_manga": "헬로(만화)",
        "choco_sound_hello_man": "헬로(남자)",
        "choco_sound_ppong": "뽕(효과음)",
        "choco_sound_buzzer": "부저(효과음)",
        "choco_sound_ttalilalan": "따라리라란~(효과음)",
        "choco_sound_ttattattatta": "따따따따~(효과음)",
        "choco_sound_laughter": "웃음소리",
        "choco_sound_magic": "마술(효과음)",
        "choco_sound_woodpecker": "딱다구리",
        "choco_sound_bird": "새",
        "choco_sound_burp": "트림",
        "choco_sound_hiccup": "딸국질",
        "choco_sound_doridori": "도리도리",
        "choco_sound_firetruck": "소방차",
        "choco_sound_police_car": "경찰차",
        "choco_sound_applause": "박수환호",
        "choco_sound_kiss": "뽀뽀",
        "choco_sound_missile": "미사일",
        "choco_sound_angry_duck": "화난오리",
        "choco_sound_fly": "파리",
        "choco_sound_ufo": "UFO",
        "choco_sound_fanfare": "팡파레",
        "choco_sound_sigh": "한숨소리",
        "choco_sound_alright": "올라잇~",
        "choco_sound_genius": "지니어스~",
        "choco_sound_no": "노우~",
        "choco_sound_wow": "오우~",
        "choco_sound_yahoo": "야호~",
        "coconut_stop_motor": "모터 정지",
        "coconut_move_motor": "움직이기",
        "coconut_turn_motor": "으로 돌기",
        "coconut_move_outmotor": "외부모터",
        "coconut_move_speed_1": "0",
        "coconut_move_speed_2": "50",
        "coconut_move_speed_3": "100",
        "coconut_move_speed_4": "150",
        "coconut_move_speed_5": "255",
        "coconut_color_black": "검은색",
        "coconut_beep": "삐 소리내기",
        "coconut_clear_buzzer": "버저 끄기",
        "CODEino_get_sensor_number_0": "0",
        "CODEino_get_sensor_number_1": "1",
        "CODEino_get_sensor_number_2": "2",
        "CODEino_get_sensor_number_3": "3",
        "CODEino_get_sensor_number_4": "4",
        "CODEino_get_sensor_number_5": "5",
        "CODEino_get_sensor_number_6": "6",
        "CODEino_string_1": " 센서값 ",
        "CODEino_string_2": " 보드의 ",
        "CODEino_string_8": " 3축 가속도센서 ",
        "CODEino_string_9": "축의 센서값 ",
        "CODEino_string_10": "소리센서 ",
        "CODEino_string_13": "빛센서 ",
        "CODEino_accelerometer_X": "X",
        "CODEino_accelerometer_Y": "Y",
        "CODEino_accelerometer_Z": "Z",
        "CBX_LED_ON": "켜짐",
        "CBX_LED_OFF": "꺼짐",
        "CBX_DCM_FORWARD": "정회전",
        "CBX_DCM_BACKWARD": "역회전",
        "CBX_DCM_SPEED_MAX": "최대속도",
        "CBX_DCM_SPEED_STOP": "정지",
        "cp_moving_set_on": "켜기",
        "cp_moving_set_off": "끄기",
        "cp_moving_color_red": "빨간",
        "cp_moving_color_green": "초록",
        "cp_moving_color_blue": "파란",
        "cp_moving_color_teal": "청록",
        "cp_moving_color_pink": "분홍",
        "cp_moving_color_yellow": "노란",
        "cp_moving_color_white": "하얀",
        "cp_moving_motor_left": "왼쪽",
        "cp_moving_motor_right": "오른쪽",
        "cp_moving_motor_forward": "정방향",
        "cp_moving_motor_reverse": "역방향",
        "cp_moving_move_forward": "전진",
        "cp_moving_move_backward": "후진",
        "cp_moving_move_left": "좌회전",
        "cp_moving_move_right": "우회전",
        "cp_moving_buzzer_hn": "2분음표",
        "cp_moving_buzzer_qn": "4분음표",
        "cp_moving_buzzer_en": "8분음표",
        "cp_moving_buzzer_sn": "16분음표",
        "cp_moving_buzzer_tn": "32분음표",
        "cp_moving_buzzer_wn": "온음표",
        "cp_moving_joystick_center": "가운데",
        "cp_moving_joystick_down": "아래",
        "cp_moving_joystick_left": "왼쪽",
        "cp_moving_joystick_left_down": "왼쪽 아래",
        "cp_moving_joystick_left_up": "왼쪽 위",
        "cp_moving_joystick_right": "오른쪽",
        "cp_moving_joystick_right_down": "오른쪽 아래",
        "cp_moving_joystick_right_up": "오른쪽 위",
        "cp_moving_joystick_up": "위",
        "cp_moving_button_red": "빨강",
        "cp_moving_button_blue": "파랑",
        "cp_moving_ir_left": "왼쪽",
        "cp_moving_ir_right": "오른쪽",
        "GreenColor": "초록색",
        "BlueColor": "파랑색",
        "YellowColor": "노랑색",
        "RedColor": "빨강색",
        "GreenButton": "초록 버튼",
        "BlueButton": "파랑 버튼",
        "YellowButton": "노랑 버튼",
        "RedButton": "빨강 버튼",
        "FUNBOARD_led_color_str": "색",
        "FUNBOARD_led_off_str": "LED 끄기",
        "FUNBOARD_led_on_str": "LED 켜기",
        "funboard_dotmatrix_set_off": "끄기",
        "funboard_dotmatrix_set_on": "켜기",
        "HAMSTER_hand_found": "손 찾음?",
        "HAMSTER_move_forward_once": "말판 앞으로 한 칸 이동하기",
        "HAMSTER_turn_once_1": "말판",
        "HAMSTER_turn_once_2": "으로 한 번 돌기",
        "HAMSTER_move_forward": "앞으로 이동하기",
        "HAMSTER_move_backward": "뒤로 이동하기",
        "HAMSTER_turn_around_1": "",
        "HAMSTER_turn_around_2": "으로 돌기",
        "HAMSTER_move_forward_for_secs_1": "앞으로",
        "HAMSTER_move_forward_for_secs_2": "초 이동하기",
        "HAMSTER_move_backward_for_secs_1": "뒤로",
        "HAMSTER_move_backward_for_secs_2": "초 이동하기",
        "HAMSTER_turn_for_secs_1": "",
        "HAMSTER_turn_for_secs_2": "으로",
        "HAMSTER_turn_for_secs_3": "초 돌기",
        "HAMSTER_change_both_wheels_by_1": "왼쪽 바퀴",
        "HAMSTER_change_both_wheels_by_2": "오른쪽 바퀴",
        "HAMSTER_change_both_wheels_by_3": "만큼 바꾸기",
        "HAMSTER_set_both_wheels_to_1": "왼쪽 바퀴",
        "HAMSTER_set_both_wheels_to_2": "오른쪽 바퀴",
        "HAMSTER_set_both_wheels_to_3": "(으)로 정하기",
        "HAMSTER_change_wheel_by_1": "",
        "HAMSTER_change_wheel_by_2": "바퀴",
        "HAMSTER_change_wheel_by_3": "만큼 바꾸기",
        "HAMSTER_set_wheel_to_1": "",
        "HAMSTER_set_wheel_to_2": "바퀴",
        "HAMSTER_set_wheel_to_3": "(으)로 정하기",
        "HAMSTER_follow_line_using_1": "",
        "HAMSTER_follow_line_using_2": "선을",
        "HAMSTER_follow_line_using_3": "바닥 센서로 따라가기",
        "HAMSTER_follow_line_until_1": "",
        "HAMSTER_follow_line_until_2": "선을 따라",
        "HAMSTER_follow_line_until_3": "교차로까지 이동하기",
        "HAMSTER_left_intersection": "왼쪽",
        "HAMSTER_right_intersection": "오른쪽",
        "HAMSTER_front_intersection": "앞쪽",
        "HAMSTER_rear_intersection": "뒤쪽",
        "HAMSTER_set_following_speed_to_1": "선 따라가기 속도를",
        "HAMSTER_set_following_speed_to_2": "(으)로 정하기",
        "HAMSTER_stop": "정지하기",
        "HAMSTER_set_led_to_1": "",
        "HAMSTER_set_led_to_2": "LED를",
        "HAMSTER_set_led_to_3": "으로 정하기",
        "HAMSTER_clear_led_1": "",
        "HAMSTER_clear_led_2": "LED 끄기",
        "HAMSTER_beep": "삐 소리내기",
        "HAMSTER_change_buzzer_by_1": "버저 음을",
        "HAMSTER_change_buzzer_by_2": "만큼 바꾸기",
        "HAMSTER_set_buzzer_to_1": "버저 음을",
        "HAMSTER_set_buzzer_to_2": "(으)로 정하기",
        "HAMSTER_clear_buzzer": "버저 끄기",
        "HAMSTER_play_note_for_1": "",
        "HAMSTER_play_note_for_2": "",
        "HAMSTER_play_note_for_3": "음을",
        "HAMSTER_play_note_for_4": "박자 연주하기",
        "HAMSTER_rest_for_1": "",
        "HAMSTER_rest_for_2": "박자 쉬기",
        "HAMSTER_change_tempo_by_1": "연주 속도를",
        "HAMSTER_change_tempo_by_2": "만큼 바꾸기",
        "HAMSTER_set_tempo_to_1": "연주 속도를 분당",
        "HAMSTER_set_tempo_to_2": "박자로 정하기",
        "HAMSTER_set_port_to_1": "포트",
        "HAMSTER_set_port_to_2": "를",
        "HAMSTER_set_port_to_3": "으로 정하기",
        "HAMSTER_change_output_by_1": "출력",
        "HAMSTER_change_output_by_2": "를",
        "HAMSTER_change_output_by_3": "만큼 바꾸기",
        "HAMSTER_set_output_to_1": "출력",
        "HAMSTER_set_output_to_2": "를",
        "HAMSTER_set_output_to_3": "(으)로 정하기",
        "hamster_note_c": "도",
        "hamster_note_c_sharp": "도♯(레♭)",
        "hamster_note_d": "레",
        "hamster_note_d_sharp": "레♯(미♭)",
        "hamster_note_e": "미",
        "hamster_note_f": "파",
        "hamster_note_f_sharp": "파♯(솔♭)",
        "hamster_note_g": "솔",
        "hamster_note_g_sharp": "솔♯(라♭)",
        "hamster_note_a": "라",
        "hamster_note_a_sharp": "라♯(시♭)",
        "hamster_note_b": "시",
        "hamster_tilt_forward": "앞으로 기울임",
        "hamster_tilt_backward": "뒤로 기울임",
        "hamster_tilt_left": "왼쪽으로 기울임",
        "hamster_tilt_right": "오른쪽으로 기울임",
        "hamster_tilt_flip": "거꾸로 뒤집음",
        "hamster_tilt_not": "기울이지 않음",
        "hamster_battery_normal": "배터리 정상",
        "hamster_battery_low": "배터리 부족",
        "hamster_battery_empty": "배터리 없음",
        "hamster_open_gripper": "열기",
        "hamster_close_gripper": "닫기",
        "hamster_s_color_black": "검은색",
        "hamster_s_color_blue": "파란색",
        "hamster_s_color_green": "초록색",
        "hamster_s_color_orange": "주황색",
        "hamster_s_color_purple": "자주색",
        "hamster_s_color_red": "빨간색",
        "hamster_s_color_sky_blue": "하늘색",
        "hamster_s_color_violet": "보라색",
        "hamster_s_color_white": "하얀색",
        "hamster_s_color_yellow": "노란색",
        "hamster_s_left": "왼쪽",
        "hamster_s_right": "오른쪽",
        "hamster_s_both": "양쪽",
        "hamster_s_note_c": "도",
        "hamster_s_note_c_sharp": "도♯(레♭)",
        "hamster_s_note_d": "레",
        "hamster_s_note_d_sharp": "레♯(미♭)",
        "hamster_s_note_e": "미",
        "hamster_s_note_f": "파",
        "hamster_s_note_f_sharp": "파♯(솔♭)",
        "hamster_s_note_g": "솔",
        "hamster_s_note_g_sharp": "솔♯(라♭)",
        "hamster_s_note_a": "라",
        "hamster_s_note_a_sharp": "라♯(시♭)",
        "hamster_s_note_b": "시",
        "hamster_s_port_a": "A",
        "hamster_s_port_b": "B",
        "hamster_s_port_ab": "A와 B",
        "hamster_s_tilt_forward": "앞으로 기울임",
        "hamster_s_tilt_backward": "뒤로 기울임",
        "hamster_s_tilt_left": "왼쪽으로 기울임",
        "hamster_s_tilt_right": "오른쪽으로 기울임",
        "hamster_s_tilt_flip": "거꾸로 뒤집음",
        "hamster_s_tilt_not": "기울이지 않음",
        "hamster_s_tap": "두드림",
        "hamster_s_free_fall": "자유 낙하",
        "hamster_s_battery_normal": "배터리 정상",
        "hamster_s_battery_low": "배터리 부족",
        "hamster_s_battery_empty": "배터리 없음",
        "hamster_s_forward": "앞쪽",
        "hamster_s_backward": "뒤쪽",
        "hamster_s_front": "앞쪽",
        "hamster_s_rear": "뒤쪽",
        "hamster_s_left_pen": "왼쪽 펜",
        "hamster_s_right_pen": "오른쪽 펜",
        "hamster_s_left_wheel": "왼쪽 바퀴",
        "hamster_s_right_wheel": "오른쪽 바퀴",
        "hamster_s_robot": "로봇",
        "hamster_s_gain_default": "기본 값",
        "hamster_s_sensor_acceleration_x": "x축 가속도",
        "hamster_s_sensor_acceleration_y": "y축 가속도",
        "hamster_s_sensor_acceleration_z": "z축 가속도",
        "hamster_s_sensor_input_a": "입력 A",
        "hamster_s_sensor_input_b": "입력 B",
        "hamster_s_sensor_left_floor": "왼쪽 바닥 센서",
        "hamster_s_sensor_left_proximity": "왼쪽 근접 센서",
        "hamster_s_sensor_light": "밝기",
        "hamster_s_sensor_right_floor": "오른쪽 바닥 센서",
        "hamster_s_sensor_right_proximity": "오른쪽 근접 센서",
        "hamster_s_sensor_signal_strength": "신호 세기",
        "hamster_s_sensor_temperature": "온도",
        "hamster_s_buzzer": "버저",
        "hamster_s_left_led": "왼쪽 LED",
        "hamster_s_note": "음표",
        "hamster_s_output_a": "출력 A",
        "hamster_s_output_b": "출력 B",
        "hamster_s_right_led": "오른쪽 LED",
        "hamster_s_sound_angry": "화남",
        "hamster_s_sound_beep": "삐",
        "hamster_s_sound_birthday": "생일",
        "hamster_s_sound_chop": "쩝",
        "hamster_s_sound_dibidibidip": "디비디비딥",
        "hamster_s_sound_engine": "엔진",
        "hamster_s_sound_good_job": "잘 했어요",
        "hamster_s_sound_happy": "행복",
        "hamster_s_sound_march": "행진",
        "hamster_s_sound_noise": "지지직",
        "hamster_s_sound_random_beep": "무작위 삐",
        "hamster_s_sound_robot": "로봇",
        "hamster_s_sound_sad": "슬픔",
        "hamster_s_sound_siren": "사이렌",
        "hamster_s_sound_sleep": "졸림",
        "hamster_s_unit_cm": "cm",
        "hamster_s_unit_deg": "도",
        "hamster_s_unit_pulse": "펄스",
        "hamster_s_unit_sec": "초",
        "hamster_s_analog_input": "아날로그 입력",
        "hamster_s_digital_input": "디지털 입력",
        "hamster_s_digital_input_pull_down": "디지털 입력 (풀다운)",
        "hamster_s_digital_input_pull_up": "디지털 입력 (풀업)",
        "hamster_s_digital_output": "디지털 출력",
        "hamster_s_pwm_output": "PWM 출력",
        "hamster_s_servo_output": "서보 출력",
        "hamster_s_voltage_input": "전압 입력",
        "hamster_s_open_gripper": "열기",
        "hamster_s_close_gripper": "닫기",
        "hamster_s_serial_string": "글자",
        "hamster_s_serial_string_line": "글자 한 줄",
        "hamster_s_serial_all": "모두",
        "hamster_s_serial_until_new_line": "줄 바꿈까지",
        "hamster_s_serial_until_comma": ",(쉼표)까지",
        "hamster_s_serial_until_colon": ":(쌍점)까지",
        "hamster_s_serial_until_dollar": "$까지",
        "hamster_s_serial_until_sharp": "#까지",
        "hamster_s_serial_input": "시리얼 입력",
        "iboard_analog_number_0": "A0",
        "iboard_analog_number_1": "A1",
        "iboard_analog_number_2": "A2",
        "iboard_analog_number_3": "A3",
        "iboard_analog_number_4": "A4",
        "iboard_analog_number_5": "A5",
        "iboard_light": "빛센서가 ",
        "iboard_num_pin_1": "LED 상태를",
        "iboard_num_pin_2": "번 스위치가",
        "iboard_num_pin_3": "아날로그",
        "iboard_num_pin_4": "번 ",
        "iboard_num_pin_5": "센서값",
        "iboard_string_1": "켜짐",
        "iboard_string_2": "꺼짐",
        "iboard_string_3": "밝음",
        "iboard_string_4": "어두움",
        "iboard_string_5": "눌림",
        "iboard_string_6": "열림",
        "iboard_switch": "스위치 ",
        "iboard_tilt": "기울기센서 상태가",
        "On_block": "켜짐(HIGH, 5V)",
        "Off_block": "꺼짐(LOW, 0V)",
        "AllOn_block": "모두 켜짐",
        "AllOff_block": "모두 꺼짐",
        "RGB_red": "빨강색",
        "RGB_blue": "파란색",
        "RGB_green": "초록색",
        "RGB_white": "하얀색",
        "RGB_skyblue": "하늘색",
        "RGB_yellow": "노란색",
        "RGB_purple": "보라색",
        "RGB_off": "끄기",
        "kamibot_toggle_on": "켜기",
        "kamibot_toggle_off": "끄기",
        "kamibot_color_red": "빨강",
        "kamibot_color_pink": "분홍",
        "kamibot_color_blue": "파랑",
        "kamibot_color_sky": "하늘",
        "kamibot_color_green": "초록",
        "kamibot_color_yellow": "노랑",
        "kamibot_color_white": "하양",
        "microbit_ext_acc_xaxis": "x축",
        "microbit_ext_acc_yaxis": "y축",
        "microbit_ext_acc_zaxis": "z축",
        "microbit_ext_acc_strength": "크기",
        "microbit_ext_tilt_right": "오른쪽",
        "microbit_ext_tilt_left": "왼쪽",
        "microbit_ext_tilt_rear": "뒤쪽",
        "microbit_ext_tilt_front": "앞쪽",
        "microbit_ext_sensor_temperature": "온도",
        "microbit_ext_sensor_compass": "자기",
        "microbit_ext_sensor_light": "빛",
        "microbit_ext_tone_b": "시",
        "microbit_ext_tone_a_sharp": "라#",
        "microbit_ext_tone_a": "라",
        "microbit_ext_tone_g_sharp": "솔#",
        "microbit_ext_tone_g": "솔",
        "microbit_ext_tone_f_sharp": "파#",
        "microbit_ext_tone_f": "파",
        "microbit_ext_tone_e": "미",
        "microbit_ext_tone_d_sharp": "레#",
        "microbit_ext_tone_d": "레",
        "microbit_ext_tone_c_sharp": "도#",
        "microbit_ext_tone_c": "도",
        "microbit_ext_tone_high": "높은",
        "microbit_ext_tone_middle": "",
        "microbit_ext_tone_low": "낮은",
        "microbit_ext_image_target": "표적",
        "microbit_ext_image_rake": "갈퀴",
        "microbit_ext_image_eighth_note": "8분 음표",
        "microbit_ext_image_quarter_note": "4분 음표",
        "microbit_ext_image_ox": "소",
        "microbit_ext_image_rabbit": "토끼",
        "microbit_ext_image_snake": "뱀",
        "microbit_ext_image_umbrella": "우산",
        "microbit_ext_image_skull": "해골",
        "microbit_ext_image_giraffe": "기린",
        "microbit_ext_image_sword": "칼",
        "microbit_ext_image_ghost": "유령",
        "microbit_ext_image_stickman": "스틱맨",
        "microbit_ext_image_butterfly": "나비",
        "microbit_ext_image_turtle": "거북이",
        "microbit_ext_image_house": "집",
        "microbit_ext_image_duck": "오리",
        "microbit_ext_image_rollerskate": "롤러스케이트",
        "microbit_ext_image_tshirt": "티셔츠",
        "microbit_ext_image_scissors": "가위",
        "microbit_ext_image_small_square": "작은 사각형",
        "microbit_ext_image_square": "사각형",
        "microbit_ext_image_small_diamond": "작은 다이아몬드",
        "microbit_ext_image_diamond": "다이아몬드",
        "microbit_ext_image_chessboard": "체스판",
        "microbit_ext_image_left_triangle": "왼쪽 삼각형",
        "microbit_ext_image_triangle": "삼각형",
        "microbit_ext_image_no": "노놉",
        "microbit_ext_image_yes": "예스",
        "microbit_ext_image_not_good": "별로",
        "microbit_ext_image_fantastic": "환상적인",
        "microbit_ext_image_fool": "바보",
        "microbit_ext_image_surprised": "놀람",
        "microbit_ext_image_sleepy": "졸림",
        "microbit_ext_image_angry": "화남",
        "microbit_ext_image_confused": "혼란",
        "microbit_ext_image_sadness": "슬픔",
        "microbit_ext_image_happiness": "행복함",
        "microbit_ext_image_small_heart": "작은 하트",
        "microbit_ext_image_heart": "하트",
        "microbit_ext_led_toggle_on": "켜기",
        "microbit_ext_led_toggle_off": "끄기",
        "microbit_ext_led_toggle_toggle": "반전",
        "microbit_ext_gesture_shake": "흔들림",
        "microbit_ext_gesture_portrait_top": "세워서 위쪽 방향",
        "microbit_ext_gesture_portrait_bottom": "세워서 아래쪽 방향",
        "microbit_ext_gesture_portrait_right": "세워서 오른쪽 방향",
        "microbit_ext_gesture_portrait_left": "세워서 왼쪽 방향",
        "microbit_ext_gesture_horizontal_top": "눕혀서 위쪽 방향",
        "microbit_ext_gesture_horizontal_bottom": "눕혀서 아래쪽 방향",
        "microbit_ext_gesture_horizontal_right": "눕혀서 오른쪽 방향",
        "microbit_ext_gesture_horizontal_left": "눕혀서 왼쪽 방향",
        "modi_speaker_F_DO_5": "도5",
        "modi_speaker_F_DO_S_5": "도#5",
        "modi_speaker_F_MI_5": "미5",
        "modi_speaker_F_PA_7": "파7",
        "modi_speaker_F_PA_S_7": "파#7",
        "modi_speaker_F_RA_7": "라7",
        "modi_speaker_F_RA_S_7": "라#7",
        "modi_speaker_F_RE_5": "레5",
        "modi_speaker_F_RE_S_5": "라#5",
        "modi_speaker_F_SOL_7": "솔7",
        "modi_speaker_F_SOL_S_7": "솔#7",
        "modi_speaker_F_SO_7": "시7",
        "neobot_port_1": "IN1",
        "neobot_port_2": "IN2",
        "neobot_port_3": "IN3",
        "neobot_port_4": "IN4",
        "neobot_port_bat": "배터리",
        "neobot_port_remot": "리모컨",
        "neobot_color_white": "흰색",
        "neobot_color_red": "빨간색",
        "neobot_color_yellow": "노란색",
        "neobot_color_green": "초록색(연두색)",
        "neobot_color_blue": "파란색",
        "neobot_direction_forward": "앞으로",
        "neobot_direction_backward": "뒤로",
        "neobot_sound_silent": "무음",
        "neobot_sound_do": "도",
        "neobot_sound_do_shop": "도#",
        "neobot_sound_re": "레",
        "neobot_sound_re_shop": "레#",
        "neobot_sound_mi": "미",
        "neobot_sound_fa": "파",
        "neobot_sound_fa_shop": "파#",
        "neobot_sound_so": "솔",
        "neobot_sound_so_shop": "솔#",
        "neobot_sound_la": "라",
        "neobot_sound_la_shop": "라#",
        "neobot_sound_ti": "시",
        "neobot_sound_half_note": "2분 음표",
        "neobot_sound_quarter_note": "4분 음표",
        "neobot_sound_eighth_note": "8븐 음표",
        "neobot_sound_sixteenth_note": "16분 음표",
        "neobot_sensor_infrared": "적외선센서",
        "neobot_sensor_light": "빛센서",
        "neobot_sensor_sound": "소리센서",
        "neobot_compare_symbol1": "＝",
        "neobot_compare_symbol2": "＞",
        "neobot_compare_symbol3": "＜",
        "neobot_compare_symbol4": "≥",
        "neobot_compare_symbol5": "≤",
        "neobot_remote_btn_a": "A",
        "neobot_remote_btn_b": "B",
        "neobot_remote_btn_c": "C",
        "neobot_remote_btn_d": "D",
        "neobot_remote_btn_1": "1",
        "neobot_remote_btn_2": "2",
        "neobot_remote_btn_3": "3",
        "neobot_remote_btn_4": "4",
        "neobot_remote_btn_up": "▲",
        "neobot_remote_btn_down": "▼",
        "neobot_remote_btn_left": "◀",
        "neobot_remote_btn_right": "▶",
        "neobot_duration_cont": "계속",
        "neobot_duration_1s": "1초",
        "neobot_duration_2s": "2초",
        "neobot_duration_3s": "3초",
        "neobot_duration_4s": "4초",
        "neobot_duration_5s": "5초",
        "neobot_duration_6s": "6초",
        "neobot_duration_7s": "7초",
        "neobot_duration_8s": "8초",
        "neobot_duration_9s": "9초",
        "neobot_motor_both": "양쪽",
        "neobot_motor_left": "왼쪽",
        "neobot_motor_right": "오른쪽",
        "neobot_motor_move_forward": "전진",
        "neobot_motor_move_backward": "후진",
        "neobot_motor_move_left": "좌회전",
        "neobot_motor_move_right": "우회전",
        "neobot_motor_move_stop": "정지",
        "neobot_servo_dir_1": "정방향",
        "neobot_servo_dir_2": "역방향",
        "neobot_percent_10": "10%속도",
        "neobot_percent_20": "20%속도",
        "neobot_percent_30": "30%속도",
        "neobot_percent_40": "40%속도",
        "neobot_percent_50": "50%속도",
        "neobot_percent_60": "60%속도",
        "neobot_percent_70": "70%속도",
        "neobot_percent_80": "80%속도",
        "neobot_percent_90": "90%속도",
        "neobot_percent_100": "100%속도",
        "neobot_degree_0": "0",
        "neobot_degree_5": "5",
        "neobot_degree_10": "10",
        "neobot_degree_15": "15",
        "neobot_degree_20": "20",
        "neobot_degree_25": "25",
        "neobot_degree_30": "30",
        "neobot_degree_35": "35",
        "neobot_degree_40": "40",
        "neobot_degree_45": "45",
        "neobot_degree_50": "50",
        "neobot_degree_55": "55",
        "neobot_degree_60": "60",
        "neobot_degree_65": "65",
        "neobot_degree_70": "70",
        "neobot_degree_75": "75",
        "neobot_degree_80": "80",
        "neobot_degree_85": "85",
        "neobot_degree_90": "90",
        "neobot_degree_95": "95",
        "neobot_degree_100": "100",
        "neobot_degree_105": "105",
        "neobot_degree_110": "110",
        "neobot_degree_115": "115",
        "neobot_degree_120": "120",
        "neobot_degree_125": "125",
        "neobot_degree_130": "130",
        "neobot_degree_135": "135",
        "neobot_degree_140": "140",
        "neobot_degree_145": "145",
        "neobot_degree_150": "150",
        "neobot_degree_155": "155",
        "neobot_degree_160": "160",
        "neobot_degree_165": "165",
        "neobot_degree_170": "170",
        "neobot_degree_175": "175",
        "neobot_degree_180": "180",
        "neobot_axis_x": "X",
        "neobot_axis_y": "Y",
        "neobot_joystick_move_1": "뒤에서 앞으로",
        "neobot_joystick_move_2": "밑에서 위로",
        "neobot_joystick_move_3": "아래 반바퀴",
        "neobot_joystick_move_4": "한 바퀴",
        "neobot_joystick_dir_right": "오른쪽",
        "neobot_joystick_dir_left": "왼쪽",
        "neobot_joystick_dir_up": "위",
        "neobot_joystick_dir_down": "아래",
        "neobot_button_a": "A",
        "neobot_button_b": "B",
        "neobot_button_c": "C",
        "neobot_gyro_dir_left": "왼쪽",
        "neobot_gyro_dir_right": "오른쪽",
        "neobot_gyro_dir_front": "앞쪽",
        "neobot_gyro_dir_rear": "뒤쪽",
        "neobot_joystick_x": "조이스틱 X",
        "neobot_joystick_y": "조이스틱 Y",
        "neobot_gyro_x": "자이로센서 X",
        "neobot_gyro_y": "자이로센서 Y",
        "neobot_compare_left_bigger": ">",
        "neobot_compare_equal": "=",
        "neobot_compare_right_bigger": "<",
        "neobot_joystick": "조이스틱",
        "neobot_gyro": "자이로센서",
        "neobot_realtime": "실시간",
        "neobot_from_distance": "거리대비",
        "neobot_joystick_coord": "조이스틱 위치",
        "neobot_gyro_coord": "자이로센서 위치",
        "neobot_rb_port_1": "1번 포트",
        "neobot_rb_port_2": "2번 포트",
        "neobot_rb_port_3": "3번 포트",
        "neobot_rb_port_4": "4번 포트",
        "neobot_rb_port_top": "윗면 포트",
        "neobot_rb_port_bottom": "바닥면 포트",
        "neobot_rb_top_face": "윗면",
        "neobot_rb_bottom_face": "바닥면",
        "neobot_rb_motor_both": "양쪽",
        "neobot_rb_motor_left": "왼쪽",
        "neobot_rb_motor_right": "오른쪽",
        "neobot_rb_motor_dir_front": "앞으로",
        "neobot_rb_motor_dir_rear": "뒤로",
        "neobot_rb_motor_dir_left": "왼쪽으로",
        "neobot_rb_motor_dir_right": "오른쪽으로",
        "neobot_rb_motor_dir_stand_left": "제자리에서 왼쪽으로",
        "neobot_rb_motor_dir_stand_right": "제자리에서 오른쪽으로",
        "neobot_rb_motor_move_forward": "전진",
        "neobot_rb_motor_move_backward": "후진",
        "neobot_rb_motor_move_left": "좌회전",
        "neobot_rb_motor_move_right": "우회전",
        "neobot_rb_motor_move_stop": "정지",
        "neobot_rb_remote_btn_a": "A",
        "neobot_rb_remote_btn_b": "B",
        "neobot_rb_remote_btn_c": "C",
        "neobot_rb_remote_btn_d": "D",
        "neobot_rb_remote_btn_1": "1",
        "neobot_rb_remote_btn_2": "2",
        "neobot_rb_remote_btn_3": "3",
        "neobot_rb_remote_btn_4": "4",
        "neobot_rb_remote_btn_up": "▲",
        "neobot_rb_remote_btn_down": "▼",
        "neobot_rb_remote_btn_left": "◀",
        "neobot_rb_remote_btn_right": "▶",
        "neobot_rb_servo_dir_1": "시계방향",
        "neobot_rb_servo_dir_2": "반시계방향",
        "neobot_st_port_1": "1번 포트",
        "neobot_st_port_2": "2번 포트",
        "neobot_st_port_3": "3번 포트",
        "neobot_st_port_4": "4번 포트",
        "neobot_st_color_white": "흰색",
        "neobot_st_color_red": "빨간색",
        "neobot_st_color_yellow": "노란색",
        "neobot_st_color_green": "초록색(연두색)",
        "neobot_st_color_blue": "파란색",
        "neobot_st_sensor_infrared": "적외선센서",
        "neobot_st_sensor_light": "빛센서",
        "neobot_st_sensor_sound": "소리센서",
        "neobot_st_compare_symbol1": "＝",
        "neobot_st_compare_symbol2": "＞",
        "neobot_st_compare_symbol3": "＜",
        "neobot_st_compare_symbol4": "≥",
        "neobot_st_compare_symbol5": "≤",
        "PALMKIT_idx0": "1",
        "PALMKIT_idx1": "2",
        "PALMKIT_idx2": "3",
        "PALMKIT_idx3": "4",
        "PALMKIT_ir": "바닥센서",
        "PALMKIT_pot": "가변저항",
        "PALMKIT_button": "버튼",
        "PALMKIT_cds": "조도센서",
        "PALMKIT_led_on": "켜기",
        "PALMKIT_led_off": "끄기",
        "PALMKIT_buzzer_note_c": "도",
        "PALMKIT_buzzer_note_cs": "도#",
        "PALMKIT_buzzer_note_d": "레",
        "PALMKIT_buzzer_note_ds": "레#",
        "PALMKIT_buzzer_note_e": "미",
        "PALMKIT_buzzer_note_f": "파",
        "PALMKIT_buzzer_note_fs": "파#",
        "PALMKIT_buzzer_note_g": "솔",
        "PALMKIT_buzzer_note_gs": "솔#",
        "PALMKIT_buzzer_note_a": "라",
        "PALMKIT_buzzer_note_as": "라#",
        "PALMKIT_buzzer_note_b": "시",
        "PALMKIT_motor_cw": "시계방향",
        "PALMKIT_motor_ccw": "반시계방향",
        "pingpong_right": "오른쪽",
        "pingpong_left": "왼쪽",
        "pingpong_rotate_cw": "시계",
        "pingpong_rotate_ccw": "반시계",
        "pingpong_sensor_proximity": "근접",
        "pingpong_sensor_ain": "아날로그",
        "pingpong_dot_on": "켜기",
        "pingpong_dot_off": "끄기",
        "pingpong_opts_cube_tiltDir": [
            ["동그라미", "F_CIRCLE"],
            ["세모", "B_TRIANGLE"],
            ["네모", "L_RECTANGLE"],
            ["별", "R_STAR"]
        ],
        "pingpong_opts_cube_dir6": [
            ["네모", "DF_RECTANGLE"],
            ["별", "DB_STAR"],
            ["세모", "DL_TRIANGLE"],
            ["동그라미", "DR_CIRCLE"],
            ["하트", "DU_HEART"],
            ["빈칸", "DD_NONE"]
        ],
        "pingpong_opts_music_notes": [
            ["라  (A3)", 45],
            ["라# (A3#)", 46],
            ["시  (B3)", 47],
            ["도  (C4)", 48],
            ["도# (C4#)", 49],
            ["레  (D4)", 50],
            ["레# (D4#)", 51],
            ["미  (E4)", 52],
            ["파  (F4)", 53],
            ["파# (F4#)", 54],
            ["솔  (G4)", 55],
            ["솔# (G4#)", 56],
            ["라  (A4)", 57],
            ["라# (A4#)", 58],
            ["시  (B4)", 59],
            ["도  (C5)", 60],
            ["도# (C5#)", 61],
            ["레  (D5)", 62],
            ["레# (D5#)", 63],
            ["미  (E5)", 64],
            ["파  (F5)", 65],
            ["파# (F5#)", 66],
            ["솔  (G5)", 67],
            ["솔# (G5#)", 68],
            ["라  (A5)", 69],
            ["라# (A5#)", 70],
            ["시  (B5)", 71],
            ["도  (C6)", 72]
        ],
        "pingpong_g2_cube_id": [
            ["1번", 0],
            ["2번", 1]
        ],
        "pingpong_g2_cube_all": [
            ["1번", 0],
            ["2번", 1],
            ["모든", -1]
        ],
        "pingpong_g3_cube_id": [
            ["1번", 0],
            ["2번", 1],
            ["3번", 2]
        ],
        "pingpong_g3_cube_all": [
            ["1번", 0],
            ["2번", 1],
            ["3번", 2],
            ["모든", -1]
        ],
        "pingpong_g4_cube_id": [
            ["1번", 0],
            ["2번", 1],
            ["3번", 2],
            ["4번", 3]
        ],
        "pingpong_g4_cube_all": [
            ["1번", 0],
            ["2번", 1],
            ["3번", 2],
            ["4번", 3],
            ["모든", -1]
        ],
        "plrun_set_on": "켜기",
        "plrun_set_off": "끄기",
        "plrun_color_red": "빨간",
        "plrun_color_green": "초록",
        "plrun_color_blue": "파란",
        "plrun_color_teal": "청록",
        "plrun_color_pink": "분홍",
        "plrun_color_yellow": "노란",
        "plrun_color_white": "하얀",
        "plrun_motor_left": "왼쪽",
        "plrun_motor_right": "오른쪽",
        "plrun_motor_forward": "정방향",
        "plrun_motor_reverse": "역방향",
        "plrun_move_forward": "전진",
        "plrun_move_backward": "후진",
        "plrun_move_left": "좌회전",
        "plrun_move_right": "우회전",
        "plrun_buzzer_hn": "2분음표",
        "plrun_buzzer_qn": "4분음표",
        "plrun_buzzer_en": "8분음표",
        "plrun_buzzer_sn": "16분음표",
        "plrun_buzzer_tn": "32분음표",
        "plrun_buzzer_wn": "온음표",
        "plrun_joystick_center": "가운데",
        "plrun_joystick_down": "아래",
        "plrun_joystick_left": "왼쪽",
        "plrun_joystick_left_down": "왼쪽 아래",
        "plrun_joystick_left_up": "왼쪽 위",
        "plrun_joystick_right": "오른쪽",
        "plrun_joystick_right_down": "오른쪽 아래",
        "plrun_joystick_right_up": "오른쪽 위",
        "plrun_joystick_up": "위",
        "plrun_button_red": "빨강",
        "plrun_button_blue": "파랑",
        "ROBOID_buzzer": "버저",
        "ROBOID_color_pattern": "색깔 패턴",
        "ROBOID_head_color": "머리 색깔",
        "ROBOID_left_wheel": "왼쪽 바퀴",
        "ROBOID_note": "음표",
        "ROBOID_right_wheel": "오른쪽 바퀴",
        "turtle_acceleration_x": "x축 가속도",
        "turtle_acceleration_y": "y축 가속도",
        "turtle_acceleration_z": "z축 가속도",
        "turtle_back": "뒤쪽",
        "turtle_both": "양쪽",
        "turtle_button": "버튼",
        "turtle_buzzer": "버저",
        "turtle_clicked": "클릭했는가",
        "turtle_color_any": "아무 색",
        "turtle_color_black": "검은색",
        "turtle_color_blue": "파란색",
        "turtle_color_green": "초록색",
        "turtle_color_number": "색깔 번호",
        "turtle_color_orange": "주황색",
        "turtle_color_pattern": "색깔 패턴",
        "turtle_color_purple": "자주색",
        "turtle_color_red": "빨간색",
        "turtle_color_sky_blue": "하늘색",
        "turtle_color_violet": "보라색",
        "turtle_color_white": "하얀색",
        "turtle_color_yellow": "노란색",
        "turtle_double_clicked": "더블클릭했는가",
        "turtle_floor": "바닥 센서",
        "turtle_head": "머리",
        "turtle_head_color": "머리 색깔",
        "turtle_left": "왼쪽",
        "turtle_left_wheel": "왼쪽 바퀴",
        "turtle_long_pressed": "길게~눌렀는가",
        "turtle_note": "음표",
        "turtle_right": "오른쪽",
        "turtle_right_wheel": "오른쪽 바퀴",
        "turtle_sound_beep": "삐",
        "turtle_sound_birthday": "생일",
        "turtle_sound_dibidibidip": "디비디비딥",
        "turtle_sound_engine": "엔진",
        "turtle_sound_good_job": "잘 했어요",
        "turtle_sound_march": "행진",
        "turtle_sound_random_beep": "무작위 삐",
        "turtle_sound_robot": "로봇",
        "turtle_sound_siren": "사이렌",
        "turtle_tail": "꼬리",
        "turtle_unit_cm": "cm",
        "turtle_unit_deg": "도",
        "turtle_unit_pulse": "펄스",
        "turtle_unit_sec": "초",
        "turtle_note_c": "도",
        "turtle_note_c_sharp": "도♯(레♭)",
        "turtle_note_d": "레",
        "turtle_note_d_sharp": "레♯(미♭)",
        "turtle_note_e": "미",
        "turtle_note_f": "파",
        "turtle_note_f_sharp": "파♯(솔♭)",
        "turtle_note_g": "솔",
        "turtle_note_g_sharp": "솔♯(라♭)",
        "turtle_note_a": "라",
        "turtle_note_a_sharp": "라♯(시♭)",
        "turtle_note_b": "시",
        "turtle_tilt_forward": "앞으로 기울임",
        "turtle_tilt_backward": "뒤로 기울임",
        "turtle_tilt_left": "왼쪽으로 기울임",
        "turtle_tilt_right": "오른쪽으로 기울임",
        "turtle_tilt_flip": "거꾸로 뒤집음",
        "turtle_tilt_not": "기울이지 않음",
        "turtle_battery_normal": "배터리 정상",
        "turtle_battery_low": "배터리 부족",
        "turtle_battery_empty": "배터리 없음",
        "ROBOID_cheese_stick": "치즈 스틱",
        "roborobo_get_temperutre": "온도센서",
        "roborobo_get_joystick_x": "조이스틱X",
        "roborobo_get_joystick_y": "조이스틱Y",
        "roborobo_get_light": "빛센서",
        "roborobo_get_dial": "다이얼",
        "roborobo_get_keypad_a": "A키패트(키번호)",
        "roborobo_get_ultrasonic": "초음파센서[cm]",
        "roborobo_num_analog_value_1": "아날로그",
        "roborobo_num_analog_value_2": "번 센서값",
        "roborobo_get_digital_value_1": "디지털",
        "roborobo_num_pin_1": "디지털",
        "roborobo_num_pin_2": "번 핀",
        "roborobo_input_mode": "입력",
        "roborobo_output_mode": "출력",
        "roborobo_pwm_mode": "전류조절(pwm)",
        "roborobo_servo_mode": "서보모터",
        "roborobo_color": "컬러센서",
        "roborobo_color_detected": " 감지 ",
        "roborobo_degree": " ˚",
        "ROBOTAMICODING_DCM_CLOCKWISE": "시계방향",
        "ROBOTAMICODING_DCM_COUNTERCLOCKWISE": "반시계방향",
        "ROBOTAMICODING_ROBOT_FORWARD": "전진",
        "ROBOTAMICODING_ROBOT_BACKWARD": "후진",
        "ROBOTAMICODING_ROBOT_LEFT": "좌회전",
        "ROBOTAMICODING_ROBOT_RIGHT": "우회전",
        "ROBOTAMICODING_ROBOT_GOLEFT": "전진좌회전",
        "ROBOTAMICODING_ROBOT_GORIGHT": "전진우회전",
        "ROBOTAMICODING_ROBOT_TURNLEFT": "제자리좌회전",
        "ROBOTAMICODING_ROBOT_TURNRIGHT": "제자리우회전",
        "robotis_carCont_aux_motor_speed_1": "감속모터 속도를",
        "robotis_carCont_aux_motor_speed_2": ", 출력값을",
        "robotis_carCont_calibration_1": "적외선 센서 캘리브레이션 값을",
        "robotis_common_case_01": "(을)를",
        "robotis_common_set": "(으)로 정하기",
        "robotis_common_value": "값",
        "robotis_common_cm": "제어기",
        "robotis_common_play_buzzer": "연주",
        "robotis_common_play_motion": "실행",
        "robotis_common_motion": "모션",
        "robotis_common_index_number": "번",
        "robotis_cm_custom": "직접입력 주소",
        "robotis_cm_clear_sound_detected": "최종소리감지횟수 초기화",
        "robotis_cm_buzzer_index": "음계값",
        "robotis_cm_buzzer_melody": "멜로디",
        "robotis_cm_led_1": "1번 LED",
        "robotis_cm_led_4": "4번 LED",
        "robotori_digital": "디지털",
        "robotori_pin_OutputValue": "핀, 출력 값",
        "robotori_analog": "아날로그",
        "robotori_Servo": "서보모터",
        "robotori_DC": "DC모터",
        "robotori_DC_select": "회전",
        "MT1direction": "MT1 회전 방향",
        "MT2direction": "MT2 회전 방향",
        "SM3angle": "SM3 각도",
        "SM2angle": "SM2 각도",
        "SM13angle": "SM1 각도",
        "Yellow": "노란",
        "One": "1번",
        "Two": "2번",
        "Three": "3번",
        "Four": "4번",
        "Five": "5번",
        "Six": "6번",
        "Seven": "7번",
        "Eight": "8번",
        "Clockwise": "정",
        "Counterclockwise": "역",
        "Stopmotor": "정지 시키기",
        "Slowermotor": "매우 느린 속도로 돌리기",
        "Slowmotor": "느린 속도로 돌리기",
        "Normalmotor": "보통 속도로 돌리기",
        "Fastmotor": "빠른 속도로 돌리기",
        "Fastermotor": "매우 빠른 속도로 돌리기",
        "Slowservo": "느린 속도로",
        "Normalservo": "보통 속도로",
        "Fastservo": "빠른 속도로",
        "On": "켜기",
        "Off": "끄기",
        "truetruebot_on": "켜기",
        "truetruebot_off": "끄기",
        "truetruebot_front_near_right": "근접센서오른쪽",
        "truetruebot_front_near_left": "근접센서왼쪽",
        "truetruebot_front_color": "전면컬러센서",
        "truetruebot_bottom_color": "바닥컬러센서",
        "truetruebot_head_color_white": "흰색",
        "truetruebot_head_color_red": "빨간색",
        "truetruebot_head_color_green": "초록색",
        "truetruebot_head_color_blue": "파란색",
        "truetruebot_head_color_cyan": "하늘색",
        "truetruebot_head_color_magenta": "자주색",
        "truetruebot_head_color_yellow": "노란색",
        "truetruebot_head_color_off": "끄기",
        "truetruebot_move_forward": "앞으로",
        "truetruebot_move_backward": "뒤로",
        "truetruebot_move_right": "오른쪽으로",
        "truetruebot_move_left": "왼쪽으로",
        "truetruebot_right": "오른쪽",
        "truetruebot_left": "왼쪽",
        "truetruebot_Xaxis": "X축",
        "truetruebot_Yaxis": "Y축",
        "truetruebot_Zaxis": "Z축",
        "truetruebot_Tilt": "기울기",
        "truetruebot_ColorKey": "컬러키",
        "uglybot_joystick_lr": "조이스틱좌우",
        "uglybot_yoystick_tb": "조이스틱앞뒤",
        "uglybot_gyro_lr": "기울기센서좌우",
        "uglybot_gyro_tb": "기울기센서앞뒤",
        "uglybot_sound2": "소리센서",
        "uglybot_photo2": "조도센서",
        "uglybot_exboard": "확장보드",
        "uglybot_button2": "버튼",
        "uglybot_irleft": "왼쪽 적외선센서",
        "uglybot_irmid": "중간 적외선센서",
        "uglybot_irright": "오른쪽 적외선센서",
        "uglybot_ultrsonic2": "초음파센서",
        "ROBOID_sensor_touch": "터치",
        "XBOT_digital": "디지털",
        "XBOT_analog": "아날로그",
        "XBOT_Value": "출력 값",
        "XBOT_pin_OutputValue": "핀, 출력 값",
        "XBOT_Servo": "서보 모터",
        "XBOT_angle": ", 각도",
        "XBOT_DC": "바퀴(DC) 모터",
        "XBOT_speed": ", 속도",
        "XBOT_rightSpeed": "바퀴(DC) 모터 오른쪽(2) 속도:",
        "XBOT_leftSpeed": "왼쪽(1) 속도:",
        "XBOT_RGBLED_R": "RGB LED 켜기 R 값",
        "XBOT_RGBLED_G": "G 값",
        "XBOT_RGBLED_B": "B 값",
        "XBOT_RGBLED_color": "RGB LED 색",
        "XBOT_set": "로 정하기",
        "XBOT_melody_ms": "초 연주하기",
        "XBOT_Line": "번째 줄",
        "XBOT_outputValue": "출력 값",
        "ROBOID_monitor_left_head_led": "왼쪽 앞 LED",
        "ROBOID_monitor_right_head_led": "오른쪽 앞 LED",
        "ROBOID_monitor_left_tail_led": "왼쪽 뒤 LED",
        "ROBOID_monitor_right_tail_led": "오른쪽 뒤 LED",
        "ROBOID_gesture_forward": "앞으로",
        "ROBOID_gesture_backward": "뒤로",
        "ROBOID_gesture_leftward": "왼쪽으로",
        "ROBOID_gesture_rightward": "오른쪽으로",
        "ROBOID_gesture_near": "가까이",
        "ROBOID_gesture_far": "멀리",
        "ROBOID_gesture_click": "클릭",
        "ROBOID_gesture_long_touch": "오래 터치",
        "ROBOID_battery_state_normal": "정상",
        "ROBOID_battery_state_low": "부족",
        "ROBOID_battery_state_empty": "없음",
        "ROBOID_sensor_front_proximity": "앞쪽 근접 센서",
        "ROBOID_sensor_rear_proximity": "뒤쪽 근접 센서",
        "ROBOID_sensor_gesture": "제스처",
        "ROBOID_gesture": "제스처",
        "ROBOID_color": "색깔",
        "ROBOID_all": "모든",
        "ROBOID_led_left_head": "왼쪽 앞",
        "ROBOID_led_right_head": "오른쪽 앞",
        "ROBOID_led_left_tail": "왼쪽 뒤",
        "ROBOID_led_right_tail": "오른쪽 뒤"
    },
    "Hw": {
        "note": "음표",
        "leftWheel": "왼쪽 바퀴",
        "rightWheel": "오른쪽 바퀴",
        "leftEye": "왼쪽 눈",
        "rightEye": "오른쪽 눈",
        "led": "불빛",
        "led_en": "LED",
        "body": "몸통",
        "front": "앞쪽",
        "port_en": "",
        "port_ko": "번 포트",
        "sensor": "센서",
        "light": "빛",
        "temp": "온도",
        "switch_": "스위치",
        "right_ko": "오른쪽",
        "right_en": "",
        "left_ko": "왼쪽",
        "left_en": "",
        "up_ko": "위쪽",
        "up_en": "",
        "down_ko": "아래쪽",
        "down_en": "",
        "output": "출력",
        "left": "왼쪽",
        "right": "오른쪽",
        "sub": "서보",
        "motor": "모터",
        "buzzer": "버저",
        "IR": "적외선",
        "acceleration": "가속",
        "analog": "아날로그",
        "angular_acceleration": "각가속",
        "button": "버튼",
        "humidity": "습도",
        "joystick": "조이스틱",
        "port": "포트",
        "potentiometer": "포텐시오미터",
        "servo": "서보"
    },
    "Menus": {
        "hamster": "햄스터",
        "turtle": "거북이",
        "maze_distance1": "거리 1",
        "maze_distance2": "거리 2",
        "maze_object_trap": "함정",
        "maze_object_monster": "몬스터",
        "maze_object_obstacle1": "장애물",
        "ai_above": "위쪽",
        "ai_front": "앞쪽",
        "ai_under": "아래쪽",
        "asteroids": "돌",
        "wall": "벽",
        "item": "아이템",
        "korean": "한국어",
        "english": "영어",
        "japan": "일본어",
        "chinese_simplified": "중국어(간체)",
        "chinese_traditional": "중국어(번체)",
        "jan": "1월",
        "feb": "2월",
        "mar": "3월",
        "apr": "4월",
        "may": "5월",
        "jun": "6월",
        "jul": "7월",
        "aug": "8월",
        "sep": "9월",
        "oct": "10월",
        "nov": "11월",
        "dec": "12월",
        "other": "기타",
        "cancel": "취소하기",
        "object": "오브젝트",
        "helper": "도움말",
        "linebreak_off_desc_1": "글상자의 크기가 글자의 크기를 결정합니다.",
        "linebreak_off_desc_2": "내용을 한 줄로만 작성할 수 있습니다.",
        "linebreak_off_desc_3": "새로운 글자가 추가되면 글상자의 좌우 길이가 길어집니다.",
        "linebreak_on_desc_1": "글상자의 크기가 글자가 쓰일 수 있는 영역을 결정합니다.",
        "linebreak_on_desc_2": "내용 작성시 엔터키로 줄바꿈을 할 수 있습니다.",
        "linebreak_on_desc_3": "새로운 글자 추가 시 문장의 길이가 글상자의 가로 영역을 넘어가면 자동으로 줄이 바뀝니다.",
        "sound_edit_warn": "기다려 주세요!<br>새로운 소리 편집 기능을 연구 중입니다.",
        "all": "전체",
        "list": "목록",
        "save_as_image_all": "모든 코드 이미지로 저장하기",
        "console": "콘솔",
        "upload": "올리기",
        "search_lang": "검색",
        "people": "사람",
        "vehicles": "이동수단",
        "environment": "자연환경",
        "animal_insect": "동물/곤충",
        "others": "기타",
        "fantasy": "판타지",
        "picture_import": "모양 가져오기",
        "group": "학급",
        "picture_upload_warn_1": "10MB 이하의 jpg, png, bmp, svg 형식의 파일을 추가할 수 있습니다.\njpg, png, bmp 형식은 비트맵 모드, svg 형식은 벡터 모드로 편집됩니다.",
        "file_upload_warn_title_image": "아래와 같은 그림은 이용약관 및 관련 법률에 의해 제재를 받으실 수 있습니다.",
        "file_upload_warn_desc_image": "폭력적이고 잔인한 그림\n선정적인 신체노출 그림\n불쾌감을 주거나 혐오감을 일으키는 그림\n무단 사용이 금지된 저작권의 그림",
        "file_upload_warn_link": "저작권에 대해 알아보기",
        "file_upload_loading": "로딩중",
        "my_project": "나의 작품",
        "marked_project": "관심 작품",
        "no_project_1": "내가 만든 작품이 없습니다.",
        "no_project_2": "지금 작품 만들기를 시작해보세요!",
        "make_project": "작품 만들기",
        "Load": "불러오기",
        "sprite_upload_warn": "10MB 이하의 jpg, png, bmp, svg 이미지 또는 eo 형식의 오브젝트를 추가할 수 있습니다.",
        "nature": "자연",
        "things": "사물",
        "instrument": "악기",
        "piano": "피아노",
        "marimba": "마림바",
        "drum": "드럼",
        "janggu": "장구",
        "sound_effect": "효과음",
        "others_instrument": "기타타악기",
        "course_done_study": "학습 완료",
        "temp_save_project_study": "임시 저장",
        "project": " 작품",
        "lecture_finish_popup_title": "학습 다시하기",
        "lecture_finish_popup_content_1": "실습완료한 단계를<br>처음부터 다시 실습하시겠습니까?",
        "lecture_finish_popup_content_2": "* 다시 실습해도 실습 완료 상태는 유지됩니다.",
        "in_progress2": "학습중",
        "completed": "완료",
        "save_modified_shape": "수정된 내용을 저장하시겠습니까?",
        "save_as_image": "이미지로 저장하기",
        "function": "함수",
        "lecture_build_tab_attribute": "속성",
        "group_studentCode": "코드",
        "file_upload_table_title": "테이블 새로 만들기",
        "file_upload_table_sub_title": "데이터를 직접 입력해 나만의 테이블을 만들 수 있어요.",
        "file_upload_warn_title_table": "아래와 같은 데이터는 이용약관 및 관련 법률에 의해 제재를 받을 수 있습니다.",
        "file_upload_warn_desc_table": "폭력적이고 잔인한 데이터, 선정적인 내용의 데이터, 불쾌감을 주거나 혐오단어가 포함된 데이터,<br>본인 또는 타인의 개인정보를 침해할 수 있는 내용의 데이터, 무단 사용이 금지된 저작권의 데이터 ",
        "file_upload_warn_desc_table_1": "폭력적이고 잔인한 데이터, 선정적인 내용의 데이터, 불쾌감을 주거나 혐오단어가 포함된 데이터,",
        "file_upload_warn_desc_table_2": "본인 또는 타인의 개인정보를 침해할 수 있는 내용의 데이터, 무단 사용이 금지된 저작권의 데이터 ",
        "table_upload_warn_1": "10MB 이하의 CSV, XLS(X) 형식의 파일을 추가할 수 있습니다. 엑셀 파일의 경우, 함수 문장이 그대로 출력됩니다.",
        "table_drag_upload_title": "파일을 끌어다 놓거나 클릭해서 업로드",
        "table_drag_upload_desc": "CSV, XLS(X) 파일을 여기에 끌어다 놓거나 클릭해서 업로드 할 수 있어요.",
        "upload_select_file": "파일 선택",
        "sample_project": "예시 작품 확인하기",
        "data_table_column": "속성",
        "read_more": "자세히 보기",
        "data_table_provider": "제공처",
        "data_table_modifidate": "수정일",
        "count_ko": "개",
        "data_table_row": "행",
        "file_upload_add": "추가",
        "draw_new_ques_1": "그림을 직접 그려서 추가할 수 있습니다.",
        "draw_new_ques_2": "그리기 화면으로 이동할까요?",
        "draw_new_go": "이동",
        "sound_upload_warn_1": "10MB 이하의 mp3 형식의 파일을 추가할 수 있습니다.",
        "file_upload_warn_title_sound": "아래와 같은 소리는 이용약관 및 관련 법률에 의해 제재를 받을 수 있습니다.",
        "file_upload_warn_desc_sound": "폭력적이고 잔인한 소리\n선정적인 내용의 소리\n불쾌감을 주거나 혐오감을 일으키는 소리\n무단 사용이 금지된 저작권의 소리",
        "file_required": "파일은 필수 입력 항목입니다.",
        "file_upload_max_count": "한번에 10개까지 업로드가 가능합니다.",
        "file_upload_max_size": "10MB 이하만 업로드가 가능합니다.",
        "nothing_to_import": "불러오기 할 항목이 없습니다.",
        "nothing_to_export": "내려받기 할 항목이 없습니다.",
        "list_import_title": "리스트 불러오기",
        "list_import_notice_1": "리스트의 항목과 내용(기본값)을 한꺼번에 작성할 수 있습니다.",
        "list_import_notice_2": "기존 내용은 사라지고 여기서 작성한 내용만 저장됩니다.",
        "list_export_title": "리스트 내보내기",
        "list_export_notice": "리스트 항목의 내용을 복사하거나, 엑셀로 내려받을 수 있습니다.",
        "list_import_placeholder": "예)\r\n내용1\r\n내용2\r\n내용3\r\n내용4\r\n내용5\r\n내용6\r\n내용7\r\n내용8",
        "albert": "알버트",
        "ardublock": "아두블럭",
        "arduino": "아두이노",
        "awesomebot": "어썸봇",
        "bingles": "빙글S",
        "bitbrick": "비트브릭",
        "blacksmith": "대장장이 보드",
        "chocopi": "초코파이보드",
        "cobl": "코블",
        "codeino": "코드이노",
        "codestar": "코드스타",
        "creamo": "크리모",
        "dadublock": "다두블럭",
        "dadublock_car": "다두블럭 자동차",
        "edumaker": "에듀메이커 보드",
        "ev3": "EV3",
        "funboard": "펀보드",
        "iboard": "아이보드",
        "jdkit": "제이디키트",
        "littlebits": "리틀비츠"
    },
    "Device": {
        "arduino": "아두이노",
        "hamster": "햄스터",
        "roboid": "로보이드",
        "turtle": "거북이",
        "albert": "알버트",
        "robotis_carCont": "로보티즈 자동차 로봇",
        "robotis_openCM70": "로보티즈 IoT",
        "sensorBoard": "엔트리 센서보드",
        "trueRobot": "뚜루뚜루",
        "CODEino": "코드이노",
        "bitbrick": "비트브릭",
        "creamo": "크리모",
        "playcode": "플레이코드",
        "funboard": "펀보드",
        "bitBlock": "비트블록",
        "xbot_epor_edge": "엑스봇",
        "dplay": "디플레이",
        "iboard": "아이보드",
        "nemoino": "네모이노",
        "ev3": "EV3",
        "robotori": "로보토리",
        "smartBoard": "스마트보드",
        "chocopi": "초코파이보드",
        "rokoboard": "로코보드",
        "altino": "알티노",
        "mechatro": "메카트로",
        "arduinonano": "아두이노 Nano"
    },
    "Msgs": {
        "hw_connection_success": "하드웨어 연결 성공",
        "hw_connection_success_desc": "하드웨어 아이콘을 더블클릭하면, 센서값만 확인할 수 있습니다.",
        "hw_connection_success_desc2": "하드웨어와 정상적으로 연결되었습니다.",
        "parameter_can_not_space": "값 블록은 빈 칸이 될 수 없습니다.",
        "ai_utilize_train_pop_error": "작품에 적용된 모델이 비활성화 또는 삭제되었습니다.",
        "list_can_not_space": "리스트의 이름은 빈 칸이 될 수 없습니다.",
        "sign_can_not_space": "신호의 이름은 빈 칸이 될 수 없습니다.",
        "variable_can_not_space": "변수의 이름은 빈 칸이 될 수 없습니다.",
        "warn": "경고",
        "video_model_load_success": "로딩 완료",
        "video_model_load_completed": "이제 사람/사물/얼굴 인식을 사용할 수 있습니다.",
        "microbit_led_erase_all": "모두 지우기",
        "loading_plz_wait": "로딩 중입니다. 잠시만 기다려주세요.",
        "ai_utilize_video_loading": "비디오 감지 블록을 로딩 중입니다.<br/> 최대 1분까지 걸릴 수 있어요.",
        "ai_utilize_audio_listening": "듣고 있어요",
        "ai_utilize_audio_description": "마이크를 이용하여 소리와 음성을 감지할 수 있는 블록 모음입니다. (IE/Safari 브라우저 미지원)",
        "ai_utilize_tts_description": "nVoice 음성합성 기술로 다양한 목소리로 문장을 읽는 블록모음 입니다. ",
        "expansion_translate_description": "파파고를 이용하여 다른 언어로 번역할 수 있는 블록 모음입니다.",
        "ai_utilize_video_description": "카메라를 이용하여 사람(신체), 얼굴, 사물 등을 인식하는 블록들의 모음입니다. (IE 및 iOS 미지원)",
        "expansion_weather_description": "기온, 강수량, 미세먼지 농도 등 한국의 날씨와 관련된 블록 모음입니다. [웨더아이 제공]",
        "expansion_festival_description": "국내 지역별 다양한 행사 및 축제와 관련된 불록 모음 입니다. [한국관광공사 제공]",
        "expansion_behaviorConductDisaster_description": "자연재난 발생 시 국민이 지켜야하는 기본적인 행동요령에 대한 블록들의 모음입니다. [국민안전처 제공]",
        "expansion_behaviorConductLifeSafety_description": "생활 속 안전을 위해 국민이 지켜야 하는 행동요령에 대한 블록 모음입니다. [국민안전처 제공]",
        "not_install_title": "미설치 안내",
        "hw_download_text1": "하드웨어 연결을 위해서",
        "hw_download_text2": "<strong>하드웨어 연결 프로그램</strong>을 설치해 주세요.",
        "hw_download_text3": "하드웨어 연결 프로그램이 설치되어 있지 않습니다.",
        "hw_download_text4": "최신 버전의 연결 프로그램을 설치해 주세요.",
        "hw_download_btn": "연결 프로그램 다운로드<span class='download_icon'></span>",
        "runtime_error": "실행 오류",
        "hardware_need_update_content": "보안 업데이트로 엔트리 웹버전은\r\n하드웨어 1.9.0 버전 이상만 지원합니다.\r\n이하 버전일 경우 프로그램을 업데이트 하세요.\r\n* 업데이트 후 블록이 보이지 않을 경우,\r\n웹브라우저의 캐시를 지워 주세요.",
        "cannot_delete_function": "이미 사용 중인 함수입니다.\n결과값 설정을 바꾸려면 함수 블록이\n사용된 오브젝트가 없어야 합니다.",
        "local_variable_deletion_warning": "사용 중인 지역변수가 있다면\n관련 블록이 삭제될 수 있습니다.\n정말로 변경할까요?"
    },
    "template": {
        "expansion_block_descriptions": "확장 블록은 인터넷이 연결되어 있어야 정상적으로 동작합니다.",
        "aiUtilize_block_descriptions": "AI 활용블록은 인터넷이 연결되어 있어야 정상적으로 동작합니다.",
        "load_ai_utilize_train_block": "인공지능 모델 학습하기",
        "load_ai_utilize_block": "인공지능 블록 불러오기",
        "load_expansion_block": "확장 블록 불러오기",
        "download_guide": "%1",
        "function_param_string": "문자/숫자값",
        "function_param_boolean": "판단값",
        "maze_cony_flower_throw": "부채질하기%1",
        "maze_james_heart": "케이크 던지기%1",
        "maze_repeat_until_7": "목적지에 도착할 때까지 반복하기%2",
        "function_create": "함수 정의하기 %1 %2",
        "function_create_value": "함수 정의하기 %1 %2 %3 결과값을 %4 (으)로 정하기",
        "learning_title_image_str": "분류: 이미지 모델",
        "learning_title_speech_str": "분류: 음성 모델",
        "learning_title_text_str": "분류: 텍스트 모델",
        "learning_title_number_str": "분류: 숫자 모델",
        "learning_title_regression_str": "예측: 숫자 모델",
        "learning_title_cluster_str": "군집: 숫자 모델",
        "weather_title_text": "날씨",
        "translate_title_text": "번역",
        "video_title_text": "비디오 감지",
        "festival_title_text": "행사",
        "arduino_text": "%1",
        "arduino_get_sensor_number": "%1  ",
        "arduino_get_port_number": "%1  ",
        "arduino_get_digital_toggle": "%1  ",
        "arduino_get_pwm_port_number": "%1  ",
        "arduino_ext_get_analog_value": "아날로그 %1 번 센서값",
        "arduino_ext_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "arduino_ext_get_ultrasonic_value": "울트라소닉 Trig %1 Echo %2 센서값",
        "arduino_ext_get_digital": "디지털 %1 번 센서값",
        "arduino_ext_toggle_led": "디지털 %1 번 핀 %2 %3",
        "arduino_ext_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "arduino_ext_set_tone": "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
        "arduino_ext_set_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "behaviorConductDisaster_title_text": "자연재난 국민행동요령",
        "behaviorConductLifeSafety_title_text": "생활안전 국민행동요령",
        "audio_title_text": "오디오 감지",
        "tts_title_text": "읽어주기",
        "run": "",
        "blacksmith_get_analog_value": "아날로그 %1 번 핀 센서 값",
        "blacksmith_get_analog_mapping": "아날로그 %1 번 핀 센서 값의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼 값",
        "blacksmith_get_digital_bluetooth": "블루투스 RX 2 핀 데이터 값",
        "blacksmith_get_digital_ultrasonic": "초음파 Trig %1 핀 Echo %2 핀 센서 값",
        "blacksmith_get_digital_toggle": "디지털 %1 번 핀 센서 값",
        "blacksmith_set_digital_toggle": "디지털 %1 번 핀 %2 %3",
        "blacksmith_set_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "blacksmith_set_digital_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "blacksmith_set_digital_buzzer": "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
        "when_run_button_click": "%1 시작하기 버튼을 클릭했을 때",
        "when_some_key_pressed": "%1 %2 키를 눌렀을 때",
        "mouse_clicked": "%1 마우스를 클릭했을 때",
        "mouse_click_cancled": "%1 마우스 클릭을 해제했을 때",
        "when_object_click": "%1 오브젝트를 클릭했을 때",
        "when_object_click_canceled": "%1 오브젝트 클릭을 해제했을 때",
        "when_message_cast": "%1 %2 신호를 받았을 때",
        "message_cast": "%1 신호 보내기 %2",
        "message_cast_wait": "%1 신호 보내고 기다리기 %2",
        "when_scene_start": "%1 장면이 시작되었을 때",
        "start_scene": "%1 시작하기 %2",
        "start_neighbor_scene": "%1 장면 시작하기 %2",
        "text": "%1",
        "arduino_connected": "%1",
        "arduino_connect": "%1",
        "arduino_reconnect": "%1",
        "arduino_download_connector": "%1",
        "arduino_download_source": "%1",
        "repeat_basic": "%1 번 반복하기 %2",
        "number": "%1",
        "move_direction": "이동 방향으로 %1 만큼 움직이기 %2",
        "wait_second": "%1 초 기다리기 %2",
        "repeat_inf": "계속 반복하기 %1",
        "repeat_while_true": "%1 %2  반복하기 %3",
        "True": "%1  ",
        "stop_repeat": "반복 중단하기 %1",
        "_if": "만일 %1 (이)라면 %2",
        "if_else": "만일 %1 (이)라면 %2 %3 아니면",
        "wait_until_true": "%1 이(가) 될 때까지 기다리기 %2",
        "stop_object": "%1 코드 멈추기 %2",
        "restart_project": "처음부터 다시 실행하기 %1",
        "when_clone_start": "%1 복제본이 처음 생성되었을때",
        "create_clone": "%1 의 복제본 만들기 %2",
        "delete_clone": "이 복제본 삭제하기 %1",
        "remove_all_clones": "모든 복제본 삭제하기 %1",
        "bounce_wall": "화면 끝에 닿으면 튕기기 %1",
        "move_x": "x 좌표를 %1 만큼 바꾸기 %2",
        "move_y": "y 좌표를 %1 만큼 바꾸기 %2",
        "move_xy_time": "%1 초 동안 x: %2 y: %3 만큼 움직이기 %4",
        "locate_x": "x: %1 위치로 이동하기 %2",
        "locate_y": "y: %1 위치로 이동하기 %2",
        "locate_xy": "x: %1 y: %2 위치로 이동하기 %3",
        "locate_xy_time": "%1 초 동안 x: %2 y: %3 위치로 이동하기 %4",
        "locate": "%1 위치로 이동하기 %2",
        "locate_object_time": "%1 초 동안 %2 위치로 이동하기 %3",
        "rotate_relative": "방향을 %1 만큼 회전하기 %2",
        "angle": "%1",
        "color": "%1",
        "direction_relative": "이동 방향을 %1 만큼 회전하기 %2",
        "rotate_by_time": "%1 초 동안 방향을 %2 만큼 회전하기 %3",
        "direction_relative_duration": "%1 초 동안 이동 방향 %2 만큼 회전하기 %3",
        "rotate_absolute": "방향을 %1 (으)로 정하기 %2",
        "direction_absolute": "이동 방향을 %1 (으)로 정하기 %2",
        "see_angle_object": "%1 쪽 바라보기 %2",
        "move_to_angle": "%1 방향으로 %2 만큼 움직이기 %3",
        "show": "모양 보이기 %1",
        "hide": "모양 숨기기 %1",
        "dialog_time": "%1 을(를) %2 초 동안 %3 %4",
        "dialog": "%1 을(를) %2 %3",
        "remove_dialog": "말하기 지우기 %1",
        "change_to_some_shape": "%1 모양으로 바꾸기 %2",
        "get_pictures": "%1  ",
        "change_to_next_shape": "%1 모양으로 바꾸기 %2",
        "add_effect_amount": "%1 효과를 %2 만큼 주기 %3",
        "change_effect_amount": "%1 효과를 %2 (으)로 정하기 %3",
        "erase_all_effects": "효과 모두 지우기 %1",
        "change_scale_size": "크기를 %1 만큼 바꾸기 %2",
        "set_scale_size": "크기를 %1  (으)로 정하기 %2",
        "flip_x": "상하 모양 뒤집기 %1",
        "flip_y": "좌우 모양 뒤집기 %1",
        "change_object_index": "%1 보내기 %2",
        "brush_stamp": "도장 찍기 %1",
        "start_drawing": "그리기 시작하기 %1",
        "stop_drawing": "그리기 멈추기 %1",
        "set_color": "붓의 색을 %1 (으)로 정하기 %2",
        "set_random_color": "붓의 색을 무작위로 정하기 %1",
        "change_thickness": "붓의 굵기를 %1 만큼 바꾸기 %2",
        "set_thickness": "붓의 굵기를 %1 (으)로 정하기 %2",
        "change_brush_transparency": "붓의 투명도를 %1 % 만큼 바꾸기 %2",
        "set_brush_tranparency": "붓의 투명도를 %1 % 로 정하기 %2",
        "brush_erase_all": "모든 붓 지우기 %1",
        "text_read": "글상자 %1의 내용",
        "text_write": "%1 라고 글쓰기 %2",
        "text_append": "%1 라고 뒤에 이어쓰기 %2",
        "text_prepend": "%1 라고 앞에 추가하기 %2",
        "text_change_effect": "텍스트에 %1 효과 %2 %3",
        "text_change_font": "글씨체를 %1 로 변경 %2",
        "text_change_font_color": "글씨색을 %1 로 변경 %2",
        "text_change_bg_color": "배경색을 %1 로 변경 %2",
        "text_flush": "텍스트 모두 지우기 %1",
        "sound_something_with_block": "소리 %1 재생하기 %2",
        "get_sounds": "%1  ",
        "sound_something_second_with_block": "소리 %1   %2 초 재생하기 %3",
        "sound_from_to": "소리 %1 %2 초 부터 %3 초까지 재생하기 %4",
        "sound_something_wait_with_block": "소리  %1 재생하고 기다리기 %2",
        "sound_something_second_wait_with_block": "소리 %1   %2 초 재생하고 기다리기 %3",
        "sound_from_to_and_wait": "소리 %1 %2 초 부터 %3 초까지 재생하고 기다리기 %4",
        "sound_volume_change": "소리 크기를 %1 % 만큼 바꾸기 %2",
        "sound_volume_set": "소리 크기를 %1 % 로 정하기 %2",
        "sound_silent_all": "모든 소리 멈추기 %1",
        "is_clicked": "%1",
        "is_press_some_key": "%1 %2",
        "reach_something": "%1 %2 %3",
        "boolean_basic_operator": "%1 %2 %3",
        "boolean_and_or": "%1 %2 %3",
        "False": "%1  ",
        "boolean_not": "%1 %2 %3",
        "is_boost_mode": "%1",
        "calc_basic": "%1 %2 %3",
        "calc_rand": "%1 %2 %3 %4 %5",
        "coordinate_mouse": "%1 %2 %3",
        "coordinate_object": "%1 %2 %3 %4",
        "get_sound_volume": "%1 %2",
        "quotient_and_mod": "%1 %2 %3 %4 %5 %6",
        "calc_operation": "%1 %2 %3 %4",
        "get_project_timer_value": "%1 %2",
        "choose_project_timer_action": "%1 %2 %3 %4",
        "set_visible_project_timer": "%1 %2 %3 %4",
        "get_date": "%1 %2 %3",
        "distance_something": "%1 %2 %3",
        "get_sound_duration": "%1 %2 %3",
        "get_user_name": "사용자이름",
        "length_of_string": "%1 %2 %3",
        "combine_something": "%1 %2 %3 %4 %5",
        "char_at": "%1 %2 %3 %4 %5",
        "substring": "%1 %2 %3 %4 %5 %6 %7",
        "index_of_string": "%1 %2 %3 %4 %5",
        "replace_string": "%1 %2 %3 %4 %5 %6 %7",
        "change_string_case": "%1 %2 %3 %4 %5",
        "variableAddButton": "%1",
        "listAddButton": "%1",
        "ask_and_wait": "%1 을(를) 묻고 대답 기다리기 %2",
        "get_canvas_input_value": "%1  ",
        "set_visible_answer": "대답 %1 %2",
        "get_variable": "%1 %2",
        "change_variable": "%1 에 %2 만큼 더하기 %3",
        "set_variable": "%1 를 %2 (으)로 정하기 %3",
        "show_variable": "변수 %1 보이기 %2",
        "hide_variable": "변수 %1 숨기기 %2",
        "value_of_index_from_list": "%1 %2 %3 %4 %5",
        "add_value_to_list": "%1 항목을 %2 에 추가하기 %3",
        "remove_value_from_list": "%1 번째 항목을 %2 에서 삭제하기 %3",
        "insert_value_to_list": "%1 을(를) %2 의 %3 번째에 넣기 %4",
        "change_value_list_index": "%1    %2 번째 항목을 %3 (으)로 바꾸기 %4",
        "length_of_list": "%1 %2 %3",
        "is_included_in_list": "%1 %2 %3 %4 %5",
        "show_list": "리스트 %1 보이기 %2",
        "hide_list": "리스트 %1 숨기기 %2",
        "functionAddButton": "%1",
        "analizyDataAddButton": "%1",
        "append_row_to_table": "테이블 %1에 %2 추가하기 %3",
        "insert_row_to_table": "테이블 %1 %2 번째에 %3 추가하기 %4",
        "delete_row_from_table": "테이블 %1 %2번째 %3 삭제하기 %4",
        "set_value_from_table": "테이블 %1 %2번째 행의 %3을(를) %4(으)로 바꾸기 %5",
        "get_table_count": "테이블 %1의 %2 개수",
        "get_value_from_table": "테이블 %1 %2번째 행의 %3 값",
        "get_value_from_last_row": "테이블 %1 마지막 행의 %2 값",
        "calc_values_from_table": "테이블 %1 %2의 %3",
        "open_table_chart": "테이블 %1의 %2 차트 창 열기 %3",
        "close_table_chart": "테이블 차트 창 닫기 %1",
        "aiUtilizeBlockAddButton": "%1",
        "aiUtilizeModelTrainButton": "%1",
        "learning_title_image": "%1",
        "learning_title_speech": "%1",
        "learning_title_text": "%1",
        "learning_title_number": "%1",
        "learning_title_regression": "%1",
        "learning_title_cluster": "%1",
        "insert_data_for_test": "학습한 모델로 분류하기 %1",
        "insert_text_block_for_test": "%1 을(를) 학습한 모델로 분류하기 %2",
        "test_result": "분류 결과",
        "accuracy_of_result": "%1에 대한 신뢰도",
        "is_group": "분류 결과가 %1 인가?",
        "retrain_model": "모델 다시 학습하기 %1",
        "model_is_trained": "모델이 학습되었는가?",
        "set_train_visible": "모델 %1 %2",
        "set_train_chart": "모델 차트 창 %1 %2",
        "set_regression_option": "학습 조건 %1 을 %2 으로 바꾸기 %3",
        "get_regression_predict_1": "%1 %2 의 예측 값",
        "get_regression_predict_2": "%1 %2 %3 %4 의 예측 값",
        "get_regression_predict_3": "%1 %2 %3 %4 %5 %6 의 예측 값",
        "get_regression_accuracy": "결정계수",
        "set_cluster_option_k": "군집을 %1 개로 바꾸기 %2",
        "set_cluster_option_centroids": "중심점 기준을 %1 로 바꾸기 %2",
        "get_cluster_centriod_count": "군집 개수",
        "get_cluster_centriod_value": "군집 %1 중심점의 %2 값",
        "get_cluster_centriod_index_1": "%1 %2의 군집",
        "get_cluster_centriod_index_2": "%1 %2 %3 %4의 군집",
        "get_cluster_centriod_index_3": "%1 %2 %3 %4 %5 %6의 군집",
        "set_number_learning_option_k": "이웃을 %1 개로 바꾸기 %2",
        "get_number_learning_predict_1": "%1 %2 의 분류 결과",
        "get_number_learning_predict_2": "%1 %2 %3 %4의 분류 결과",
        "get_number_learning_predict_3": "%1 %2 %3 %4 %5 %6 의 분류 결과",
        "get_number_learning_predict_param_1": "%1 %2 의 %3 에 대한 %4",
        "get_number_learning_predict_param_2": "%1 %2 %3 %4 의 %5 에 대한 %6",
        "get_number_learning_predict_param_3": "%1 %2 %3 %4 %5 %6 의 %7 에 대한 %8",
        "is_number_learning_group_1": "%1 %2 의 분류 결과가 %3 인가?",
        "is_number_learning_group_2": "%1 %2 %3 %4 의 분류 결과가 %5 인가?",
        "is_number_learning_group_3": "%1 %2 %3 %4 %5 %6 의 분류 결과가 %7 인가?",
        "audio_title": "%1",
        "check_microphone": "마이크가 연결되었는가?",
        "speech_to_text_convert": "음성 인식하기 %1",
        "speech_to_text_get_value": "음성을 문자로 바꾼 값",
        "get_microphone_volume": "마이크 소리크기",
        "tts_title": "%1",
        "read_text": "%1 읽어주기 %2",
        "read_text_wait_with_block": "%1 읽어주고 기다리기 %2",
        "set_tts_property": "%1 목소리를 %2 속도 %3 음높이로 설정하기 %4",
        "translate_title": "%1",
        "get_translated_string": "%1 %2 을(를) %3로 번역하기",
        "check_language": "%1의 언어",
        "video_title": "%1",
        "video_draw_webcam": "비디오 화면 %1 %2",
        "video_check_webcam": "비디오가 연결되었는가?",
        "video_change_cam": "%1 카메라로 바꾸기 %2",
        "video_flip_camera": "비디오 화면 %1 뒤집기 %2",
        "video_set_camera_opacity_option": "비디오 투명도 효과를 %1 으로 정하기 %2",
        "video_motion_value": "%1 에서 감지한 %2 값",
        "video_toggle_model": "%1 인식 %2 %3",
        "video_is_model_loaded": "%1 인식이 되었는가?",
        "video_object_detected": "사물 중 %1 (이)가 인식되었는가?",
        "video_number_detect": "인식된 %1 의 수",
        "video_toggle_ind": "인식된 %1 %2 %3",
        "video_body_part_coord": "%1 번째 사람의 %2 의 %3 좌표",
        "video_face_part_coord": "%1 번째 얼굴의 %2 의 %3 좌표",
        "video_detected_face_info": "%1 번째 얼굴의 %2",
        "expansionBlockAddButton": "%1",
        "weather_title": "%1",
        "check_weather": "%1 %2 의 날씨가 %3인가?",
        "check_finedust": "현재 %1 의 미세먼지 등급이 %2인가?",
        "get_weather_data": "%1 %2 의 %3",
        "get_current_weather_data": "현재 %1 의 %2",
        "get_today_temperature": "오늘 %1의 %2시 기온",
        "check_city_weather": "%1 %2 %3의 날씨가 %4인가?",
        "check_city_finedust": "현재 %1 %2 의 미세먼지 등급이 %3인가?",
        "get_city_weather_data": "%1 %2 %3 의 %4",
        "get_current_city_weather_data": "현재 %1 %2 의 %3",
        "get_today_city_temperature": "오늘 %1 %2의 %3시 기온",
        "festival_title": "%1",
        "count_festival": "%1 %2 행사의 수",
        "get_festival_info": "%1 %2 행사 %3 번째 항목의 %4",
        "behaviorConductDisaster_title": "%1",
        "count_disaster_behavior": "%1 %2 해야할 행동요령 수",
        "get_disaster_behavior": "자연재난%1 %2 해야할 행동요령 %3 번째 항목",
        "behaviorConductLifeSafety_title": "%1",
        "count_lifeSafety_behavior": "%1 에서 %2 방법의 수",
        "get_lifeSafety_behavior": "%1 에서 %2 방법 %3 번째 항목",
        "jdkit_joystick": "조이스틱 %1 읽기",
        "jdkit_button": "%1번 버튼 값 읽어오기",
        "jdkit_gyro": "보드 %1 기울기 값 읽어오기",
        "jdkit_ultrasonic": "거리(초음파)값 읽어오기",
        "jdkit_connect": "드론 연결 상태 읽어오기",
        "jdkit_ready": "드론 비행 준비 상태 읽어오기",
        "jdkit_led": "%1 LED %2  %3",
        "jdkit_tune": "%1 음을  %2 초동안 소리내기 %3",
        "jdkit_motor": "%1 모터를 %2 세기로 돌리기 %3",
        "jdkit_throttle": "드론 프로펠러를 %1 만큼 세기로 돌리기 %2",
        "jdkit_altitude": "드론을 %1 높이만큼 날리기 %2",
        "jdkit_rollpitch": "드론을 %1 방향 %2 세기로 움직이기 %3",
        "jdkit_yaw": "드론을 %1 만큼 회전하기 %2",
        "jdkit_emergency": "드론을 즉시 멈추기 %1",
        "memaker_set_lcd": "1602 문자 LCD %1 행 , %2열에 %3 출력하기 %4",
        "memaker_lcd_command": "1602 문자 LCD %1 명령실행하기 %2",
        "function_general": "함수 %1",
        "function_value": "함수",
        "boolean_and": "%1 %2 %3",
        "boolean_or": "%1 %2 %3",
        "function_field_label": "%1%2",
        "function_field_string": "%1%2",
        "function_field_boolean": "%1%2",
        "CloverSEntry1_set_digital": "%1 을 %2 %3",
        "CloverSEntry1_set_digital1": "%1 을 %2 %3",
        "CloverSEntry1_set_tone": "부저를  %1 %2 음으로 %3초 연주하기 %4",
        "CloverSEntry1_set_servo": "%1 번 서보모터를 %2 의 각도로 정하기 %3",
        "CloverSEntry1_set_motor": "%1 모터를 %2 으로 %3 회전 속도로 정하기 %4",
        "CloverSEntry1_set_fnd": "클로버 숫자표시기(FND)에 %1 출력하기 %2",
        "CloverSEntry1_clover_set_led": "클로버 LED %1 을 %2 %3",
        "CloverSEntry1_get_digital": "스위치 %1 번 값",
        "CloverSEntry1_get_digital_servo": "디지털 %1 번 값",
        "CloverSEntry1_get_analog_value": "아날로그 %1 번 센서값",
        "CloverSEntry1_get_analog_value_map": "아날로그 %1 번 값의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "CloverSEntry1_get_ultrasonic_value": "초음파센서 센서값",
        "CloverSEntry1_get_cds_value": "조도센서 센서값",
        "CloverSEntry1_get_temp_value": "온도센서 센서값",
        "CloverSEntry1_clover_get_sw": "클로버 버튼 %1 번 값",
        "CloverSEntry1_set_rgb": "컬러LED를 빨강%1 초록%2 파랑%3 밝기%4로 켜기 %5",
        "KrcBuzzerOnOff": "스피커 삐 소리 %1 초 연주하기 %2",
        "KrcSetMotorSpeed": "DC모터 왼쪽 속도%1 오른쪽 속도%2 으로 정하기 %3",
        "KrcMotorStop": "DC모터 정지하기 %1",
        "KrcSetServo": "서보모터 %1포트,  각도%2도,  속도%3%로 이동 %4",
        "KrcDigitalOnOff": "디지털 %1 포트 %2 설정하기 %3",
        "KrcGetDgitalValue": "디지털 %1 포트 읽기",
        "KrcGetAnalogValue": "아날로그 %1 포트 읽기",
        "KrcGetUsonicValue": "아날로그형 (US-016)초음파센서 %1포트 읽기",
        "KrcSetLcdString": "lcd 세로%1줄,  가로%2줄 에  %3 표시하기 %4",
        "KrcSetLcdBacklight": "lcd 후광(백라이트) %1 하기 %2",
        "KrcSetLcdClear": "lcd 지우기 %1",
        "KrcGetAnalogMapping": " %1 값 %2 ~ %3 에서 %4 ~ %5 으로 변환값",
        "LineCodingStart": "%1 저장하기 시작 %2",
        "LineCodingStop": "라인트레이서에 저장하기 종료 %1",
        "LineCodingLineEasy": "%1 하기 %2",
        "LineCodingEasySet": "%1 %2 로 정하기 %3",
        "LineCodingEasyTimeSet": "교차로에서 %1mS 더 직진하도록 설정하기 %2",
        "LineCodingEasyMotor": "모터 %1 방향으로  %2mS 이동하기 %3",
        "LineCodingRestart": "restart(%1); %2",
        "LineCodingDelay": "delay(%1); %2",
        "LineCodingLine": "line(%1, %2, %3); %4",
        "LineCodingTurn": "%1(%2, %3); %4",
        "LineCodingMotor": "motor(%1, %2, %3); %4",
        "LineCodingBmotor": "%1(%2, %3, %4); %5",
        "LineCodingWheel": "wheel(%1, %2); %3",
        "LineCodingServo": "sservo(%1, %2, %3); %4",
        "LineCodingDigitalOnOff": "디지털 %1 포트 %2 설정하기 %3",
        "LineCodingMelody": "스피커 %1 옥타브 %2음 %3 초 연주하기 %4",
        "LineCodingMotorStop": "motorstop(%1, %2); %3",
        "LineCodingBlackForwardF": "blackforwardf(%1,%2,%3,%4,%5); %6",
        "LineCodingGetDgitalValue": "디지털 %1 포트 읽기",
        "LineCodingGetAnalogValue": "아날로그 %1 포트 읽기",
        "LineCodingGetAnalogMapping": " %1 값 %2 ~ %3 에서 %4 ~ %5 으로 변환값",
        "LineCodingRemotRx": " 조종기버튼 %1,  %2 눌리면 실행하는 코드 %3",
        "LineCodingLineDelay": "linedelay(%1, %2, %3); %4",
        "LineCodingABSH": "lineabsh(%1, %2, %3, %4, %5, %6); %7",
        "LineCodingBuzzerOnOff": "buzzer(%1, %2, %3); %4",
        "LineCodingLED": "led(%1, %2, %3, %4); %5",
        "LineCodingSetLcdString": "lcd 세로%1줄,  가로%2줄 에  %3 표시하기 %4",
        "LineCodingSetLcdClear": "lcd 지우기 %1",
        "LineCodingFFmotor": "ffmotor(%1, %2); %3",
        "LineCodingBBmotor": "bbmotor(%1, %2); %3",
        "RichShield_get_Analog_value": "아날로그 %1 번 핀의 값",
        "RichShield_set_digital_toggle": "디지털 %1 번 핀 %2 %3",
        "RichShield_get_digital": "디지털 %1 번 핀 센서 %2 값",
        "RichShield_get_digital_toggle": "디지털 %1 번 핀 센서 %2 값",
        "RichShield_LCD_event": "LCD Display(1602)-I2C",
        "RichShield_LCD_Control_init": "LCD %1 번 :  주소 %2 로 설정",
        "RichShield_LCD_Control_Display": "LCD화면 %1 줄에 %2 나타내기 %3",
        "RichShield_FND_event": "FND 4digit (TM1637)- CLK:D5, DIO:D4",
        "RichShield_FND_Control_init": "FND %1 번 : 디지털 CLK %2, DIO %3 번 핀으로 설정",
        "RichShield_FND_Control_diplay_brightness": "FND %1 번 : 밝기 %2 단계로 설정",
        "RichShield_FND_Control_display_onoff": "FND %1 번 : 전원 %2",
        "RichShield_FND_Control_diplay_char": "FND %1 번 : %2 출력하기:나머지0채우기 %3  %4 초 대기",
        "RichShield_DHT_event": "온습도센서(DHT11/22)-디지털 12번 핀",
        "RichShield_DHT_Control_Init_Process": "온습도 %1 번 : 디지털 %2 번 핀 / 버전 %3",
        "RichShield_DHT_Control_Read_Temper": "온습도 %1 번 : 온도값 읽기 %2",
        "Krypton0_turnon_motor": "모터를 %1(으)로 %2 속도로 움직이기 %3",
        "Krypton0_move_to_direction_during_secs": "모터를 %1(으)로 %2 초동안 움직이기 %3",
        "Krypton0_turnoff_motor": "모터를 정지 시키기 %1",
        "Krypton0_change_direction_during_secs": "모터를 %1 방향으로 %2초 동안 움직이기 %3",
        "Krypton0_change_speed": "모터 %1의 속도를 %2로 변경하기 %3",
        "Krypton0_play_sound": "크립톤에서 %1 을 재생하기 %2",
        "Krypton0_get_sensor_data": "포트 %1에서 센서 %2 의 값을 읽기",
        "Krypton0_button_pressed": "포트 %1의 버튼이 눌려져있는가? %2",
        "Krypton0_turnon_led": "포트 %1의 LED를 %2 %3",
        "albert_value": "%1",
        "albert_hand_found": "손 찾음?",
        "albert_is_oid_value": "%1 OID가 %2인가?",
        "albert_boolean": "%1?",
        "albert_move_forward_for_secs": "앞으로 %1초 이동하기 %2",
        "albert_move_backward_for_secs": "뒤로 %1초 이동하기 %2",
        "albert_turn_for_secs": "%1 으로 %2초 돌기 %3",
        "albert_change_both_wheels_by": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 만큼 바꾸기 %3",
        "albert_set_both_wheels_to": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 (으)로 정하기 %3",
        "albert_change_wheel_by": "%1 바퀴 %2 만큼 바꾸기 %3",
        "albert_set_wheel_to": "%1 바퀴 %2 (으)로 정하기 %3",
        "albert_stop": "정지하기 %1",
        "albert_set_pad_size_to": "말판 크기를 폭 %1 높이 %2(으)로 정하기 %3",
        "albert_move_to_x_y_on_board": "밑판 %1 x: %2 y: %3 위치로 이동하기 %4",
        "albert_set_orientation_on_board": "말판 %1도 방향으로 돌기 %2",
        "albert_set_eye_to": "%1 눈을 %2 으로 정하기 %3",
        "albert_clear_eye": "%1 눈 끄기 %2",
        "albert_body_led": "몸통 LED %1 %2",
        "albert_front_led": "앞쪽 LED %1 %2",
        "albert_beep": "삐 소리내기 %1",
        "albert_change_buzzer_by": "버저 음을 %1 만큼 바꾸기 %2",
        "albert_set_buzzer_to": "버저 음을 %1 (으)로 정하기 %2",
        "albert_clear_buzzer": "버저 끄기 %1",
        "albert_play_note": "%1 %2 음을 연주하기 %3",
        "albert_play_note_for": "%1 %2 음을 %3 박자 연주하기 %4",
        "albert_rest_for": "%1 박자 쉬기 %2",
        "albert_change_tempo_by": "연주 속도를 %1 만큼 바꾸기 %2",
        "albert_set_tempo_to": "연주 속도를 %1 BPM으로 정하기 %2",
        "albert_move_forward": "앞으로 이동하기 %1",
        "albert_move_backward": "뒤로 이동하기 %1",
        "albert_turn_around": "%1 으로 돌기 %2",
        "albert_set_led_to": "%1 %2 으로 정하기 %3",
        "albert_clear_led": "%1 %2",
        "albert_change_wheels_by": "%1 %2 %3",
        "albert_set_wheels_to": "%1 %2 %3",
        "albertai_value": "%1",
        "albertai_hand_found": "손 찾음?",
        "albertai_touch_state": "%1 터치 센서를 %2 ?",
        "albertai_is_oid": "OID가 %1인가?",
        "albertai_boolean": "%1?",
        "albertai_move_forward_unit": "앞으로 %1 %2 이동하기 %3",
        "albertai_move_backward_unit": "뒤로 %1 %2 이동하기 %3",
        "albertai_turn_unit_in_place": "%1 으로 %2 %3 제자리 돌기 %4",
        "albertai_pivot_around_unit_in_direction": "%1 바퀴 중심으로 %2 %3 %4 방향으로 돌기 %5",
        "albertai_change_both_wheels_by": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 만큼 바꾸기 %3",
        "albertai_set_both_wheels_to": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 (으)로 정하기 %3",
        "albertai_change_wheel_by": "%1 바퀴 %2 만큼 바꾸기 %3",
        "albertai_set_wheel_to": "%1 바퀴 %2 (으)로 정하기 %3",
        "albertai_stop": "정지하기 %1",
        "albertai_move_to_x_y_on_board": "밑판 %1 x: %2 y: %3 위치로 이동하기 %4",
        "albertai_set_orientation_on_board": "말판 %1도 방향으로 돌기 %2",
        "albertai_set_eye_to": "%1 눈을 %2 으로 정하기 %3",
        "albertai_pick_eye": "%1 눈을 %2로 정하기 %3",
        "albertai_change_eye_by_rgb": "%1 눈을 R: %2 G: %3 B: %4 만큼 바꾸기 %5",
        "albertai_set_eye_to_rgb": "%1 눈을 R: %2 G: %3 B: %4 (으)로 정하기 %5",
        "albertai_clear_eye": "%1 눈 끄기 %2",
        "albertai_play_sound_times": "%1 소리 %2 번 재생하기 %3",
        "albertai_play_sound_times_until_done": "%1 소리 %2 번 재생하고 기다리기 %3",
        "albertai_change_buzzer_by": "버저 음을 %1 만큼 바꾸기 %2",
        "albertai_set_buzzer_to": "버저 음을 %1 (으)로 정하기 %2",
        "albertai_clear_sound": "소리 끄기 %1",
        "albertai_play_note": "%1 %2 음을 연주하기 %3",
        "albertai_play_note_for": "%1 %2 음을 %3 박자 연주하기 %4",
        "albertai_rest_for": "%1 박자 쉬기 %2",
        "albertai_change_tempo_by": "연주 속도를 %1 만큼 바꾸기 %2",
        "albertai_set_tempo_to": "연주 속도를 %1 BPM으로 정하기 %2",
        "altino_analogValue": "알티노 라이트 %1 센서값",
        "altino_stopAll": "정지 %1°%2",
        "altino_dot_display": "표시하기 %1 %2",
        "altino_dot_display_line": "표시하기 %1 %2 %3 %4 %5 %6 %7 %8 %9 %10",
        "altino_dot_display_hex": "표시하기 %1 %2 %3 %4 %5 %6 %7 %8 %9",
        "altino_dot_display_matrix_on": "표시하기 켜기 X:%1 Y:%2 %3",
        "altino_dot_display_matrix_off": "표시하기 끄기 X:%1 Y:%2 %3",
        "altino_light": "라이트%1 %2 %3",
        "altino_light_hex": "라이트%1 %2",
        "altino_sound_hex": "소리%1 %2",
        "altino_rear_wheel": "뒷바퀴 구동 좌:%1 우:%2%3",
        "altino_sound": "소리 %1 %2 %3",
        "altino_steering_hex": "조향 %1%2",
        "altino_steering": "조향 %1°%2",
        "ardublock_get_number_sensor_value": "아날로그 %1 번 센서값  ",
        "ardublock_get_digital_value": "디지털 %1 번 센서값  ",
        "ardublock_toggle_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "ardublock_convert_scale": "%1 값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 바꾼값  ",
        "ardublock_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "ardublock_get_analog_value": "아날로그 %1 번 센서값",
        "ardublock_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "ardublock_get_digital": "디지털 %1 번 센서값",
        "ardublock_get_left_cds_analog_value": "왼쪽 조도센서 %1 센서값",
        "ardublock_get_right_cds_analog_value": "오른쪽 조도센서 %1 센서값",
        "ardublock_get_sound_analog_value": "사운드(소리) 센서 %1 센서값",
        "ardublock_get_ultrasonic_value": "초음파센서 Trig %1 Echo %2 센서값",
        "ardublock_set_left_motor": "왼쪽모터를 %1 으로 %2 회전 속도로 정하기 %3",
        "ardublock_set_right_motor": "오른쪽모터를 %1 으로 %2 회전 속도로 정하기 %3",
        "ardublock_set_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "ardublock_set_tone": "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
        "ardublock_toggle_led": "디지털 %1 번 핀 %2 %3",
        "ardublock_toggle_left_led": "왼쪽 라이트 %1 번 핀 %2 %3",
        "ardublock_toggle_right_led": "오른쪽 라이트 %1 번 핀 %2 %3",
        "arduino_get_number_sensor_value": "아날로그 %1 번 센서값  ",
        "arduino_get_digital_value": "디지털 %1 번 센서값  ",
        "arduino_toggle_led": "디지털 %1 번 핀 %2 %3",
        "arduino_toggle_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "arduino_convert_scale": "%1 값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 바꾼값  ",
        "arduino_cake_get_analog_value": "아날로그 %1 번 센서값",
        "arduino_cake_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "arduino_cake_get_ultrasonic_value": "울트라소닉 Trig %1 Echo %2 센서값",
        "arduino_cake_toggle_led": "디지털 %1 번 핀 %2 %3",
        "arduino_cake_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "arduino_cake_set_tone": "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
        "arduino_cake_set_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "arduino_cake_get_digital": "디지털 %1 번 센서값",
        "arduino_nano_get_analog_value": "아날로그 %1 번 센서값",
        "arduino_nano_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "arduino_nano_get_ultrasonic_value": "울트라소닉 Trig %1 Echo %2 센서값",
        "arduino_nano_toggle_led": "디지털 %1 번 핀 %2 %3",
        "arduino_nano_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "arduino_nano_set_tone": "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
        "arduino_nano_set_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "arduino_nano_get_digital": "디지털 %1 번 센서값",
        "Mechatronics_4D_get_analog_value": "아날로그 %1 번 센서값",
        "Mechatronics_4D_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "Mechatronics_4D_get_ultrasonic_value": "울트라소닉 Trig %1 Echo %2 센서값",
        "Mechatronics_4D_get_digital": "디지털 %1번 센서값",
        "Mechatronics_4D_toggle_led": "디지털 %1번 핀 %2 %3",
        "Mechatronics_4D_digital_pwm": "디지털 %1번 핀을 %2(으)로 정하기 %3",
        "Mechatronics_4D_set_tone": "디지털 %1번 핀의 버저를 %2 %3 음으로 %4초 연주하기 %5",
        "Mechatronics_4D_on_motor": "%1 %2 %3 DC모터를 %4으로 움직이기 %5",
        "Mechatronics_4D_controll_motor_speed1": "%1 %2 뒤 DC모터를 %3 %4 속도로 움직이기 %5",
        "Mechatronics_4D_controll_motor_speed2": "%1 %2 뒤 DC모터를 %3 %4 속도로 움직이기 %5",
        "Mechatronics_4D_off_motor": "%1 %2 %3 DC모터를 멈추기 %4",
        "Mechatronics_4D_set_servo": "%1 %2 서보 모터의 각도를 %3(으)로 정하기 %4",
        "armz_run_action": "%1 : 번호 %2 실행 %3",
        "armz_block_coding_MF": "앞으로 %1초간 이동 %2",
        "armz_block_coding_MB": "뒤로 %1초간 이동 %2",
        "armz_block_coding_T": "%1 방향으로 회전 %2",
        "armz_block_coding_LO": "%1 색깔 램프 1초간 켜기 %2",
        "armz_block_coding_LB": "%1 색깔 램프 깜박이기 %2",
        "armz_block_coding_LR": "무지개 색깔 램프 3초간 켜기 %1",
        "armz_block_coding_E": "%1의 감정 표현하기 %2",
        "asomebot_toggle_led": "파란 LED %1 %2",
        "asomebot_get_ultrasonic_value": "초음파 센서 거리 센서값",
        "asomebot_buzzer_open": "부저 켜기 %1",
        "asomebot_buzzer_note": "부저를 %1음으로 %2초 연주하기 %3",
        "asomebot_buzzer_tone": "부저를 %1주파수로 %2초 연주하기 %3",
        "asomebot_buzzer_close": "부저 끄기 %1",
        "asomebot_align": "중심잡기 %1 %2 %3 %4 %5",
        "asomebot_home": "차렷 %1",
        "asomebot_angle": "%1번 모터를 %2도로 %3초 동안 회전 %4",
        "asomebot_forward": "앞으로 전진 %1",
        "asomebot_forward2": "앞으로 전진 %1 %2 %3",
        "asomebot_backward": "뒤로 후진 %1",
        "asomebot_backward2": "뒤로 후진 %1 %2 %3",
        "asomebot_turn_left": "왼쪽으로 회전 %1",
        "asomebot_turn_left2": "왼쪽으로 회전 %1 %2",
        "asomebot_turn_right": "오른쪽으로 회전 %1",
        "asomebot_turn_right2": "오른쪽으로 회전 %1 %2",
        "asomebot_mouse": "발인사하기 %1 %2",
        "asomebot_flap": "깡총 뛰기 %1",
        "asomebot_warigari": "트위스트 춤추기 %1",
        "asomebot_tock": "발바닥 까닥하기 %1 %2",
        "asomebot_tick_tock": "발목 비틀어서 까닥하기 %1",
        "asomebot_wiggle": "좌우로 흔들 #1 %1",
        "asomebot_swing2": "좌우로 흔들 #2 %1",
        "asomebot_ballet": "발바닥 모으기 %1",
        "asomebot_swing": "발목 비틀어서 발바닥 들기 %1 %2",
        "asomebot_yaho": "야호 %1",
        "asomebot_moonwalk": "문워크 춤추기 %1",
        "internet_connect": "인터넷 연결하기 %1 %2 %3",
        "internet_open_ap": "공유기 모드로 변경하기 %1 %2",
        "internet_open_udp": "%1번 포트로 UDP 소켓 열기 %2",
        "internet_udp_msg": "UDP 수신값",
        "internet_send_msg": "%1코드로 %2메시지를 전송하기 %3",
        "bingles_analogValue": "%1",
        "bingles_digitalOutput": "디지털 %1 핀, 출력 값 %2 %3",
        "bingles_servo": "서보 모터 %1 , 각도 %2 %3",
        "bingles_twoWheel": "바퀴(DC) 모터 오른쪽(2) 속도: %1 왼쪽(1) 속도: %2",
        "bingles_lcd": "LCD %1 번째 줄 ,  출력 값 %2 %3",
        "bingles_remotecontrol": "리모콘",
        "bingles_rgb": "RGB LED 켜기 R 값 %1 G 값 %2 B 값 %3",
        "bingles_rgb_picker": "RGB LED색 %1로 정하기",
        "bingles_buzzer": "%1 %2 음을 %3초 연주하기",
        "bingles_oled": "얼굴 %1 번 표현 나타내기",
        "bingles_motorgo": "방향 %1 %2 초 움직이기",
        "bitbrick_sensor_value": "%1  값",
        "bitbrick_is_touch_pressed": "버튼 %1 이(가) 눌렸는가?",
        "bitbrick_turn_off_color_led": "컬러 LED 끄기 %1",
        "bitbrick_turn_on_color_led_by_rgb": "컬러 LED 켜기 R %1 G %2 B %3 %4",
        "bitbrick_turn_on_color_led_by_picker": "컬러 LED 색  %1 로 정하기 %2",
        "bitbrick_turn_on_color_led_by_value": "컬러 LED 켜기 색 %1 로 정하기 %2",
        "bitbrick_buzzer": "버저음  %1 내기 %2",
        "bitbrick_turn_off_all_motors": "모든 모터 끄기 %1",
        "bitbrick_dc_speed": "DC 모터 %1  속도 %2 %3",
        "bitbrick_dc_direction_speed": "DC 모터 %1   %2  방향  속력 %3 %4",
        "bitbrick_servomotor_angle": "서보 모터 %1  각도 %2 %3",
        "bitbrick_convert_scale": "변환 %1 값 %2 ~ %3 에서 %4 ~ %5",
        "blacksmith_toggle_on": "켜기",
        "blacksmith_toggle_off": "끄기",
        "blacksmith_lcd_first_line": "첫 번째",
        "blacksmith_lcd_seconds_line": "두 번째",
        "blacksmith_dcmotor_direction_forward": "정방향",
        "blacksmith_dcmotor_direction_reverse": "역방향",
        "blacksmith_btData_select_number": "숫자",
        "blacksmith_btData_select_character": "문자",
        "blacksmith_set_digital_lcd": "LCD화면 %1 줄에 %2 나타내기 %3",
        "blacksmith_set_digital_bluetooth": "블루투스 TX 3 핀에 %1 데이터 보내기 %2",
        "blacksmith_get_digital": "디지털 %1 번 핀 센서 값",
        "blacksmith_get_digital_pir": "PIR %1 번 핀 센서 값",
        "blacksmith_set_digital_rgbled": "디지털 %1 번 핀의 RGB LED를 빨강 %2 초록 %3 파랑 %4 로 정하기 %5",
        "blacksmith_set_digital_dcmotor": "DC모터 %1 번 핀을 %2 %3 번 핀의 속도를 %4 로 정하기 %5",
        "blacksmith_module_digital_lcd": "LCD화면 %1 줄에 %2 나타내기 %3",
        "blacksmith_module_digital_bluetooth": "블루투스 TX 3 핀에 %1 데이터 보내기 %2",
        "blacksmith_module_digital_oled": "OLED화면 X 좌표 %1  Y 좌표 %2 에 %3 나타내기 %4",
        "brown_touching_color": "%1 에 닿았는가?",
        "brown_is_color_pattern": "색깔 패턴이 %1 %2 인가?",
        "brown_button_state": "버튼을 %1 ?",
        "brown_boolean": "%1?",
        "brown_value": "%1",
        "brown_move_forward_unit": "앞으로 %1 %2 이동하기 %3",
        "brown_move_backward_unit": "뒤로 %1 %2 이동하기 %3",
        "brown_turn_unit_in_place": "%1 으로 %2 %3 제자리 돌기 %4",
        "brown_pivot_around_wheel_unit_in_direction": "%1 바퀴 중심으로 %2 %3 %4 방향으로 돌기 %5",
        "brown_turn_unit_with_radius_in_direction": "%1 으로 %2 %3 반지름 %4 cm를 %5 방향으로 돌기 %6",
        "brown_change_wheels_by_left_right": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 만큼 바꾸기 %3",
        "brown_set_wheels_to_left_right": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 (으)로 정하기 %3",
        "brown_change_wheel_by": "%1 바퀴 %2 만큼 바꾸기 %3",
        "brown_set_wheel_to": "%1 바퀴 %2 (으)로 정하기 %3",
        "brown_follow_line": "선 따라가기 %1",
        "brown_follow_line_until": "선을 따라 %1 까지 이동하기 %2",
        "brown_cross_intersection": "교차로 건너가기 %1",
        "brown_turn_at_intersection": "교차로에서 %1 으로 돌기 %2",
        "brown_jump_line": "%1 선으로 건너가기 %2",
        "brown_set_following_speed_to": "선 따라가기 속도를 %1 (으)로 정하기 %2",
        "brown_stop": "정지하기 %1",
        "brown_set_led_to": "LED를 %1 으로 정하기 %2",
        "brown_pick_led": "LED를 %1로 정하기 %2",
        "brown_change_led_by_rgb": "LED를 R: %1 G: %2 B: %3 만큼 바꾸기 %4",
        "brown_set_led_to_rgb": "LED를 R: %1 G: %2 B: %3 (으)로 정하기 %4",
        "brown_clear_led": "LED 끄기 %1",
        "brown_play_sound_times": "%1 소리 %2 번 재생하기 %3",
        "brown_play_sound_times_until_done": "%1 소리 %2 번 재생하고 기다리기 %3",
        "brown_change_buzzer_by": "버저 음을 %1 만큼 바꾸기 %2",
        "brown_set_buzzer_to": "버저 음을 %1 (으)로 정하기 %2",
        "brown_clear_sound": "소리 끄기 %1",
        "brown_play_note": "%1 %2 음을 연주하기 %3",
        "brown_play_note_for_beats": "%1 %2 음을 %3 박자 연주하기 %4",
        "brown_rest_for_beats": "%1 박자 쉬기 %2",
        "brown_change_tempo_by": "연주 속도를 %1 만큼 바꾸기 %2",
        "brown_set_tempo_to": "연주 속도를 %1 BPM으로 정하기 %2",
        "byrobot_controller_3_4_controller_buzzer_hz": "%1 Hz 소리를 연주 %2",
        "byrobot_controller_3_4_controller_buzzer_hz_delay": "%1 Hz 소리를 %2 초 연주 %3",
        "byrobot_controller_3_4_controller_buzzer_hz_reserve": "%1 Hz 소리를 %2 초 예약 %3",
        "byrobot_controller_3_4_controller_buzzer_off": "버저 끄기 %1",
        "byrobot_controller_3_4_controller_buzzer_scale": "%1 옥타브 %2 을(를) 연주 %3",
        "byrobot_controller_3_4_controller_buzzer_scale_delay": "%1 옥타브 %2 을(를) %3 초 연주 %4",
        "byrobot_controller_3_4_controller_buzzer_scale_reserve": "%1 옥타브 %2 을(를) %3 초 예약 %4",
        "byrobot_controller_3_4_controller_if_button_press": "조종기 %1을 눌렀을 때",
        "byrobot_controller_3_4_controller_if_joystick_direction": "조종기 %1 조이스틱을 %2(으)로 움직였을 때",
        "byrobot_controller_3_4_controller_light_color_preset": "조종기 LED %1 %2 %3",
        "byrobot_controller_3_4_controller_light_manual_single_input": "조종기 LED %1 밝기 %2 %3",
        "byrobot_controller_3_4_controller_light_manual_single_off": "조종기 LED 끄기 %1",
        "byrobot_controller_3_4_controller_value_button": "%1",
        "byrobot_controller_3_4_controller_value_joystick": "%1",
        "byrobot_controller_3_4_controller_vibrator_delay": "진동 %1 초 켜기, %2 초 끄기를 %3 초 실행 %4",
        "byrobot_controller_3_4_controller_vibrator_off": "진동 끄기 %1",
        "byrobot_controller_3_4_controller_vibrator_on_delay": "진동 %1 초 켜기 %2",
        "byrobot_controller_3_4_controller_vibrator_on_reserve": "진동 %1 초 예약 %2",
        "byrobot_controller_3_4_controller_vibrator_reserve": "진동 %1 초 켜기, %2 초 끄기를 %3 초 예약 %4",
        "byrobot_controller_4_buzzer_hz": "%1 Hz 소리를 연주 %2",
        "byrobot_controller_4_buzzer_hz_delay": "%1 Hz 소리를 %2 초 연주 %3",
        "byrobot_controller_4_buzzer_hz_reserve": "%1 Hz 소리를 %2 초 예약 %3",
        "byrobot_controller_4_buzzer_off": "버저 끄기 %1",
        "byrobot_controller_4_buzzer_scale": "%1 옥타브 %2 을(를) 연주 %3",
        "byrobot_controller_4_buzzer_scale_delay": "%1 옥타브 %2 을(를) %3 초 연주 %4",
        "byrobot_controller_4_buzzer_scale_reserve": "%1 옥타브 %2 을(를) %3 초 예약 %4",
        "byrobot_controller_4_display_clear": "지우기 x %1, y %2, 너비 %3, 높이 %4 %5 %6",
        "byrobot_controller_4_display_clear_all": "조종기 화면 전체 지우기%1 %2",
        "byrobot_controller_4_display_draw_circle": "원 x %1, y %2, 반지름 %3 %4 %5 %6",
        "byrobot_controller_4_display_draw_line": "선 x1 %1, y1 %2, x2 %3, y2 %4 %5 %6 %7",
        "byrobot_controller_4_display_draw_point": "점 그리기 x %1, y %2 %3 %4",
        "byrobot_controller_4_display_draw_rect": "사각형 x %1, y %2, 너비 %3, 높이 %4 %5 %6 %7 %8",
        "byrobot_controller_4_display_draw_string": "문자열 x %1, y %2 %3 %4 입력 %5 %6",
        "byrobot_controller_4_display_draw_string_align": "문자열 정렬 x1 %1, x2 %2, y %3 %4 %5 %6 입력 %7 %8",
        "byrobot_controller_4_if_button_press": "조종기 %1 눌렀을 때",
        "byrobot_controller_4_if_joystick_direction": "조종기 %1 조이스틱 %2 움직였을 때",
        "byrobot_controller_4_controller_light_color_input": "조종기 LED R %1, G %2, B %3 %4 %5 %6",
        "byrobot_controller_4_controller_light_color_select": "조종기 LED %1 %2 %3 %4",
        "byrobot_controller_4_controller_light_color_preset": "조종기 LED %1 %2 %3",
        "byrobot_controller_4_controller_light_manual_single_input": "조종기 LED %1 밝기 %2 %3",
        "byrobot_controller_4_controller_light_manual_single_off": "조종기 LED 끄기 %1",
        "byrobot_controller_4_value_button": "%1",
        "byrobot_controller_4_value_joystick": "%1",
        "byrobot_controller_4_vibrator_delay": "진동 %1 초 켜기, %2 초 끄기를 %3 초 실행 %4",
        "byrobot_controller_4_vibrator_off": "진동 끄기 %1",
        "byrobot_controller_4_vibrator_on_delay": "진동 %1 초 켜기 %2",
        "byrobot_controller_4_vibrator_on_reserve": "진동 %1 초 예약 %2",
        "byrobot_controller_4_vibrator_reserve": "진동 %1 초 켜기, %2 초 끄기를 %3 초 예약 %4",
        "byrobot_drone_3_10_controller_buzzer_hz": "%1 Hz 소리를 연주 %2",
        "byrobot_drone_3_10_controller_buzzer_hz_delay": "%1 Hz 소리를 %2 초 연주 %3",
        "byrobot_drone_3_10_controller_buzzer_hz_reserve": "%1 Hz 소리를 %2 초 예약 %3",
        "byrobot_drone_3_10_controller_buzzer_off": "버저 끄기 %1",
        "byrobot_drone_3_10_controller_buzzer_scale": "%1 옥타브 %2 을(를) 연주 %3",
        "byrobot_drone_3_10_controller_buzzer_scale_delay": "%1 옥타브 %2 을(를) %3 초 연주 %4",
        "byrobot_drone_3_10_controller_buzzer_scale_reserve": "%1 옥타브 %2 을(를) %3 초 예약 %4",
        "byrobot_drone_3_10_controller_if_button_press": "조종기 %1을 눌렀을 때",
        "byrobot_drone_3_10_controller_if_joystick_direction": "조종기 %1 조이스틱을 %2(으)로 움직였을 때",
        "byrobot_drone_3_10_controller_light_color_preset": "조종기 LED %1 %2 %3",
        "byrobot_drone_3_10_controller_light_manual_single_input": "조종기 LED %1 밝기 %2 %3",
        "byrobot_drone_3_10_controller_light_manual_single_off": "조종기 LED 끄기 %1",
        "byrobot_drone_3_10_controller_value_button": "%1",
        "byrobot_drone_3_10_controller_value_joystick": "%1",
        "byrobot_drone_3_10_controller_vibrator_delay": "진동 %1 초 켜기, %2 초 끄기를 %3 초 실행 %4",
        "byrobot_drone_3_10_controller_vibrator_off": "진동 끄기 %1",
        "byrobot_drone_3_10_controller_vibrator_on_delay": "진동 %1 초 켜기 %2",
        "byrobot_drone_3_10_controller_vibrator_on_reserve": "진동 %1 초 예약 %2",
        "byrobot_drone_3_10_controller_vibrator_reserve": "진동 %1 초 켜기, %2 초 끄기를 %3 초 예약 %4",
        "byrobot_drone_3_10_drone_control_headless": "Headless mode %1 %2",
        "byrobot_drone_3_10_drone_control_drone_landing": "드론 착륙 %1",
        "byrobot_drone_3_10_drone_control_drone_reset_heading": "드론 방향 초기화 %1",
        "byrobot_drone_3_10_drone_control_drone_stop": "드론 정지 %1",
        "byrobot_drone_3_10_drone_control_drone_takeoff": "드론 이륙 %1",
        "byrobot_drone_3_10_drone_control_quad": "드론 Roll %1%, Pitch %2%, Yaw %3%, Throttle %4% 정하기 %5",
        "byrobot_drone_3_10_drone_control_quad_delay": "드론 Roll %1%, Pitch %2%, Yaw %3%, Throttle %4% %5초 실행 %6",
        "byrobot_drone_3_10_drone_control_quad_one": "드론 %1 %2% 정하기 %3",
        "byrobot_drone_3_10_drone_control_quad_one_delay": "드론 %1 %2% %3 초 실행 %4",
        "byrobot_drone_3_10_drone_light_color_input": "드론 LED R %1, G %2, B %3 %4 %5 %6",
        "byrobot_drone_3_10_drone_light_color_select": "드론 LED %1 %2 %3 %4",
        "byrobot_drone_3_10_drone_light_color_preset": "드론 LED %1 %2 %3",
        "byrobot_drone_3_10_drone_light_manual_single_input": "드론 LED %1 밝기 %2 %3",
        "byrobot_drone_3_10_drone_light_manual_single_off": "드론 LED 끄기 %1",
        "byrobot_drone_3_10_drone_motor_stop": "드론 모터 정지 %1",
        "byrobot_drone_3_10_drone_motorsingle": "드론 %1번 모터를 %2(으)로 회전 %3",
        "byrobot_drone_3_10_drone_motorsingle_input": "드론 %1번 모터를 %2(으)로 회전 %3",
        "byrobot_drone_3_10_drone_battle_ir_message": "드론 적외선 데이터 %1 전송 %2",
        "byrobot_drone_3_10_drone_value_attitude": "%1",
        "byrobot_drone_3_10_drone_value_motion": "%1",
        "byrobot_drone_3_10_drone_value_sensor": "%1",
        "byrobot_drone_3_10_drone_value_ir": "%1",
        "byrobot_drone_3_10_drone_value_etc": "%1",
        "byrobot_drone_4_controller_buzzer_hz": "%1Hz 소리를 연주 %2",
        "byrobot_drone_4_controller_buzzer_hz_delay": "%1Hz 소리를 %2초 연주 %3",
        "byrobot_drone_4_controller_buzzer_hz_reserve": "%1Hz 소리를 %2초 예약 %3",
        "byrobot_drone_4_controller_buzzer_off": "버저 끄기 %1",
        "byrobot_drone_4_controller_buzzer_scale": "%1 옥타브 %2을(를) 연주 %3",
        "byrobot_drone_4_controller_buzzer_scale_delay": "%1 옥타브 %2을(를) %3초 연주 %4",
        "byrobot_drone_4_controller_buzzer_scale_reserve": "%1 옥타브 %2을(를) %3초 예약 %4",
        "byrobot_drone_4_controller_display_clear": "지우기 x %1, y %2, 너비 %3, 높이 %4 %5 %6",
        "byrobot_drone_4_controller_display_clear_all": "화면 전체 지우기%1 %2",
        "byrobot_drone_4_controller_display_draw_circle": "원 x %1, y %2, 반지름 %3 %4 %5 %6",
        "byrobot_drone_4_controller_display_draw_line": "선 x1 %1, y1 %2, x2 %3, y2 %4 %5 %6 %7",
        "byrobot_drone_4_controller_display_draw_point": "점 그리기 x %1, y %2 %3 %4",
        "byrobot_drone_4_controller_display_draw_rect": "사각형 x %1, y %2, 너비 %3, 높이 %4 %5 %6 %7 %8",
        "byrobot_drone_4_controller_display_draw_string": "문자열 x %1, y %2 %3 %4 입력 %5 %6",
        "byrobot_drone_4_controller_display_draw_string_align": "문자열 정렬 x1 %1, x2 %2, y %3 %4 %5 %6 입력 %7 %8",
        "byrobot_drone_4_controller_if_button_press": "조종기 %1 눌렀을 때",
        "byrobot_drone_4_controller_if_joystick_direction": "조종기 %1 조이스틱 %2 (으)로 움직였을 때",
        "byrobot_drone_4_controller_light_color_input": "조종기 LED R %1, G %2, B %3 %4 %5 %6",
        "byrobot_drone_4_controller_light_color_select": "조종기 LED %1 %2 %3 %4",
        "byrobot_drone_4_controller_light_color_preset": "조종기 LED %1 %2 %3",
        "byrobot_drone_4_controller_light_manual_single_input": "조종기 LED %1 밝기 %2 %3",
        "byrobot_drone_4_controller_light_manual_single_off": "조종기 LED 끄기 %1",
        "byrobot_drone_4_controller_value_button": "%1",
        "byrobot_drone_4_controller_value_joystick": "%1",
        "byrobot_drone_4_controller_vibrator_delay": "진동 %1초 켜기, %2초 끄기를 %3초 실행 %4",
        "byrobot_drone_4_controller_vibrator_off": "진동 끄기 %1",
        "byrobot_drone_4_controller_vibrator_on_delay": "진동 %1초 켜기 %2",
        "byrobot_drone_4_controller_vibrator_on_reserve": "진동 %1초 예약 %2",
        "byrobot_drone_4_controller_vibrator_reserve": "진동 %1초 켜기, %2초 끄기를 %3초 예약 %4",
        "byrobot_drone_4_drone_control_headless": "Headless mode %1 %2",
        "byrobot_drone_4_drone_control_drone_landing": "드론 착륙 %1",
        "byrobot_drone_4_drone_control_drone_reset_heading": "드론 방향 초기화 %1",
        "byrobot_drone_4_drone_control_drone_stop": "드론 정지 %1",
        "byrobot_drone_4_drone_control_drone_takeoff": "드론 이륙 %1",
        "byrobot_drone_4_drone_control_quad_one": "드론 %1 %2% 정하기 %3",
        "byrobot_drone_4_drone_control_quad_one_delay": "드론 %1 %2% %3 초 실행 %4",
        "byrobot_drone_4_drone_control_quad": "드론 Roll %1%, Pitch %2%, Yaw %3%, Throttle %4% 정하기 %5",
        "byrobot_drone_4_drone_control_quad_delay": "드론 Roll %1%, Pitch %2%, Yaw %3%, Throttle %4% %5초 실행 %6",
        "byrobot_drone_4_drone_control_position_one": "드론 %1(으)로 %2m를 %3m/s로 이동 %4",
        "byrobot_drone_4_drone_control_position_turn": "드론 %1(으)로 %2도를 %3deg/s로 회전 %4",
        "byrobot_drone_4_drone_control_position_location": "드론 %1 %2m, %3 %4m, %5 %6m를 %7m/s로 이동 %8",
        "byrobot_drone_4_drone_control_position_location_turn": "드론 %1 %2m, %3 %4m, %5 %6m를 %7m/s로 이동, %8 %9도를 %10deg/s로 회전 %11",
        "byrobot_drone_4_drone_light_color_input": "드론 LED R %1, G %2, B %3 %4 %5 %6",
        "byrobot_drone_4_drone_light_color_select": "드론 LED %1 %2 %3 %4",
        "byrobot_drone_4_drone_light_color_preset": "드론 LED %1 %2 %3",
        "byrobot_drone_4_drone_light_manual_single_input": "드론 LED %1 밝기 %2 %3",
        "byrobot_drone_4_drone_light_manual_single_off": "드론 LED 끄기 %1",
        "byrobot_drone_4_drone_motor_stop": "드론 모터 정지 %1",
        "byrobot_drone_4_drone_motorsingle": "드론 %1번 모터를 %2(으)로 회전 %3",
        "byrobot_drone_4_drone_motorsingle_input": "드론 %1번 모터를 %2(으)로 회전 %3",
        "byrobot_drone_4_drone_value_attitude": "%1",
        "byrobot_drone_4_drone_value_motion": "%1",
        "byrobot_drone_4_drone_value_position": "%1",
        "byrobot_drone_4_drone_value_sensor": "%1",
        "byrobot_drone_4_drone_value_etc": "%1",
        "byrobot_drone_8_controller_buzzer_hz": "%1 %2Hz 소리를 연주 %3",
        "byrobot_drone_8_controller_buzzer_hz_delay": "%1 %2Hz 소리를 %3초 연주 %4",
        "byrobot_drone_8_controller_buzzer_hz_reserve": "%1 %2Hz 소리를 %3초 예약 %4",
        "byrobot_drone_8_controller_buzzer_off": "%1 버저 끄기 %2",
        "byrobot_drone_8_controller_buzzer_scale": "%1 %2 옥타브 %3을(를) 연주 %4",
        "byrobot_drone_8_controller_buzzer_scale_delay": "%1 %2 옥타브 %3을(를) %4초 연주 %5",
        "byrobot_drone_8_controller_buzzer_scale_reserve": "%1 %2 옥타브 %3을(를) %4초 예약 %5",
        "byrobot_drone_8_controller_display_clear": "지우기 x %1, y %2, 너비 %3, 높이 %4 %5 %6",
        "byrobot_drone_8_controller_display_clear_all": "화면 전체 지우기%1 %2",
        "byrobot_drone_8_controller_display_draw_circle": "원 x %1, y %2, 반지름 %3 %4 %5 %6",
        "byrobot_drone_8_controller_display_draw_line": "선 x1 %1, y1 %2, x2 %3, y2 %4 %5 %6 %7",
        "byrobot_drone_8_controller_display_draw_point": "점 그리기 x %1, y %2 %3 %4",
        "byrobot_drone_8_controller_display_draw_rect": "사각형 x %1, y %2, 너비 %3, 높이 %4 %5 %6 %7 %8",
        "byrobot_drone_8_controller_display_draw_string": "문자열 x %1, y %2 %3 %4 입력 %5 %6",
        "byrobot_drone_8_controller_display_draw_string_align": "문자열 정렬 x1 %1, x2 %2, y %3 %4 %5 %6 입력 %7 %8",
        "byrobot_drone_8_controller_if_button_press": "조종기 %1 눌렀을 때",
        "byrobot_drone_8_controller_if_joystick_direction": "조종기 %1 조이스틱 %2 (으)로 움직였을 때",
        "byrobot_drone_8_controller_light_color_input": "조종기 LED R %1, G %2, B %3 %4 %5 %6",
        "byrobot_drone_8_controller_light_color_select": "조종기 LED %1 %2 %3 %4",
        "byrobot_drone_8_controller_light_color_preset": "조종기 LED %1 %2 %3",
        "byrobot_drone_8_controller_light_manual_single_input": "조종기 LED %1 밝기 %2 %3",
        "byrobot_drone_8_controller_light_manual_single_off": "조종기 LED 끄기 %1",
        "byrobot_drone_8_controller_value_button": "%1",
        "byrobot_drone_8_controller_value_joystick": "%1",
        "byrobot_drone_8_controller_vibrator_delay": "진동 %1초 켜기, %2초 끄기를 %3초 실행 %4",
        "byrobot_drone_8_controller_vibrator_off": "진동 끄기 %1",
        "byrobot_drone_8_controller_vibrator_on_delay": "진동 %1초 켜기 %2",
        "byrobot_drone_8_controller_vibrator_on_reserve": "진동 %1초 예약 %2",
        "byrobot_drone_8_controller_vibrator_reserve": "진동 %1초 켜기, %2초 끄기를 %3초 예약 %4",
        "byrobot_drone_8_drone_control_headless": "Headless mode %1 %2",
        "byrobot_drone_8_drone_control_drone_landing": "드론 착륙 %1",
        "byrobot_drone_8_drone_control_drone_reset_heading": "드론 방향 초기화 %1",
        "byrobot_drone_8_drone_control_drone_stop": "드론 정지 %1",
        "byrobot_drone_8_drone_control_drone_takeoff": "드론 이륙 %1",
        "byrobot_drone_8_drone_control_quad_one": "드론 %1 %2% 정하기 %3",
        "byrobot_drone_8_drone_control_quad_one_delay": "드론 %1 %2% %3 초 실행 %4",
        "byrobot_drone_8_drone_control_quad": "드론 Roll %1%, Pitch %2%, Yaw %3%, Throttle %4% 정하기 %5",
        "byrobot_drone_8_drone_control_quad_delay": "드론 Roll %1%, Pitch %2%, Yaw %3%, Throttle %4% %5초 실행 %6",
        "byrobot_drone_8_drone_control_position_one": "드론 %1(으)로 %2m를 %3m/s로 이동 %4",
        "byrobot_drone_8_drone_control_position_turn": "드론 %1(으)로 %2도를 %3deg/s로 회전 %4",
        "byrobot_drone_8_drone_control_position_location": "드론 %1 %2m, %3 %4m, %5 %6m를 %7m/s로 이동 %8",
        "byrobot_drone_8_drone_control_position_location_turn": "드론 %1 %2m, %3 %4m, %5 %6m를 %7m/s로 이동, %8 %9도를 %10deg/s로 회전 %11",
        "byrobot_drone_8_drone_light_color_input": "드론 LED R %1, G %2, B %3 %4 %5 %6",
        "byrobot_drone_8_drone_light_color_select": "드론 LED %1 %2 %3 %4",
        "byrobot_drone_8_drone_light_color_preset": "드론 LED %1 %2 %3",
        "byrobot_drone_8_drone_light_manual_single_input": "드론 LED %1 밝기 %2 %3",
        "byrobot_drone_8_drone_light_manual_single_off": "드론 LED 끄기 %1",
        "byrobot_drone_8_drone_motor_stop": "드론 모터 정지 %1",
        "byrobot_drone_8_drone_motorsingle": "드론 %1번 모터를 %2(으)로 회전 %3",
        "byrobot_drone_8_drone_motorsingle_input": "드론 %1번 모터를 %2(으)로 회전 %3",
        "byrobot_drone_8_drone_value_attitude": "%1",
        "byrobot_drone_8_drone_value_motion": "%1",
        "byrobot_drone_8_drone_value_position": "%1",
        "byrobot_drone_8_drone_value_sensor": "%1",
        "byrobot_drone_8_drone_value_card": "%1",
        "byrobot_drone_8_drone_value_etc": "%1",
        "byrobot_dronefighter_controller_controller_value_button": "%1",
        "byrobot_dronefighter_controller_controller_value_joystick": "%1",
        "byrobot_dronefighter_controller_controller_if_button_press": "조종기 %1 눌렀을 때",
        "byrobot_dronefighter_controller_controller_if_joystick_direction": "조종기 %1 조이스틱 %2 움직였을 때",
        "byrobot_dronefighter_controller_controller_light_manual_single_off": "조종기 LED 끄기 %1",
        "byrobot_dronefighter_controller_controller_light_manual_single": "조종기 LED %1 %2 %3",
        "byrobot_dronefighter_controller_controller_light_manual_single_input": "조종기 LED %1 밝기 %2 %3",
        "byrobot_dronefighter_controller_controller_buzzer_off": "버저 끄기 %1",
        "byrobot_dronefighter_controller_controller_buzzer_scale": "%1 옥타브 %2 을(를) 연주 %3",
        "byrobot_dronefighter_controller_controller_buzzer_scale_delay": "%1 옥타브 %2 을(를) %3 초 연주 %4",
        "byrobot_dronefighter_controller_controller_buzzer_scale_reserve": "%1 옥타브 %2 을(를) %3 초 예약 %4",
        "byrobot_dronefighter_controller_controller_buzzer_hz": "%1 Hz 소리를 연주 %2",
        "byrobot_dronefighter_controller_controller_buzzer_hz_delay": "%1 Hz 소리를 %2 초 연주 %3",
        "byrobot_dronefighter_controller_controller_buzzer_hz_reserve": "%1 Hz 소리를 %2 초 예약 %3",
        "byrobot_dronefighter_controller_controller_vibrator_off": "진동 끄기 %1",
        "byrobot_dronefighter_controller_controller_vibrator_on_delay": "진동 %1 초 켜기 %2",
        "byrobot_dronefighter_controller_controller_vibrator_on_reserve": "진동 %1 초 예약 %2",
        "byrobot_dronefighter_controller_controller_vibrator_delay": "진동 %1 초 켜기, %2 초 끄기를 %3 초 실행 %4",
        "byrobot_dronefighter_controller_controller_vibrator_reserve": "진동 %1 초 켜기, %2 초 끄기를 %3 초 예약 %4",
        "byrobot_dronefighter_controller_controller_userinterface_preset": "조종기 설정 모드 사용자 인터페이스를 %1(으)로 변경%2",
        "byrobot_dronefighter_controller_controller_userinterface": "조종기 설정 모드에서 %1 %2 실행 %3",
        "byrobot_dronefighter_drive_drone_value_attitude": "%1",
        "byrobot_dronefighter_drive_drone_value_etc": "%1",
        "byrobot_dronefighter_drive_controller_value_button": "%1",
        "byrobot_dronefighter_drive_controller_value_joystick": "%1",
        "byrobot_dronefighter_drive_controller_if_button_press": "조종기 %1 눌렀을 때",
        "byrobot_dronefighter_drive_controller_if_joystick_direction": "조종기 %1 조이스틱 %2 움직였을 때",
        "byrobot_dronefighter_drive_drone_control_car_stop": "자동차 정지 %1",
        "byrobot_dronefighter_drive_drone_control_double_one": "자동차를 %1 %2% 정하기 %3",
        "byrobot_dronefighter_drive_drone_control_double_one_delay": "자동차를 %1 %2% %3 초 실행 %4",
        "byrobot_dronefighter_drive_drone_control_double": "자동차를 방향 %1%, 전진 %2% 정하기 %3",
        "byrobot_dronefighter_drive_drone_motor_stop": "모터 정지 %1",
        "byrobot_dronefighter_drive_drone_motorsingle": "%1 번 모터를 %2 (으)로 회전 %3",
        "byrobot_dronefighter_drive_drone_motorsingle_input": "%1 번 모터를 %2 (으)로 회전 %3",
        "byrobot_dronefighter_drive_drone_irmessage": "적외선으로 %1 값 보내기 %2",
        "byrobot_dronefighter_drive_controller_light_manual_single_off": "조종기 LED 끄기 %1",
        "byrobot_dronefighter_drive_controller_light_manual_single": "조종기 LED %1 %2 %3",
        "byrobot_dronefighter_drive_controller_light_manual_single_input": "조종기 LED %1 밝기 %2 %3",
        "byrobot_dronefighter_drive_drone_light_manual_single_off": "자동차 LED 끄기 %1",
        "byrobot_dronefighter_drive_drone_light_manual_single": "자동차 LED %1 %2 %3",
        "byrobot_dronefighter_drive_drone_light_manual_single_input": "자동차 LED %1 밝기 %2 %3",
        "byrobot_dronefighter_drive_controller_buzzer_off": "버저 끄기 %1",
        "byrobot_dronefighter_drive_controller_buzzer_scale": "%1 옥타브 %2 을(를) 연주 %3",
        "byrobot_dronefighter_drive_controller_buzzer_scale_delay": "%1 옥타브 %2 을(를) %3 초 연주 %4",
        "byrobot_dronefighter_drive_controller_buzzer_scale_reserve": "%1 옥타브 %2 을(를) %3 초 예약 %4",
        "byrobot_dronefighter_drive_controller_buzzer_hz": "%1 Hz 소리를 연주 %2",
        "byrobot_dronefighter_drive_controller_buzzer_hz_delay": "%1 Hz 소리를 %2 초 연주 %3",
        "byrobot_dronefighter_drive_controller_buzzer_hz_reserve": "%1 Hz 소리를 %2 초 예약 %3",
        "byrobot_dronefighter_drive_controller_vibrator_off": "진동 끄기 %1",
        "byrobot_dronefighter_drive_controller_vibrator_on_delay": "진동 %1 초 켜기 %2",
        "byrobot_dronefighter_drive_controller_vibrator_on_reserve": "진동 %1 초 예약 %2",
        "byrobot_dronefighter_drive_controller_vibrator_delay": "진동 %1 초 켜기, %2 초 끄기를 %3 초 실행 %4",
        "byrobot_dronefighter_drive_controller_vibrator_reserve": "진동 %1 초 켜기, %2 초 끄기를 %3 초 예약 %4",
        "byrobot_dronefighter_flight_drone_value_attitude": "%1",
        "byrobot_dronefighter_flight_drone_value_etc": "%1",
        "byrobot_dronefighter_flight_controller_value_button": "%1",
        "byrobot_dronefighter_flight_controller_value_joystick": "%1",
        "byrobot_dronefighter_flight_controller_if_button_press": "조종기 %1 눌렀을 때",
        "byrobot_dronefighter_flight_controller_if_joystick_direction": "조종기 %1 조이스틱 %2 움직였을 때",
        "byrobot_dronefighter_flight_drone_control_drone_stop": "드론 정지 %1",
        "byrobot_dronefighter_flight_drone_control_coordinate": "드론 좌표 기준을 %1로 정하기 %2",
        "byrobot_dronefighter_flight_drone_control_drone_reset_heading": "드론 방향 초기화 %1",
        "byrobot_dronefighter_flight_drone_control_quad_one": "드론 %1 %2% 정하기 %3",
        "byrobot_dronefighter_flight_drone_control_quad_one_delay": "드론 %1 %2% %3 초 실행 %4",
        "byrobot_dronefighter_flight_drone_control_quad": "드론 Roll %1%, Pitch %2%, Yaw %3%, Throttle %4% 정하기 %5",
        "byrobot_dronefighter_flight_drone_motor_stop": "모터 정지 %1",
        "byrobot_dronefighter_flight_drone_motorsingle": "%1 번 모터를 %2 (으)로 회전 %3",
        "byrobot_dronefighter_flight_drone_motorsingle_input": "%1 번 모터를 %2 (으)로 회전 %3",
        "byrobot_dronefighter_flight_drone_irmessage": "적외선으로 %1 값 보내기 %2",
        "byrobot_dronefighter_flight_controller_light_manual_single_off": "조종기 LED 끄기 %1",
        "byrobot_dronefighter_flight_controller_light_manual_single": "조종기 LED %1 %2 %3",
        "byrobot_dronefighter_flight_controller_light_manual_single_input": "조종기 LED %1 밝기 %2 %3",
        "byrobot_dronefighter_flight_drone_light_manual_single_off": "드론 LED 끄기 %1",
        "byrobot_dronefighter_flight_drone_light_manual_single": "드론 LED %1 %2 %3",
        "byrobot_dronefighter_flight_drone_light_manual_single_input": "드론 LED %1 밝기 %2 %3",
        "byrobot_dronefighter_flight_controller_buzzer_off": "버저 끄기 %1",
        "byrobot_dronefighter_flight_controller_buzzer_scale": "%1 옥타브 %2 을(를) 연주 %3",
        "byrobot_dronefighter_flight_controller_buzzer_scale_delay": "%1 옥타브 %2 을(를) %3 초 연주 %4",
        "byrobot_dronefighter_flight_controller_buzzer_scale_reserve": "%1 옥타브 %2 을(를) %3 초 예약 %4",
        "byrobot_dronefighter_flight_controller_buzzer_hz": "%1 Hz 소리를 연주 %2",
        "byrobot_dronefighter_flight_controller_buzzer_hz_delay": "%1 Hz 소리를 %2 초 연주 %3",
        "byrobot_dronefighter_flight_controller_buzzer_hz_reserve": "%1 Hz 소리를 %2 초 예약 %3",
        "byrobot_dronefighter_flight_controller_vibrator_off": "진동 끄기 %1",
        "byrobot_dronefighter_flight_controller_vibrator_on_delay": "진동 %1 초 켜기 %2",
        "byrobot_dronefighter_flight_controller_vibrator_on_reserve": "진동 %1 초 예약 %2",
        "byrobot_dronefighter_flight_controller_vibrator_delay": "진동 %1 초 켜기, %2 초 끄기를 %3 초 실행 %4",
        "byrobot_dronefighter_flight_controller_vibrator_reserve": "진동 %1 초 켜기, %2 초 끄기를 %3 초 예약 %4",
        "byrobot_petrone_v2_controller_controller_buzzer_hz": "%1 Hz 소리를 연주 %2",
        "byrobot_petrone_v2_controller_controller_buzzer_hz_delay": "%1 Hz 소리를 %2 초 연주 %3",
        "byrobot_petrone_v2_controller_controller_buzzer_hz_reserve": "%1 Hz 소리를 %2 초 예약 %3",
        "byrobot_petrone_v2_controller_controller_buzzer_off": "버저 끄기 %1",
        "byrobot_petrone_v2_controller_controller_buzzer_scale": "%1 옥타브 %2 을(를) 연주 %3",
        "byrobot_petrone_v2_controller_controller_buzzer_scale_delay": "%1 옥타브 %2 을(를) %3 초 연주 %4",
        "byrobot_petrone_v2_controller_controller_buzzer_scale_reserve": "%1 옥타브 %2 을(를) %3 초 예약 %4",
        "byrobot_petrone_v2_controller_controller_display_clear": "지우기 x %1, y %2, 너비 %3, 높이 %4 %5 %6",
        "byrobot_petrone_v2_controller_controller_display_clear_all": "조종기 화면 전체 지우기%1 %2",
        "byrobot_petrone_v2_controller_controller_display_draw_circle": "원 x %1, y %2, 반지름 %3 %4 %5 %6",
        "byrobot_petrone_v2_controller_controller_display_draw_line": "선 x1 %1, y1 %2, x2 %3, y2 %4 %5 %6 %7",
        "byrobot_petrone_v2_controller_controller_display_draw_point": "점 그리기 x %1, y %2 %3 %4",
        "byrobot_petrone_v2_controller_controller_display_draw_rect": "사각형 x %1, y %2, 너비 %3, 높이 %4 %5 %6 %7 %8",
        "byrobot_petrone_v2_controller_controller_display_draw_string": "문자열 x %1, y %2 %3 %4 입력 %5 %6",
        "byrobot_petrone_v2_controller_controller_display_draw_string_align": "문자열 정렬 x1 %1, x2 %2, y %3 %4 %5 %6 입력 %7 %8",
        "byrobot_petrone_v2_controller_controller_display_invert": "색반전 x %1, y %2, 너비 %3, 높이 %4 %5",
        "byrobot_petrone_v2_controller_controller_if_button_press": "조종기 %1 눌렀을 때",
        "byrobot_petrone_v2_controller_controller_if_joystick_direction": "조종기 %1 조이스틱 %2 움직였을 때",
        "byrobot_petrone_v2_controller_controller_light_color_input": "조종기 LED 색지정 R %1, G %2, B %3 %4 %5 %6",
        "byrobot_petrone_v2_controller_controller_light_color_select": "조종기 LED의 RGB 조합 예시 %1 %2 %3 %4",
        "byrobot_petrone_v2_controller_controller_light_color_preset": "조종기 LED %1 %2 %3",
        "byrobot_petrone_v2_controller_controller_light_manual_single_input": "조종기 LED %1 밝기 %2 %3",
        "byrobot_petrone_v2_controller_controller_light_manual_single_off": "조종기 LED 끄기 %1",
        "byrobot_petrone_v2_controller_controller_value_button": "%1",
        "byrobot_petrone_v2_controller_controller_value_joystick": "%1",
        "byrobot_petrone_v2_controller_controller_vibrator_delay": "진동 %1 초 켜기, %2 초 끄기를 %3 초 실행 %4",
        "byrobot_petrone_v2_controller_controller_vibrator_off": "진동 끄기 %1",
        "byrobot_petrone_v2_controller_controller_vibrator_on_delay": "진동 %1 초 켜기 %2",
        "byrobot_petrone_v2_controller_controller_vibrator_on_reserve": "진동 %1 초 예약 %2",
        "byrobot_petrone_v2_controller_controller_vibrator_reserve": "진동 %1 초 켜기, %2 초 끄기를 %3 초 예약 %4",
        "byrobot_petrone_v2_drive_controller_buzzer_hz": "%1 Hz 소리를 연주 %2",
        "byrobot_petrone_v2_drive_controller_buzzer_hz_delay": "%1 Hz 소리를 %2 초 연주 %3",
        "byrobot_petrone_v2_drive_controller_buzzer_hz_reserve": "%1 Hz 소리를 %2 초 예약 %3",
        "byrobot_petrone_v2_drive_controller_buzzer_off": "버저 끄기 %1",
        "byrobot_petrone_v2_drive_controller_buzzer_scale": "%1 옥타브 %2 을(를) 연주 %3",
        "byrobot_petrone_v2_drive_controller_buzzer_scale_delay": "%1 옥타브 %2 을(를) %3 초 연주 %4",
        "byrobot_petrone_v2_drive_controller_buzzer_scale_reserve": "%1 옥타브 %2 을(를) %3 초 예약 %4",
        "byrobot_petrone_v2_drive_controller_display_clear": "지우기 x %1, y %2, 너비 %3, 높이 %4 %5 %6",
        "byrobot_petrone_v2_drive_controller_display_clear_all": "조종기 화면 전체 지우기%1 %2",
        "byrobot_petrone_v2_drive_controller_display_draw_circle": "원 x %1, y %2, 반지름 %3 %4 %5 %6",
        "byrobot_petrone_v2_drive_controller_display_draw_line": "선 x1 %1, y1 %2, x2 %3, y2 %4 %5 %6 %7",
        "byrobot_petrone_v2_drive_controller_display_draw_point": "점 그리기 x %1, y %2 %3 %4",
        "byrobot_petrone_v2_drive_controller_display_draw_rect": "사각형 x %1, y %2, 너비 %3, 높이 %4 %5 %6 %7 %8",
        "byrobot_petrone_v2_drive_controller_display_draw_string": "문자열 x %1, y %2 %3 %4 입력 %5 %6",
        "byrobot_petrone_v2_drive_controller_display_draw_string_align": "문자열 정렬 x1 %1, x2 %2, y %3 %4 %5 %6 입력 %7 %8",
        "byrobot_petrone_v2_drive_controller_display_invert": "색반전 x %1, y %2, 너비 %3, 높이 %4 %5",
        "byrobot_petrone_v2_drive_controller_if_button_press": "조종기 %1 눌렀을 때",
        "byrobot_petrone_v2_drive_controller_if_joystick_direction": "조종기 %1 조이스틱 %2 움직였을 때",
        "byrobot_petrone_v2_drive_controller_light_color_input": "조종기 LED 색지정 R %1, G %2, B %3 %4 %5 %6",
        "byrobot_petrone_v2_drive_controller_light_color_select": "조종기 LED의 RGB 조합 예시 %1 %2 %3 %4",
        "byrobot_petrone_v2_drive_controller_light_color_preset": "조종기 LED %1 %2 %3",
        "byrobot_petrone_v2_drive_controller_light_manual_single_input": "조종기 LED %1 밝기 %2 %3",
        "byrobot_petrone_v2_drive_controller_light_manual_single_off": "조종기 LED 끄기 %1",
        "byrobot_petrone_v2_drive_controller_value_button": "%1",
        "byrobot_petrone_v2_drive_controller_value_joystick": "%1",
        "byrobot_petrone_v2_drive_controller_vibrator_delay": "진동 %1 초 켜기, %2 초 끄기를 %3 초 실행 %4",
        "byrobot_petrone_v2_drive_controller_vibrator_off": "진동 끄기 %1",
        "byrobot_petrone_v2_drive_controller_vibrator_on_delay": "진동 %1 초 켜기 %2",
        "byrobot_petrone_v2_drive_controller_vibrator_on_reserve": "진동 %1 초 예약 %2",
        "byrobot_petrone_v2_drive_controller_vibrator_reserve": "진동 %1 초 켜기, %2 초 끄기를 %3 초 예약 %4",
        "byrobot_petrone_v2_drive_drone_command_mode_vehicle_car": "Vehicle mode %1 선택 %2",
        "byrobot_petrone_v2_drive_drone_control_car_stop": "자동차 정지 %1",
        "byrobot_petrone_v2_drive_drone_control_double": "자동차를 방향 %1%, 전진/후진 %2% 정하기 %3",
        "byrobot_petrone_v2_drive_drone_control_double_delay": "자동차를 방향 %1%, 전진/후진 %2% %3 초 실행 %4",
        "byrobot_petrone_v2_drive_drone_control_double_one": "자동차를 %1 %2% 정하기 %3",
        "byrobot_petrone_v2_drive_drone_control_double_one_delay": "자동차를 %1 %2% %3 초 실행 %4",
        "byrobot_petrone_v2_drive_drone_irmessage": "적외선으로 %1 값 보내기 %2",
        "byrobot_petrone_v2_drive_drone_light_color_input": "자동차 %1 LED 색지정 R %2, G %3, B %4 %5 %6 %7",
        "byrobot_petrone_v2_drive_drone_light_color_select": "자동차 %1 LED의 RGB 조합 예시 %2 %3 %4 %5",
        "byrobot_petrone_v2_drive_drone_light_color_preset": "자동차 LED %1 %2 %3",
        "byrobot_petrone_v2_drive_drone_light_manual_single_input": "자동차 LED %1 밝기 %2 %3",
        "byrobot_petrone_v2_drive_drone_light_manual_single_off": "자동차 LED 끄기 %1",
        "byrobot_petrone_v2_drive_drone_motor_stop": "모터 정지 %1",
        "byrobot_petrone_v2_drive_drone_motorsingle": "%1번 모터를 %2(으)로 회전 %3",
        "byrobot_petrone_v2_drive_drone_motorsingle_input": "%1번 모터를 %2(으)로 회전 %3",
        "byrobot_petrone_v2_drive_drone_motorsingle_rotation": "%1번 모터를 %2으로 %3(으)로 회전 %4",
        "byrobot_petrone_v2_drive_drone_value_attitude": "%1",
        "byrobot_petrone_v2_drive_drone_value_etc": "%1",
        "byrobot_petrone_v2_drive_drone_value_imu": "%1",
        "byrobot_petrone_v2_drive_drone_value_sensor": "%1",
        "byrobot_petrone_v2_flight_controller_buzzer_hz": "%1 Hz 소리를 연주 %2",
        "byrobot_petrone_v2_flight_controller_buzzer_hz_delay": "%1 Hz 소리를 %2 초 연주 %3",
        "byrobot_petrone_v2_flight_controller_buzzer_hz_reserve": "%1 Hz 소리를 %2 초 예약 %3",
        "byrobot_petrone_v2_flight_controller_buzzer_off": "버저 끄기 %1",
        "byrobot_petrone_v2_flight_controller_buzzer_scale": "%1 옥타브 %2 을(를) 연주 %3",
        "byrobot_petrone_v2_flight_controller_buzzer_scale_delay": "%1 옥타브 %2 을(를) %3 초 연주 %4",
        "byrobot_petrone_v2_flight_controller_buzzer_scale_reserve": "%1 옥타브 %2 을(를) %3 초 예약 %4",
        "byrobot_petrone_v2_flight_controller_display_clear": "지우기 x %1, y %2, 너비 %3, 높이 %4 %5 %6",
        "byrobot_petrone_v2_flight_controller_display_clear_all": "조종기 화면 전체 지우기%1 %2",
        "byrobot_petrone_v2_flight_controller_display_draw_circle": "원 x %1, y %2, 반지름 %3 %4 %5 %6",
        "byrobot_petrone_v2_flight_controller_display_draw_line": "선 x1 %1, y1 %2, x2 %3, y2 %4 %5 %6 %7",
        "byrobot_petrone_v2_flight_controller_display_draw_point": "점 그리기 x %1, y %2 %3 %4",
        "byrobot_petrone_v2_flight_controller_display_draw_rect": "사각형 x %1, y %2, 너비 %3, 높이 %4 %5 %6 %7 %8",
        "byrobot_petrone_v2_flight_controller_display_draw_string": "문자열 x %1, y %2 %3 %4 입력 %5 %6",
        "byrobot_petrone_v2_flight_controller_display_draw_string_align": "문자열 정렬 x1 %1, x2 %2, y %3 %4 %5 %6 입력 %7 %8",
        "byrobot_petrone_v2_flight_controller_display_invert": "색반전 x %1, y %2, 너비 %3, 높이 %4 %5",
        "byrobot_petrone_v2_flight_controller_if_button_press": "조종기 %1 눌렀을 때",
        "byrobot_petrone_v2_flight_controller_if_joystick_direction": "조종기 %1 조이스틱 %2 움직였을 때",
        "byrobot_petrone_v2_flight_controller_light_color_input": "조종기 LED 색지정 R %1, G %2, B %3 %4 %5 %6",
        "byrobot_petrone_v2_flight_controller_light_color_select": "조종기 LED의 RGB 조합 예시 %1 %2 %3 %4",
        "byrobot_petrone_v2_flight_controller_light_color_preset": "조종기 LED %1 %2 %3",
        "byrobot_petrone_v2_flight_controller_light_manual_single_input": "조종기 LED %1 밝기 %2 %3",
        "byrobot_petrone_v2_flight_controller_light_manual_single_off": "조종기 LED 끄기 %1",
        "byrobot_petrone_v2_flight_controller_value_button": "%1",
        "byrobot_petrone_v2_flight_controller_value_joystick": "%1",
        "byrobot_petrone_v2_flight_controller_vibrator_delay": "진동 %1 초 켜기, %2 초 끄기를 %3 초 실행 %4",
        "byrobot_petrone_v2_flight_controller_vibrator_off": "진동 끄기 %1",
        "byrobot_petrone_v2_flight_controller_vibrator_on_delay": "진동 %1 초 켜기 %2",
        "byrobot_petrone_v2_flight_controller_vibrator_on_reserve": "진동 %1 초 예약 %2",
        "byrobot_petrone_v2_flight_controller_vibrator_reserve": "진동 %1 초 켜기, %2 초 끄기를 %3 초 예약 %4",
        "byrobot_petrone_v2_flight_drone_command_mode_vehicle_drone": "Vehicle mode %1 선택 %2",
        "byrobot_petrone_v2_flight_drone_control_coordinate": "(드론 좌표 기준) Headless mode %1 %2",
        "byrobot_petrone_v2_flight_drone_control_drone_landing": "드론 착륙 %1",
        "byrobot_petrone_v2_flight_drone_control_drone_reset_heading": "드론 방향 초기화 %1",
        "byrobot_petrone_v2_flight_drone_control_drone_stop": "드론 정지 %1",
        "byrobot_petrone_v2_flight_drone_control_drone_takeoff": "드론 이륙 %1",
        "byrobot_petrone_v2_flight_drone_control_quad": "드론 Roll %1%, Pitch %2%, Yaw %3%, Throttle %4% 정하기 %5",
        "byrobot_petrone_v2_flight_drone_control_quad_delay": "드론 Roll %1%, Pitch %2%, Yaw %3%, Throttle %4% %5초 실행 %6",
        "byrobot_petrone_v2_flight_drone_control_quad_one": "드론 %1 %2% 정하기 %3",
        "byrobot_petrone_v2_flight_drone_control_quad_one_delay": "드론 %1 %2% %3 초 실행 %4",
        "byrobot_petrone_v2_flight_drone_irmessage": "적외선으로 %1 값 보내기 %2",
        "byrobot_petrone_v2_flight_drone_light_color_input": "드론 %1 LED 색지정 R %2, G %3, B %4 %5 %6 %7",
        "byrobot_petrone_v2_flight_drone_light_color_select": "드론 %1 LED의 RGB 조합 예시 %2 %3 %4 %5",
        "byrobot_petrone_v2_flight_drone_light_color_preset": "드론 LED %1 %2 %3",
        "byrobot_petrone_v2_flight_drone_light_manual_single_input": "드론 LED %1 밝기 %2 %3",
        "byrobot_petrone_v2_flight_drone_light_manual_single_off": "드론 LED 끄기 %1",
        "byrobot_petrone_v2_flight_drone_motor_stop": "모터 정지 %1",
        "byrobot_petrone_v2_flight_drone_motorsingle": "%1번 모터를 %2(으)로 회전 %3",
        "byrobot_petrone_v2_flight_drone_motorsingle_input": "%1번 모터를 %2(으)로 회전 %3",
        "byrobot_petrone_v2_flight_drone_motorsingle_rotation": "%1번 모터를 %2으로 %3(으)로 회전 %4",
        "byrobot_petrone_v2_flight_drone_value_attitude": "%1",
        "byrobot_petrone_v2_flight_drone_value_etc": "%1",
        "byrobot_petrone_v2_flight_drone_value_imu": "%1",
        "byrobot_petrone_v2_flight_drone_value_sensor": "%1",
        "cheese_value": "%1",
        "cheese_boolean": "%1?",
        "cheese_play_sound_times": "%1 소리 %2 번 재생하기 %3",
        "cheese_play_sound_times_until_done": "%1 소리 %2 번 재생하고 기다리기 %3",
        "cheese_change_buzzer_by": "버저 음을 %1 Hz만큼 바꾸기 %2",
        "cheese_set_buzzer_to": "버저 음을 %1 Hz로 정하기 %2",
        "cheese_clear_sound": "소리 끄기 %1",
        "cheese_play_note": "%1 %2 음을 연주하기 %3",
        "cheese_play_note_for": "%1 %2 음을 %3 박자 연주하기 %4",
        "cheese_rest_for": "%1 박자 쉬기 %2",
        "cheese_change_tempo_by": "연주 속도를 %1 BPM만큼 바꾸기 %2",
        "cheese_set_tempo_to": "연주 속도를 %1 BPM으로 정하기 %2",
        "cheese_set_sound_port_to": "소리 출력을 %1로 정하기 %2",
        "cheese_set_input_mode_to": "포트 %1를 %2 입력으로 정하기 %3",
        "cheese_set_input_range_to": "입력 %1의 범위 %2 ~ %3을(를) %4 ~ %5 소수점 %6으로 정하기 %7",
        "cheese_set_three_input_ranges_to": "입력 %1의 범위 %2 ~ %3 ~ %4을(를) %5 ~ %6 ~ %7 소수점 %8으로 정하기 %9",
        "cheese_analog_input": "입력 %1",
        "cheese_digital_input": "입력 %1 %2 ?",
        "cheese_button_state": "버튼 %1를 %2?",
        "cheese_set_pulse_mode_to": "포트 %1를 %2 입력으로 정하기 %3",
        "cheese_pulse_input": "포트 %1에서 펄스 감지?",
        "cheese_set_digital_output_to": "디지털 출력 %1를 %2(으)로 정하기 %3",
        "cheese_change_pwm_output_by": "PWM 출력 %1를 %2%만큼 바꾸기 %3",
        "cheese_set_pwm_output_to": "PWM 출력 %1를 %2%로 정하기 %3",
        "cheese_change_servo_motor_angle_by": "서보 모터 %1의 각도를 %2도만큼 바꾸기 %3",
        "cheese_set_servo_motor_angle_to": "서보 모터 %1의 각도를 %2도로 정하기 %3",
        "cheese_turn_off_servo_motor": "서보 모터 %1 전원 끄기 %2",
        "cheese_change_dc_motor_velocity_by": "DC 모터 %1의 속도를 %2%만큼 바꾸기 %3",
        "cheese_set_dc_motor_velocity_to": "DC 모터 %1의 속도를 %2%로 정하기 %3",
        "cheese_stop_dc_motor": "DC 모터 %1 정지하기 %2",
        "cheese_rotate_step_motor": "스텝 모터 %1 스텝을 속도 %2 스텝/초로 회전하기 %3",
        "cheese_change_step_motor_velocity_by": "스텝 모터의 속도를 %1 스텝/초만큼 바꾸기 %2",
        "cheese_set_step_motor_velocity_to": "스텝 모터의 속도를 %1 스텝/초로 정하기 %2",
        "cheese_stop_off_step_motor": "스텝 모터 %1 %2",
        "cheese_set_step_motor_mode_to": "스텝 모터를 %1 모드로 정하기 %2",
        "cheese_step_count": "스텝 수",
        "cheese_set_led_to_color": "RGB LED %1을(를) %2 %3으로 정하기 %4",
        "cheese_pick_led_to": "RGB LED %1을(를) %2로 정하기 %3",
        "cheese_change_led_by_rgb": "RGB LED %1을(를) R: %2 G: %3 B: %4만큼 바꾸기 %5",
        "cheese_setLed_to_rgb": "RGB LED %1을(를) R: %2 G: %3 B: %4(으)로 정하기 %5",
        "cheese_clear_led": "RGB LED %1 끄기 %2",
        "cheese_set_led_type_to": "RGB LED %1을(를) %2형으로 정하기 %3",
        "cheese_neopixel_set_number_and_type_to": "네오픽셀 LED %1개, %2로 정하기 %3",
        "cheese_neopixel_set_all_leds_to_pattern": "네오픽셀 모든 LED를 %1 패턴으로 정하기 %2",
        "cheese_neopixel_set_all_leds_to_color": "네오픽셀 모든 LED를 %1으로 정하기 %2",
        "cheese_neopixel_pick_all_leds_to": "네오픽셀 모든 LED를 %1로 정하기 %2",
        "cheese_neopixel_change_all_leds_by_rgb": "네오픽셀 모든 LED를 R: %1 G: %2 B: %3만큼 바꾸기 %4",
        "cheese_neopixel_set_all_leds_to_rgb": "네오픽셀 모든 LED를 R: %1 G: %2 B: %3(으)로 정하기 %4",
        "cheese_neopixel_clear_all_leds": "네오픽셀 모든 LED 끄기 %1",
        "cheese_neopixel_set_led_to_color": "네오픽셀 %1번째 LED를 %2으로 정하기 %3",
        "cheese_neopixel_pick_led_to": "네오픽셀 %1번째 LED를 %2로 정하기 %3",
        "cheese_neopixel_change_led_by_rgb": "네오픽셀 %1번째 LED를 R: %2 G: %3 B: %4만큼 바꾸기 %5",
        "cheese_neopixel_set_led_to_rgb": "네오픽셀 %1번째 LED를 R: %2 G: %3 B: %4(으)로 정하기 %5",
        "cheese_neopixel_clear_led": "네오픽셀 %1번째 LED 끄기 %2",
        "cheese_neopixel_set_led_range_to_pattern": "네오픽셀 %1번째부터 %2번째까지의 LED를 %3 패턴으로 정하기 %4",
        "cheese_neopixel_set_led_range_to_color": "네오픽셀 %1번째부터 %2번째까지 %3칸 간격의 LED를 %4으로 정하기 %5",
        "cheese_neopixel_pick_led_range_to": "네오픽셀 %1번째부터 %2번째까지 %3칸 간격의 LED를 %4로 정하기 %5",
        "cheese_neopixel_change_led_range_by_rgb": "네오픽셀 %1번째부터 %2번째까지 %3칸 간격의 LED를 R: %4 G: %5 B: %6만큼 바꾸기 %7",
        "cheese_neopixel_set_led_range_to_rgb": "네오픽셀 %1번째부터 %2번째까지 %3칸 간격의 LED를 R: %4 G: %5 B: %6(으)로 정하기 %7",
        "cheese_neopixel_clear_led_range": "네오픽셀 %1번째부터 %2번째까지 %3칸 간격의 LED 끄기 %4",
        "cheese_neopixel_shift": "네오픽셀 %1칸 이동하기 %2",
        "cheese_neopixel_rotate": "네오픽셀 %1칸 회전하기 %2",
        "cheese_neopixel_change_brightness_by": "네오픽셀 밝기를 %1%만큼 바꾸기 %2",
        "cheese_neopixel_set_brightness_to": "네오픽셀 밝기를 %1%로 정하기 %2",
        "cheese_write_serial": "시리얼 %1 %2 쓰기 %3",
        "cheese_read_serial_until": "시리얼 %1 읽기 %2",
        "cheese_set_serial_port_to": "시리얼 포트를 %1로 정하기 %2",
        "cheese_set_serial_rate_to": "시리얼 속도를 %1Bd로 정하기 %2",
        "cheese_serial_input": "시리얼 입력",
        "cheese_pid_start": "%1 시작하기 %2",
        "cheese_pid_set_range_to": "PID %1의 범위 %2 ~ %3을(를) %4 ~ %5 소수점 %6으로 정하기 %7",
        "cheese_pid_set_three_ranges_to": "PID %1의 범위 %2 ~ %3 ~ %4을(를) %5 ~ %6 ~ %7 소수점 %8으로 정하기 %9",
        "cheese_pid_reset_encoder": "PID 엔코더 값 초기화하기 %1",
        "cheese_pid_input": "PID %1",
        "cheese_pid_button_state": "PID 버튼 %1을(를) %2?",
        "cheese_hat010_start": "HAT-010 5x5 매트릭스 시작하기 %1",
        "cheese_hat010_button": "HAT-010 버튼 %1",
        "cheese_hat010_button_state": "HAT-010 버튼 %1를 %2?",
        "cheese_hat010_background_turn_on_xy": "HAT-010 배경 x: %1 y: %2 %3으로 켜기 %4",
        "cheese_hat010_background_turn_off_xy": "HAT-010 배경 x: %1 y: %2 끄기 %3",
        "cheese_hat010_background_draw_shape_at_xy": "HAT-010 배경 %1 %2을(를) x: %3 y: %4에 그리기 %5",
        "cheese_hat010_background_draw_string_at_xy": "HAT-010 배경 %1 글자 %2을(를) x: %3 y: %4에 그리기 %5",
        "cheese_hat010_background_draw_pattern_at_xy": "HAT-010 배경 %1 패턴 %2을(를) x: %3 y: %4에 그리기 %5",
        "cheese_hat010_clear": "HAT-010 %1 지우기 %2",
        "cheese_hat010_scroll_by_xy": "HAT-010 %1 x: %2 y: %3만큼 이동하기 %4",
        "cheese_hat010_sprite_set_to_shape": "HAT-010 그림 %1을(를) %2 %3(으)로 정하기 %4",
        "cheese_hat010_sprite_set_to_string": "HAT-010 그림 %1을(를) %2 글자 %3(으)로 정하기 %4",
        "cheese_hat010_sprite_set_to_pattern": "HAT-010 그림 %1을(를) %2 패턴 %3(으)로 정하기 %4",
        "cheese_hat010_sprite_clear_show_hide": "HAT-010 그림 %1 %2 %3",
        "cheese_hat010_sprite_change_positions_by_xy": "HAT-010 그림 %1의 위치를 x: %2 y: %3만큼 바꾸기 %4",
        "cheese_hat010_sprite_set_positions_to_xy": "HAT-010 그림 %1의 위치를 x: %2 y: %3(으)로 정하기 %4",
        "cheese_hat010_sprite_change_position_by_value": "HAT-010 그림 %1의 %2 위치를 %3만큼 바꾸기 %4",
        "cheese_hat010_sprite_set_position_to_value": "HAT-010 그림 %1의 %2 위치를 %3(으)로 정하기 %4",
        "cheese_hat010_sprite_rotate": "HAT-010 그림 %1을(를) %2 방향으로 회전하기 %3",
        "cheese_hat010_sprite_flip_in_direction": "HAT-010 그림 %1을(를) %2 방향으로 뒤집기 %3",
        "cheese_hat010_sprite_stamp_to_background": "HAT-010 그림 %1을(를) 배경에 도장 찍기 %2",
        "cheese_hat010_sprite_position": "HAT-010 그림 %1의 %2 위치",
        "cheese_hat010_sprite_touching_sprite": "HAT-010 그림 %1이(가) 그림 %2에 닿았는가?",
        "cheese_hat010_sprite_touching": "HAT-010 그림 %1이(가) %2에 닿았는가?",
        "cheese_hat010_change_brightness_by": "HAT-010 밝기를 %1%만큼 바꾸기 %2",
        "cheese_hat010_set_brightness_to": "HAT-010 밝기를 %1%로 정하기 %2",
        "choco_move_forward": "앞으로 %1 %2 이동 %3",
        "choco_move_backward": "뒤로 %1 %2 이동 %3",
        "choco_turn_left": "왼쪽으로 %1 %2 돌기 %3",
        "choco_turn_right": "오른쪽으로 %1 %2 돌기 %3",
        "choco_move_right_left": "오른쪽으로 %1 %2,왼쪽 %3 %4 이동 %5",
        "choco_onoff_led_rear": "뒤쪽 LED %1 %2",
        "choco_set_led_color": "%1 LED %2 %3",
        "choco_play_sound": "%1 소리내기 %2",
        "choco_is_front_sensor": "전방센서",
        "choco_is_bottom_sensor": "바닥센서",
        "choco_is_light_sensor": "빛센서",
        "choco_get_front_sensor": "전방센서",
        "choco_get_bottom_sensor": "바닥센서",
        "choco_get_light_sensor": "빛센서",
        "chocopi_control_button": "%1 컨트롤 %2번을 누름",
        "chocopi_control_event": "%1 %2 컨트롤 %3을 %4",
        "chocopi_control_joystick": "%1 컨트롤 %2의 값",
        "chocopi_dc_motor": "%1 DC모터 %2 %3% 세기 %4 방향 %5",
        "chocopi_led": "%1 LED %2 RGB(%3 %4 %5) %6",
        "chocopi_motion_photogate_event": "%1 %2 포토게이트 %3번을 %4",
        "chocopi_motion_photogate_status": "%1 포토게이트 %2번이 막힘",
        "chocopi_motion_photogate_time": "%1 포토게이트%2번을 %3",
        "chocopi_motion_value": "%1 모션 %2의 값",
        "chocopi_motion_angle": "%1 모션 %2",
        "chocopi_sensor": "%1 센서 %2",
        "chocopi_servo_motor": "%1 서보모터 %2번 %3도 %4",
        "chocopi_touch_event": "%1 %2 터치 %3번을 %4",
        "chocopi_touch_status": "%1 터치 %2번을 만짐",
        "chocopi_touch_value": "%1 터치 %2번의 값",
        "chocopi_map_range": "%1을 %2~%3에서 %4~%5로",
        "coconut_stop_motor": "모터 정지 %1",
        "coconut_move_motor": "%1 움직이기 %2",
        "coconut_turn_motor": "%1 으로 돌기 %2",
        "coconut_move_for_secs": "%1 %2 초동안 움직이기 %3",
        "coconut_turn_for_secs": "%1 으로 %2 초동안 돌기 %3",
        "coconut_turn_to_led": "%1 으로 회전하는 동안 %2LED 켜기 %3",
        "coconut_move_outmotor": "외부모터 %1(으로) 움직이기 속도 %2 %3",
        "coconut_set_led_to": "%1 LED를 %2 으로 켜기 %3",
        "coconut_clear_led": "%1 LED 끄기 %2",
        "coconut_set_led_clear": "%1 LED %2 끄기 %3",
        "coconut_set_led_time": "%1 LED %2 으로 %3 초동안 켜기 %4",
        "coconut_beep": "버저 켜기 %1",
        "coconut_buzzer_time": "버저음을 %1 초 동안 소리내기 %2",
        "coconut_buzzer_set_hz": "버즈음 %1 Hz를 %2초 동안 소리내기 %3",
        "coconut_clear_buzzer": "버저 끄기 %1",
        "coconut_play_buzzer": "%1 %2 %3 음을 %4 박자로 연주하기 %5",
        "coconut_rest_buzzer": "%1 동안 쉬기 %2",
        "coconut_play_buzzer_led": "%1 %2 %3 음을 %4 박자로 연주하는 동안 %5 LED %6 켜기 %7",
        "coconut_play_midi": "%1 연주하기 %2",
        "coconut_floor_sensor": "%1 바닥센서",
        "coconut_floor_sensing": "%1 바닥센서 %2",
        "coconut_following_line": "선 따라가기 %1",
        "coconut_front_sensor": "%1 전방센서",
        "coconut_front_sensing": "%1 전방센서 %2",
        "coconut_obstruct_sensing": "장애물 감지",
        "coconut_avoid_mode": "어보이드 모드 %1",
        "coconut_dotmatrix_set": "도트매트릭스 %1 ( %2줄, %3칸 ) %4",
        "coconut_dotmatrix_on": "도트매트릭스 모두 켜기 %1",
        "coconut_dotmatrix_off": "도트매트릭스 모두 끄기 %1",
        "coconut_dotmatrix_num": "도트매트릭스 숫자 %1표시 %2",
        "coconut_dotmatrix_small_eng": "도트매트릭스 소문자 %1표시 %2",
        "coconut_dotmatrix_big_eng": "도트매트릭스 대문자 %1표시 %2",
        "coconut_dotmatrix_kor": "도트매트릭스 한글 %1표시 %2",
        "coconut_light_sensor": "밝기",
        "coconut_tem_sensor": "온도",
        "coconut_ac_sensor": "%1 가속도",
        "coconut_outled_sensor": "외부 LED 설정 %1 %2 초동안 켜기 %3",
        "coconut_outspk_sensor": "외부 스피커 설정 %1 %2Hz로 %3초 동안 소리내기 %4",
        "coconut_outspk_sensor_off": "외부 스피커 %1 끄기 %2",
        "coconut_outinfrared_sensor": "외부 적외선센서 %1",
        "coconut_outcds_sensor": "외부 빛센서(Cds) %1",
        "coconut_servomotor_angle": "서보모터 연결 %1 각도 %2 %3",
        "CODEino_get_number_sensor_value": "아날로그 %1 번 센서값  ",
        "CODEino_get_digital_value": "디지털 %1 핀의 값  ",
        "CODEino_set_digital_value": "디지털 %1 핀의 %2 %3",
        "CODEino_set_pwm_value": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "CODEino_toggle_led": "디지털 %1 번 핀 %2 %3",
        "CODEino_toggle_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "CODEino_convert_scale": "%1 값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 바꾼값  ",
        "CODEino_set_rgb_value": "컬러 LED의 %1 색상을 %2 (으)로 정하기 %3",
        "CODEino_set_rgb_add_value": "컬러 LED의 %1 색상에 %2 만큼 더하기 %3",
        "CODEino_set_rgb_off": "컬러 LED 끄기 %1",
        "CODEino_set__led_by_rgb": "컬러 LED 색상을 빨강 %1 초록 %2 파랑 %3 (으)로 정하기 %4",
        "CODEino_rgb_set_color": "컬러 LED의 색상을 %1 (으)로 정하기 %2",
        "CODEino_led_by_value": "컬러 LED 켜기 %1",
        "CODEino_get_sensor_number": "%1  ",
        "CODEino_get_named_sensor_value": "  %1  센서값 ",
        "CODEino_get_sound_status": "소리센서  %1  ",
        "CODEino_get_light_status": "빛센서  %1  ",
        "CODEino_is_button_pressed": " 보드의  %1  ",
        "CODEino_get_accelerometer_direction": " 3축 가속도센서  %1  ",
        "CODEino_get_accelerometer_value": " 3축 가속도센서  %1 축의 센서값 ",
        "CODEino_get_analog_value": "아날로그 %1 센서의 값",
        "CODEino_default_neopixel_on": "기본 네오픽셀을 %1(으)로 켜기 %2",
        "CODEino_default_neopixel_setBrightness": "기본 네오픽셀의 밝기를 %1(으)로 설정%2",
        "CODEino_default_neopixel_off": "기본 네오픽셀을 끄기 %1",
        "CODEino_default_buzzer": "기본 부저를 %1옥타브 %2음으로 %3초 연주하기%4",
        "CODEino_custom_buzzer": "%1번핀 부저를 %2옥타브 %3음으로 %4초 연주하기%5",
        "CODEino_custom_neopixel_on": "네오픽셀을 %1번 핀에 등록%2",
        "CODEino_custom_neopixel_setBrightness": "네오픽셀의 밝기를 %1(으)로 설정%2",
        "CODEino_custom_neopixel_off": "네오픽셀을 모두 끄기 %1",
        "CODEino_custom_neopixel_set_led_color": "네오픽셀 %1번째 LED를 %2로 설정%3",
        "CODEino_custom_neopixel_set_led_off": "네오픽셀 %1번째 LED를 끄기%2",
        "CODEino_set_servo": "%1번 핀의 서보모터를 %2의 각도로 정하기%3",
        "CODEino_get_ultrasonic": "초음파센서(Trig:%1, Echo:%2)의 값",
        "CodeWiz_get_sensor": "%1센서 값",
        "CodeWiz_get_gyroSensor": "자이로 센서 %1값",
        "CodeWiz_isPushedButton": "%1 스위치 버튼 값",
        "CodeWiz_touchPin": "터치핀 %1 값",
        "CodeWiz_default_buzzer": "부저를 %1옥타브, %2음, %3분음표로 연주하기 %4",
        "CodeWiz_neopixel_brightness": "네오픽셀 밝기를 %1로 설정(0~255)%2",
        "CodeWiz_neopixel_setColor_one": "네오픽셀 %1번 LED를 %2(으)로 켜기%3",
        "CodeWiz_neopixel_setColor_one2": "네오픽셀 %1번 LED를 빨강%2초록%3파랑%4(으)로 켜기%5",
        "CodeWiz_neopixel_off_one": "네오픽셀 %1번 LED 끄기%2",
        "CodeWiz_neopixel_setColor_all": "네오픽셀 %1(으)로 모두 켜기%2",
        "CodeWiz_neopixel_setColor_all2": "네오픽셀 빨강%1초록%2파랑%3(으)로 모두 켜기%4",
        "CodeWiz_neopixel_off_all": "네오픽셀 모두 끄기%1",
        "CodeWiz_OLED_clear": "OLED 클리어%1",
        "CodeWiz_OLED_mirror": "OLED 반전%1 %2",
        "CodeWiz_OLED_setSize": "OLED 문자열 크기를 %1(으)로 설정%2",
        "CodeWiz_OLED_setPosition": "OLED 커서위치(%1,%2)(으)로 지정%3",
        "CodeWiz_OLED_println": "OLED에 %1 출력%2",
        "CodeWiz_OLED_isCollision": "OLED 문자열겹치기%1%2",
        "CodeWiz_OLED_specialChar": "OLED에 특수기호%1 출력하기%2",
        "CodeWiz_OLED_setFont": "OLED 폰트%1를 크기%2(으)로 설정%3",
        "CodeWiz_OLED_startScroll": "OLED 스크롤%1 시작페이지%2 종료페이지%3%4",
        "CodeWiz_OLED_stopScroll": "OLED 스크롤 정지%1",
        "CodeWiz_OLED_drawPoint": "OLED의 좌표(%1,%2)에 점 그리기 색%3%4",
        "CodeWiz_OLED_drawLine1": "OLED에 선 그리기 시작(%1,%2) 끝(%3,%4) 색%5%6",
        "CodeWiz_OLED_drawLine2": "OLED에 수직 선 그리기 시작(%1,%2) 길이%3 색%4%5",
        "CodeWiz_OLED_drawLine3": "OLED에 수평 선 그리기 시작(%1,%2) 길이%3 색%4%5",
        "CodeWiz_OLED_drawRect": "OLED에 시작(%1,%2)에서 가로%3 세로%4인 직사각형 그리기(채우기%5)색%6%7",
        "CodeWiz_OLED_drawCircle": "OLED에 중심(%1,%2)에서 반지름%3인 원 그리기(채우기%4)색%5%6",
        "CodeWiz_OLED_drawPoligon": "OLED에 점1(%1,%2) 점2(%3,%4) 점3(%5,%6)으로 삼각형 그리기(채우기%7)색%8%9",
        "CodeWiz_DIGITAL_OUTPUT_setup": "터치센서 출력으로 사용%1",
        "CodeWiz_DIGITAL_OUTPUT_digitalWrite": "터치센서 디지털 %1으로 %2내보내기%3",
        "CodeWiz_DIGITAL_OUTPUT_pwmWrite": "터치센서 PWM %1으로 %2내보내기(0~255)%3",
        "cbx_arduino_get_analog_value": "아날로그 %1 번 센서값",
        "cbx_arduino_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "cbx_arudino_read_ultrasonic_value": "울트라소닉 Trig %1 Echo %2 센서값",
        "cbx_arduino_toggle_led": "디지털 %1 번 핀 %2 %3",
        "cbx_arduino_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "cbx_arduino_write_tone": "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
        "cbx_arduino_write_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "cbx_arduino_read_digital": "디지털 %1 번 센서값",
        "cbx_write_servo": "서보모터 각도를 %1 도로 정하기 %2",
        "cbx_write_tone": "부저를 %1 %2 음으로 %3 초 연주하기 %4",
        "cbx_write_led": "%1 을 %2 로 정하기 %3",
        "cbx_write_dcm": "DC모터를 %1 방향, 속도 %2 로 정하기 %3",
        "cbx_write_rgb_led": "빨강을 %1 으로, 초록을 %2 으로, 파랑 %3 으로 정하기 %4",
        "cbx_write_lcd": "LCD %1 줄 %2 칸에 %3 을 쓰기 %4",
        "cbx_clear_lcd": "LCD 화면 지우기 %1",
        "cbx_read_line": "라인센서 값",
        "cbx_read_switch": "%1 값",
        "cbx_read_mic": "마이크 값",
        "cbx_read_potentiometer": "가변저항 값",
        "cbx_read_ultrasonic": "초음파센서 값",
        "codingmachine_altitude": "드론을 %1 높이만큼 날리기 %2",
        "codingmachine_button": "%1번 버튼 값 읽어오기",
        "codingmachine_connect": "드론 연결 상태 읽어오기",
        "codingmachine_emergency": "드론을 즉시 멈추기 %1",
        "codingmachine_gyro": "보드 %1 기울기 값 읽어오기",
        "codingmachine_joystick": "조이스틱 %1 읽기",
        "codingmachine_led": "%1 LED %2  %3",
        "codingmachine_motor": "%1 모터를 %2 세기로 돌리기 %3",
        "codingmachine_ready": "드론 비행 준비 상태 읽어오기",
        "codingmachine_rollpitch": "드론을 %1 방향 %2 세기로 움직이기 %3",
        "codingmachine_throttle": "드론 프로펠러를 %1 만큼 세기로 돌리기 %2",
        "codingmachine_tune": "%1 음을  %2 초동안 소리내기 %3",
        "codingmachine_ultrasonic": "거리(초음파)값 읽어오기",
        "codingmachine_yaw": "드론을 %1 만큼 회전하기 %2",
        "codingmachine_digital_out": "디지털 %1번 핀 %2 %3",
        "codingmachine_digital_in": "디지털 %1 번값 읽어오기",
        "codingmachine_analog_in": "아날로그 %1 번 센서값",
        "codingmachine_digital_pwm": "디지털 출력 %1 번 세기로 출력하기 %2 %3",
        "codingmachine_servo": "디지털  %1 핀의 서보모터를 %2 각도로 정하기 %3",
        "cp_moving_set_vibrator": "진동 알림 %1 %2",
        "cp_moving_set_fan": "팬을 속도 %1(으)로 회전 시키기 %2",
        "cp_moving_set_servor": "서보모터의 각도를 %1도로 정하기 %2",
        "cp_moving_set_motor": "DC모터 %1을 %2의 속도로 %3으로 회전하기 %4",
        "cp_moving_stop_motor": "DC모터 %1을 정지하기 %2",
        "cp_moving_set_move": "로봇을 %1의 속도로 %2 하기 %3",
        "cp_moving_stop_move": "로봇 정지하기 %1",
        "cp_moving_set_audio_octave": "계명 %1음을 %2옥타브 %3으로 연주하기 %4",
        "cp_moving_set_audio_freq": "펄스 %1Hz 음을 %2초 연주하기 %3",
        "cp_moving_stop_audio": "%1 만큼 연주쉬기 %2",
        "cp_moving_get_ultrasonic": "초음파센서 값 읽기",
        "cp_moving_get_joystick": "조이스틱 방향이 %1 인가?",
        "cp_moving_get_joystick_button": "조이스틱 버튼이 눌렸는가?",
        "cp_moving_get_button": "%1색 버튼이 눌렸는가?",
        "cp_moving_set_led": "컬러 LED 켜기- 빨강%1 초록%2 파랑%3 %4",
        "cp_moving_set_led_color": "LED %1색을 밝기 %2으로 켜기 %3",
        "cp_moving_stop_led": "LED 끄기 %1",
        "cp_moving_get_soil": "토양 센서 값 읽기",
        "cp_moving_get_analog": "아날로그 값 읽기",
        "cp_moving_get_digital": "디지털 %1번 포트가 참인가?",
        "cp_moving_set_digital": "디지털 %1 포트에 %2 출력하기 %3",
        "cp_moving_get_analog_value": "가변저항 값 읽기",
        "cp_moving_get_ir": "%1 적외선 센서 값 읽기",
        "creamo_get_number_sensor_value": "가변저항_블록 %1 번 센서값  ",
        "creamo_get_port_number": "%1",
        "creamo_get_pwm_port_number": "%1  ",
        "creamo_motor_port_number": "%1",
        "creamo_toggle_led": "LED_블록 %1 번 핀 %2 %3",
        "creamo_toggle_motor": "Motor_블록 %1 번 핀 %2 %3",
        "creamo_toggle_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "dadublock_get_analog_value": "아날로그 %1 번 센서값",
        "dadublock_get_analog_value_map": "아날로그 %1번 센서값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 바꾼값",
        "dadublock_get_ultrasonic_value": "울트라소닉 Trig %1번핀 Echo %2번핀 센서값",
        "dadublock_toggle_led": "디지털 %1 번 핀 %2 %3",
        "dadublock_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "dadublock_set_tone": "디지털 %1 번 핀을 %2 음으로 %3 옥타브로 %4 만큼 연주하기 %5",
        "dadublock_set_servo": "서보모터 %1 번 핀을 %2 의 각도로 정하기 %3",
        "dadublock_get_digital": "디지털 %1 번 센서값",
        "dadublock_car_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "dadublock_car_get_analog_value": "아날로그 %1 번 센서값",
        "dadublock_car_get_analog_value_map": "아날로그 %1번 센서값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 바꾼값  ",
        "dadublock_car_get_digital": "디지털 %1 번 센서값",
        "dadublock_car_get_irsensor": "적외선 %1 번 센서값",
        "dadublock_car_get_ultrasonic_value": "울트라소닉 Trig %1번핀 Echo %2번핀 센서값",
        "dadublock_car_motor": "모터 %1 번을 %2 (으)로 %3 %의 속도로 움직이기 %4",
        "dadublock_car_motor_stop": "모터 %1 번 멈추기 %2",
        "dadublock_car_set_servo": "서보모터 %1 번 핀을 %2 의 각도로 정하기 %3",
        "dadublock_car_set_tone": "디지털 %1 번 핀 을 %2 음으로 %3의 옥타브로 %4 만큼 연주하기 %5",
        "dadublock_car_toggle_led": "디지털 %1 번 핀 %2 %3",
        "eduino_get_analog_value": "아날로그 %1 번 센서값",
        "eduino_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "eduino_get_ultrasonic_value": "초음파센서 Trig핀 %1 Echo핀 %2 ",
        "eduino_toggle_led": "디지털 %1 번 핀 %2 %3",
        "eduino_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "eduino_set_tone": "디지털 %1 번 핀의 부저를 %2 %3 음으로 %4 초 연주하기 %5",
        "eduino_set_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "eduino_get_digital": "디지털 %1 번 센서값",
        "edumaker_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "edumaker_get_analog_value": "아날로그 %1 번 센서값",
        "edumaker_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "edumaker_get_digital": "디지털 %1 번 센서값",
        "edumaker_get_ultrasonic_value": "울트라소닉 Trig %1 Echo %2 센서값",
        "edumaker_set_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "edumaker_set_tone": "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
        "edumaker_toggle_led": "디지털 %1 번 핀 %2 %3",
        "elio_config_block": "초음파 %1,  라인센서1 %2, 라인센서2 %3 으로 정하기 %4",
        "elio_io_block": "%1 %2 으로 정하기 %3",
        "elio_io_all_block": "%1 %2, %3 %4, %5 %6, %7 %8, %9 %10, %11 %12 으로 정하기 %13",
        "elio_dc_block": "%1 %2 으로 정하기 %3",
        "elio_dc_all_block": "%1 %2, %3 %4 으로 정하기 %5",
        "elio_servo_block": "%1 %2 으로 정하기 %3",
        "elio_servo_all_block": "%1 %2, %3 %4 으로 정하기 %5",
        "elio_all_block": "%1 %2, %3 %4, %5 %6, %7 %8, %9 %10, %11 %12, %13 %14, %15 %16, %17 %18, %19 %20 으로 정하기 %21",
        "elio_dc_value": "%1 속도값 읽기",
        "elio_servo_value": "%1 각도 읽기",
        "elio_io_value": "%1 값 읽기",
        "elio_distance_value": "거리",
        "elio_line1_value": "라인1",
        "elio_line2_value": "라인2",
        "etboard_serial_set": "시리얼 통신으로 설정하고 %1 속도로 전송하기",
        "etboard_ble_set": "블루투스 통신으로 설정하고 %1 속도로 전송하기",
        "etboard_get_analog_value": "아날로그 %1 센서값",
        "etboard_toggle_pin": "디지털 %1 번핀 %2",
        "etboard_port_number": "%1",
        "etboard_ultrasonic_get_value": "초음파 송신 %1 핀 수신 %2 핀",
        "etboard_get_digital_button": "%1 누름",
        "etboard_get_digital": "디지털 %1번 센서값",
        "etboard_toggle_led": "LED %1 을 %2",
        "etboard_get_port_number1": "%1",
        "etboard_get_port_number": "%1",
        "etboard_get_ultrasonic_port_number": "%1",
        "etboard_set_servo": "서보모터 %1번 핀을 %2 도로 정하기",
        "etboard_oled_set": "OLED %1 번째 줄의 %2 표시하기",
        "etboard_pw_get_port_number": "%1",
        "ev3_get_sensor_value": "%1 의 값",
        "ev3_touch_sensor": "%1 의 터치센서가 작동되었는가?",
        "ev3_button_pressed": "%1 버튼이 눌려져있는가?",
        "ev3_color_sensor": "%1 의 %2 값",
        "ev3_motor_power": "%1 의 값을 %2 으로 출력 %3",
        "ev3_motor_power_on_time": "%1 의 값을 %2 초 동안 %3 으로 출력 %4",
        "ev3_motor_degrees": "%1 의 값을 %2 으로  %3 도 만큼 회전 %4",
        "ev3_status_led": "LED 색깔을 %1 (으)로 정하기 %2",
        "ColorRed": "빨강",
        "ColorGreen": "초록",
        "ColorBlue": "파랑",
        "ColorYellow": "노랑",
        "ColorPurple": "보라",
        "ColorWhite": "하양",
        "ColorSkip": "무시하기",
        "ColorOff": "끄기",
        "BrakeOff": "끄기",
        "BrakeOn": "켜기",
        "NoteC": "도",
        "NoteCS": "도#",
        "NoteD": "레",
        "NoteDS": "레#",
        "NoteE": "미",
        "NoteF": "파",
        "NoteFS": "파#",
        "NoteG": "솔",
        "NoteGS": "솔#",
        "NoteA": "라",
        "NoteAS": "라#",
        "NoteB": "시",
        "NoteRest": "쉼표",
        "Scale6": "6 음계",
        "Scale12": "12 음계",
        "User2": "유저 2",
        "User3": "유저 3",
        "DirectionBrake": "멈춤",
        "DirectionCW": "정방향",
        "DirectionCCW": "역방향",
        "DirectionPassive": "풀림",
        "RecordIndex0": "노멀",
        "RecordIndex1": "5 릴레이",
        "RecordIndex2": "하프 블라인드",
        "RecordIndex3": "풀 불라인드",
        "RecordIndex4": "시간 패널티",
        "RecordIndex5": "20~28 모드",
        "RecordIndex6": "최소회전",
        "RecordIndex7": "02 모드",
        "RecordTime1": "최신",
        "RecordTime2": "최신-1",
        "RecordTime3": "최신-2",
        "RecordTime4": "최신-3",
        "RecordTime5": "최신-4",
        "RecordTimeBest": "최고",
        "RecordDiceNumber": "주사위 숫자",
        "CellLedColor": "%1 면 %2 번 셀의 색상값",
        "FaceLedColor": "%1 면의 셀 색상값",
        "FaceDir": "%1 면의 회전값",
        "Record": "%1 의 %2 기록",
        "RecodeDice": "%1 기록",
        "MenuInit": "모드 빠져나오기  %1",
        "NonBrake": "브레이크 기능을 %1 %2",
        "ResetAllFace": "모든 색상을 초기화하기 %1",
        "ModeSetting": "모드를 %1 %2 로 설정하기 %3",
        "CenterColorChange": "%1 면의 가운데 셀 LED 색상을 %2 으로 바꾸기 %3",
        "CellColorChange": " %1 면의 셀 색상을 %2 %3 %4 %5 %6 %7 %8 %9 으로 바꾸기 %10",
        "PosDirTorChange": "%1 면을 %2 포지션, %3 방향, %4 토크로 바꾸기 %5",
        "FaceRotationOnlyColor": "%1 면의 LED 색상을 %2 방향으로 %3º 만큼 회전하기 %4",
        "FaceRotation": "%1 면을 %2 방향으로 %3º 만큼 회전하기 %4",
        "FacesRotation": "%1 면을 %2 방향으로 %3º 만큼,  %4 면을 %5 방향으로 %6º 만큼 회전하기 %7",
        "SolveCube": "%1 을 앞면으로 %2 를 %3 초 동안 풀기 %4",
        "PlayMode": "%1 연주 모드로 바꾸기 %2",
        "UserMode": "%1 펌웨어로 바꾸기 %2",
        "PlayNote": "%1 를 %2 초 연주하기 %3",
        "GetRecord": "%1 기록 가져오기 %2",
        "GetRecordDice": "주사위 숫자 기록 가져오기 %1",
        "AutoSolve": "자동솔빙 시작 %1",
        "freearduino_get_analog_value": "%1 핀 아날로그 입력값",
        "freearduino_get_analog_value_pullup": "%1 핀 아날로그 입력값 (PULL UP)",
        "freearduino_get_analog_mapped_value": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 바꾼값",
        "freearduino_get_humidity_value": "온습도센서 %1 핀 습도값(%)",
        "freearduino_get_temperature_value": "온습도센서 %1 핀 온도값(C)",
        "freearduino_get_distance_value": "초음파센서 trig %1 echo %2 핀 거리값(mm)",
        "freearduino_set_digital_value": "%1 핀에 디지털 %2 출력 %3",
        "freearduino_get_digital_value": "%1 핀 디지털 입력값",
        "freearduino_get_digital_value_pullup": "%1 핀의 디지털 입력값 (PULL UP)",
        "freearduino_set_pwm_value": "%1 핀에 아날로그 %2 값 출력 %3",
        "freearduino_set_servo_angle": "%1 핀 서보모터 각도를 %2 도로 정하기 %3",
        "freearduino_set_motor_run": "모터실드 %1 번 DC모터 %2 %3",
        "freearduino_set_motor_speed": "모터실드 %1 번 DC모터 속도를 %2 (으)로 정하기 %3",
        "A_channel": "A_channel",
        "B_channel": "B_channel",
        "C_channel": "C_channel",
        "D_channel": "D_channel",
        "funboard_buzzer_onoff": "버저 %1 %2",
        "funboard_buzzer_second": "버저%1%2초 동안%3",
        "funboard_buzzer_tone_simple": "%1%2음을%3초 연주하기%4",
        "funboard_color_led_on_pwm": "%1색  LED %2 % %3",
        "funboard_color_led_onoff": "%1색  LED %2 %3",
        "funboard_convert_scale": "%1값 %2~%3 에서 %4~%5 으로 변환값",
        "funboard_dotmatrix_1column": "%1칸 %2표시하기 %3",
        "funboard_dotmatrix_1row": "%1줄 %2표시하기 %3",
        "funboard_dotmatrix_1row_1column": "%1%2 %3표시하기 %4",
        "funboard_dotmatrix_64_display": "%1 (8x8)표시하기%2",
        "funboard_dotmatrix_big_eng": "대문자 %1표시하기 %2",
        "funboard_dotmatrix_char_display": "문자%1표시하기%2",
        "funboard_dotmatrix_extra_char": "문자 %1표시하기 %2",
        "funboard_dotmatrix_intensity": "밝기 %1% %2",
        "funboard_dotmatrix_kor": "▦  한글 %1표시하기 %2",
        "funboard_dotmatrix_num": "숫자 %1표시하기 %2",
        "funboard_dotmatrix_onoff": "모두 %1 %2",
        "funboard_dotmatrix_scroll_option": "스크롤 방향%1%2",
        "funboard_dotmatrix_scroll_rapid": "스크롤 속도 %1% %2",
        "funboard_dotmatrix_set": "%1줄 %2칸  %3 %4",
        "funboard_dotmatrix_small_eng": "소문자 %1표시하기 %2",
        "funboard_dotmatrix_string_display": "문자열%1표시하기%2",
        "funboard_dotmatrix_string_display_scroll": "문자열%1표시하기%2스크롤%3",
        "funboard_dotmatrix_symbol": "기호 %1표시하기 %2",
        "funboard_get_analog_sensor_2state": "%1값 %2",
        "funboard_get_digital_button_value": "%1 버튼  값",
        "funboard_get_number_sensor_value": "%1 값",
        "funboard_get_touch_button_value": "%1 터치  값",
        "funboard_set_digital_buzzer": "버저를 %1옥타브 %2음 %3초  연주%4",
        "funboard_what_button_pressed": "%1 버튼  눌림",
        "funboard_what_touch_button_pressed": "%1 터치됨",
        "hamster_gripper": "집게 %1 %2",
        "hamster_release_gripper": "집게 끄기 %1",
        "hamster_boolean": "%1?",
        "hamster_play_note": "%1 %2 음을 연주하기 %3",
        "hamster_hand_found": "손 찾음?",
        "hamster_value": "%1",
        "hamster_move_forward_once": "말판 앞으로 한 칸 이동하기 %1",
        "hamster_turn_once": "말판 %1 으로 한 번 돌기 %2",
        "hamster_move_forward_for_secs": "앞으로 %1 초 이동하기 %2",
        "hamster_move_backward_for_secs": "뒤로 %1 초 이동하기 %2",
        "hamster_turn_for_secs": "%1 으로 %2 초 돌기 %3",
        "hamster_change_both_wheels_by": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 만큼 바꾸기 %3",
        "hamster_set_both_wheels_to": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 (으)로 정하기 %3",
        "hamster_change_wheel_by": "%1 바퀴 %2 만큼 바꾸기 %3",
        "hamster_set_wheel_to": "%1 바퀴 %2 (으)로 정하기 %3",
        "hamster_follow_line_using": "%1 선을 %2 바닥 센서로 따라가기 %3",
        "hamster_follow_line_until": "%1 선을 따라 %2 교차로까지 이동하기 %3",
        "hamster_set_following_speed_to": "선 따라가기 속도를 %1 (으)로 정하기 %2",
        "hamster_stop": "정지하기 %1",
        "hamster_set_led_to": "%1 LED를 %2 으로 정하기 %3",
        "hamster_clear_led": "%1 LED 끄기 %2",
        "hamster_beep": "삐 소리내기 %1",
        "hamster_change_buzzer_by": "버저 음을 %1 만큼 바꾸기 %2",
        "hamster_set_buzzer_to": "버저 음을 %1 (으)로 정하기 %2",
        "hamster_clear_buzzer": "버저 끄기 %1",
        "hamster_play_note_for": "%1 %2 음을 %3 박자 연주하기 %4",
        "hamster_rest_for": "%1 박자 쉬기 %2",
        "hamster_change_tempo_by": "연주 속도를 %1 만큼 바꾸기 %2",
        "hamster_set_tempo_to": "연주 속도를 %1 BPM으로 정하기 %2",
        "hamster_set_port_to": "포트 %1 를 %2 으로 정하기 %3",
        "hamster_change_output_by": "출력 %1 를 %2 만큼 바꾸기 %3",
        "hamster_set_output_to": "출력 %1 를 %2 (으)로 정하기 %3",
        "hamster_s_hand_found": "손 찾음?",
        "hamster_s_boolean": "%1?",
        "hamster_s_value": "%1",
        "hamster_s_move_forward_once": "말판 앞으로 한 칸 이동하기 %1",
        "hamster_s_turn_once": "말판 %1 으로 한 번 돌기 %2",
        "hamster_s_move_forward_unit": "앞으로 %1 %2 이동하기 %3",
        "hamster_s_move_backward_unit": "뒤로 %1 %2 이동하기 %3",
        "hamster_s_turn_unit_in_place": "%1 으로 %2 %3 제자리 돌기 %4",
        "hamster_s_pivot_around_unit_in_direction": "%1 중심으로 %2 %3 %4 방향으로 돌기 %5",
        "hamster_s_turn_unit_with_radius_in_direction": "%1 %2 으로 %3 %4 반지름 %5 cm를 %6 방향으로 돌기 %7",
        "hamster_s_change_both_wheels_by": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 만큼 바꾸기 %3",
        "hamster_s_set_both_wheels_to": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 (으)로 정하기 %3",
        "hamster_s_change_wheel_by": "%1 바퀴 %2 만큼 바꾸기 %3",
        "hamster_s_set_wheel_to": "%1 바퀴 %2 (으)로 정하기 %3",
        "hamster_s_follow_line_using": "%1 선을 %2 바닥 센서로 따라가기 %3",
        "hamster_s_follow_line_until": "%1 선을 따라 %2 교차로까지 이동하기 %3",
        "hamster_s_set_following_speed_to": "선 따라가기 속도를 %1 (으)로 정하기 %2",
        "hamster_s_set_following_gain_to": "선 따라가기 방향 변화량을 %1 (으)로 정하기 %2",
        "hamster_s_stop": "정지하기 %1",
        "hamster_s_set_led_to": "%1 LED를 %2 으로 정하기 %3",
        "hamster_s_pick_led": "%1 LED를 %2로 정하기 %3",
        "hamster_s_change_led_by_rgb": "%1 LED를 R: %2 G: %3 B: %4 만큼 바꾸기 %5",
        "hamster_s_set_led_to_rgb": "%1 LED를 R: %2 G: %3 B: %4 (으)로 정하기 %5",
        "hamster_s_clear_led": "%1 LED 끄기 %2",
        "hamster_s_play_sound_times": "%1 소리 %2 번 재생하기 %3",
        "hamster_s_play_sound_times_until_done": "%1 소리 %2 번 재생하고 기다리기 %3",
        "hamster_s_change_buzzer_by": "버저 음을 %1 만큼 바꾸기 %2",
        "hamster_s_set_buzzer_to": "버저 음을 %1 (으)로 정하기 %2",
        "hamster_s_clear_sound": "소리 끄기 %1",
        "hamster_s_play_note": "%1 %2 음을 연주하기 %3",
        "hamster_s_play_note_for": "%1 %2 음을 %3 박자 연주하기 %4",
        "hamster_s_rest_for": "%1 박자 쉬기 %2",
        "hamster_s_change_tempo_by": "연주 속도를 %1 만큼 바꾸기 %2",
        "hamster_s_set_tempo_to": "연주 속도를 %1 BPM으로 정하기 %2",
        "hamster_s_set_port_to": "포트 %1 를 %2 으로 정하기 %3",
        "hamster_s_change_output_by": "출력 %1 를 %2 만큼 바꾸기 %3",
        "hamster_s_set_output_to": "출력 %1 를 %2 (으)로 정하기 %3",
        "hamster_s_gripper": "집게 %1 %2",
        "hamster_s_release_gripper": "집게 끄기 %1",
        "hamster_s_write_serial": "시리얼 %1 %2 쓰기 %3",
        "hamster_s_read_serial_until": "시리얼 %1 읽기 %2",
        "hamster_s_set_serial_rate_to": "시리얼 속도를 %1 Bd로 정하기 %2",
        "hasseam_pulldown": "기본",
        "hasseam_pullup": "풀업",
        "hasseam_toggle_on": "켜기",
        "hasseam_toggle_off": "끄기",
        "hasseam_lcd_first_line": "첫 번째",
        "hasseam_lcd_seconds_line": "두 번째",
        "hasseam_dcmotor_direction_forward": "정방향",
        "hasseam_dcmotor_direction_reverse": "역방향",
        "hasseam_btData_select_number": "숫자",
        "hasseam_btData_select_character": "문자",
        "hasseam_get_analog_value": "아날로그 %1 번 핀 센서 %2 값",
        "hasseam_get_analog_mapping": "아날로그 %1 번 핀 센서 %2 값의 범위를 %3 ~ %4 에서 %5 ~ %6 로 바꾼 값",
        "hasseam_get_digital_bluetooth": "블루투스 RX 2 핀 데이터 값",
        "hasseam_get_digital_ultrasonic": "초음파 Trig %1 핀 Echo %2 핀 센서 값",
        "hasseam_get_digital": "디지털 %1 번 핀 센서 %2 값",
        "hasseam_get_digital_toggle": "디지털 %1 번 핀 센서 %2 값",
        "hasseam_get_digital_pir": "PIR %1 번 핀 센서 값",
        "hasseam_set_digital_toggle": "디지털 %1 번 핀 %2 %3",
        "hasseam_set_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "hasseam_set_digital_rgbled": "디지털 %1 번 핀의 RGB LED를 빨강 %2 초록 %3 파랑 %4 로 정하기 %5",
        "hasseam_set_digital_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "hasseam_set_digital_buzzer": "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
        "hasseam_set_digital_dcmotor": "DC모터 %1 번 핀을 %2 %3 번 핀의 속도를 %4 로 정하기 %5",
        "hasseam_module_digital_lcd": "LCD화면 %1 줄에 %2 나타내기 %3",
        "hasseam_module_digital_bluetooth": "블루투스 TX 3 핀에 %1 데이터 보내기 %2",
        "hasseam_module_digital_oled": "OLED화면 X 좌표 %1  Y 좌표 %2 에 %3 나타내기 %4",
        "hyact_xylobot_list_aixs_1": "1 축",
        "hyact_xylobot_list_aixs_2": "2 축",
        "hyact_xylobot_list_aixs_3": "3 축",
        "hyact_xylobot_list_aixs_all": "모든 축",
        "hyact_xylobot_list_octave_4_do": "도",
        "hyact_xylobot_list_octave_4_re": "레",
        "hyact_xylobot_list_octave_4_mi": "미",
        "hyact_xylobot_list_octave_4_fa": "파",
        "hyact_xylobot_list_octave_4_sol": "솔",
        "hyact_xylobot_list_octave_4_la": "라",
        "hyact_xylobot_list_octave_4_si": "시",
        "hyact_xylobot_list_octave_5_do": "높은 도",
        "hyact_xylobot_list_movement_on": "켜기",
        "hyact_xylobot_list_movement_twinkle": "반짝",
        "hyact_xylobot_list_movement_standby": "대기",
        "hyact_xylobot_list_toggle_on": "켜기",
        "hyact_xylobot_list_toggle_off": "끄기",
        "hyact_xylobot_list_color_off": "끄기",
        "hyact_xylobot_list_color_red": "빨간색",
        "hyact_xylobot_list_color_orange": "주황색",
        "hyact_xylobot_list_color_yellow": "노란색",
        "hyact_xylobot_list_color_green": "초록색",
        "hyact_xylobot_list_color_blue": "파란색",
        "hyact_xylobot_list_color_navy": "남색",
        "hyact_xylobot_list_color_purple": "보라색",
        "hyact_xylobot_list_color_white": "흰색",
        "hyact_xylobot_list_position_ready": "준비위치",
        "hyact_xylobot_list_position_target": "목표위치",
        "hyact_xylobot_get_now_aixs_block": "지금 %1 위치값",
        "hyact_xylobot_get_note_aixs_block": "%1 음의 %2 위치값",
        "hyact_xylobot_set_led_movement_block": "LED 모드를 %1 모드로 정하기 %2",
        "hyact_xylobot_set_led_color_block": "LED 색을 %1 으로 정하기 %2",
        "hyact_xylobot_set_led_rgb_block": "LED 색을 R : %1% G : %2% B : %3% 으로 정하기 %4",
        "hyact_xylobot_set_torque_toggle_block": "%1 토크를 %2 %3",
        "hyact_xylobot_set_position_single_block": "%1 의 목표 위치값을 %2º(도) 로 정하기 %3",
        "hyact_xylobot_set_position_many_block": "목표 위치값을 1축 : %1º(도)  2축 : %2º(도)  3축 : %3º(도) 으로 정하기 %4",
        "hyact_xylobot_set_speed_block": "%1 의 속도를 %2% 으로 정하기 %3",
        "hyact_xylobot_set_torque_block": "%1 의 토크값을 %2% 으로 정하기 %3",
        "hyact_xylobot_set_play_note_block": "%1 음을 치기 %2",
        "hyact_xylobot_set_move_note_block": "%1 음의 %2 로 가기 %3",
        "hyact_xylobot_set_move_default_block": "모든 축이 기본 위치로 가기 %1",
        "iboard_button": "%1  버튼을 눌렀는가?",
        "iboard_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "iboard_get_analog_value": "아날로그 %1 번 센서값  ",
        "iboard_get_analog_value_map": "%1 값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 바꾼값  ",
        "iboard_get_digital": "디지털 %1 번 센서값  ",
        "iboard_led": "LED %1 번을 %2 %3",
        "iboard_motor": "모터를 %2 으로 동작하기 %3",
        "iboard_pwm_led": "LED %1 번의 밝기를 %2 (으)로 정하기 %3",
        "iboard_rgb_led": "RGB LED의 %1 LED %2 %3",
        "iboard_set_tone": "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
        "iboard_toggle_led": "디지털 %1 번 핀 %2 %3",
        "jcboard_sonarport": "%1 번 포트를 초음파센서로 사용 %2",
        "jcboard_led": "%1 번 LED %2 %3",
        "jcboard_buzzer": "%1 음을 %2 초동안 소리내기 %3",
        "jcboard_dcmotor": "%1 번 DC모터를 %2 세기로 돌리기 %3",
        "jcboard_servomotor": "%1 번 서보모터를 %2도 회전 %3",
        "jcboard_pin": "%1 번 디지털핀을 %2 로 설정 %3",
        "jcboard_button": "%1 번 버튼 값",
        "jcboard_analog": "%1 번 아날로그 값",
        "jcboard_on": "켜기",
        "jcboard_off": "끄기",
        "jcboard_do": "도",
        "jcboard_re": "레",
        "jcboard_mi": "미",
        "jcboard_fa": "파",
        "jcboard_sol": "솔",
        "jcboard_ra": "라",
        "jcboard_si": "시",
        "jdcode_takeoff": "드론 이륙하기 %1",
        "jdcode_landing": "드론 착륙하기 %1",
        "jdcode_altitude": "%1cm 높이로 비행%2",
        "jdcode_throttle": "프로펠러를 %1 % 세기로 돌리기 %2",
        "jdcode_velocity": "%1(으)로 %2속도(cm/s)로 비행%3",
        "jdcode_distance": "%1(으)로 %2cm 거리를 %3속도(cm/s)로 비행%4",
        "jdcode_degree": "%1으로 %2도를 %3각속도(deg/s)로 회전 %4",
        "jdcode_motor": "%1 모터를 %2 세기로 돌리기 %3",
        "jdcode_emergency": "드론 즉시멈추기 %1",
        "jdcode_connect": "드론 연결상태",
        "jdcode_ready": "드론 준비상태",
        "jdcode_battery": "배터리",
        "jdcode_dronealt": "드론 높이",
        "jdcode_gyrox": "드론 좌우 기울기",
        "jdcode_gyroy": "드론 앞뒤 기울기",
        "jdcode_posx": "드론 좌우 이동",
        "jdcode_posy": "드론 앞뒤 이동",
        "jdcode_led": "%1 LED %2 %3",
        "jdcode_tune": "%1 음을  %2 초동안 소리내기 %3",
        "jdcode_joystick": "조이스틱 %1 읽기",
        "jdcode_button": "%1번 버튼 값 읽어오기",
        "jdcode_dir_front": "앞",
        "jdcode_dir_back": "뒤",
        "jdcode_dir_right": "오른쪽",
        "jdcode_dir_left": "왼쪽",
        "jdcode_alt": "드론 높이",
        "jdcode_tiltx": "드론좌우기울기",
        "jdcode_tilty": "드론앞뒤기울기",
        "jikko_toggle_on": "켜기",
        "jikko_toggle_off": "끄기",
        "jikko_lcd_first_line": "첫 번째",
        "jikko_lcd_seconds_line": "두 번째",
        "jikko_get_analog_value": "아날로그 %1 핀 읽기",
        "jikko_get_light_value": "조도센서(AO %1)값",
        "jikko_get_moisture_value": "토양수분센서(AO %1)값",
        "jikko_get_sound_value": "사운드센서(AO %1)값",
        "jikko_get_infrared_value": "적외선센서(AO %1)값",
        "jikko_get_pullup": "풀업 저항 사용 버튼 %1 핀 눌림 상태",
        "jikko_get_button": "버튼 %1 핀 눌림 상태",
        "jikko_get_analog_mapping": "아날로그 %1 번 핀 센서 값의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼 값",
        "jikko_mapping1": "%1 값을 %2 ~ %3 사이로 제한한 값",
        "jikko_mapping2": "%1 값을 %2 ~ %3 범위에서 %4 ~ %5 범위로 변환",
        "jikko_get_digital_ultrasonic": "초음파 Trig %1 핀 Echo %2 핀 센서 값",
        "jikko_get_digital": "디지털 %1 핀 읽기",
        "jikko_get_digital_toggle": "디지털 %1 핀 센서 값",
        "jikko_get_digital_pir": "PIR %1 핀 센서 값",
        "jikko_set_digital_toggle": "디지털 %1 핀 %2 %3",
        "jikko_set_led_toggle": "LED %1 핀 %2 %3",
        "jikko_set_digital_pwm": "LED (PWM %1 핀)밝기 %2 출력 (0 ~ 255)%3",
        "jikko_set_digital_servo": "서보 모터 %1 핀 %2 각도로 회전 %3",
        "jikko_set_digital_buzzer_toggle": "피에조부저 %1 핀 %2 %3",
        "jikko_set_digital_buzzer_volume": "피에조부저 (PWM %1 핀) 음량 %2 출력 (0 ~ 255) %3",
        "jikko_set_digital_buzzer": "피에조부저 %1 핀 %2 %3 음 %4 박자 연주 %5",
        "jikko_set_neopixel_init": "네오픽셀 LED 시작하기 설정 ( %1 핀에 %2 개의 LED 연결) %3",
        "jikko_set_neopixel_bright": "네오픽셀 LED ( %1 핀) 밝기 %2 으로 설정 (0 ~ 255) %3",
        "jikko_set_neopixel": "네오픽셀 LED ( %1 핀) %2 번째 LED 색 %3 출력 %4",
        "jikko_set_neopixel_all": "네오픽셀 LED ( %1 핀) 모든 LED 색 %2 출력 %3",
        "jikko_set_neopixel_clear": "네오픽셀 LED ( %1 핀) 모든 LED 끄기 %2",
        "jikko_set_dotmatrix_init": "8x8 도트매트릭스 시작하기 설정 (DIN %1, CLK %2, CS %3) %4",
        "jikko_set_dotmatrix_bright": "도트매트릭스 밝기 %1 으로 설정 (0 ~ 8) %2",
        "jikko_set_dotmatrix": "도트매트릭스 LED %1 그리기 %2",
        "jikko_set_dotmatrix_emoji": "도트매트릭스 LED %1 그리기 %2",
        "jikko_set_dotmatrix_clear": "도트매트릭스 LED 지우기 %1",
        "jikko_lcd_init": "I2C LCD 시작하기 설정 (주소 %1 ,열 %2, 행 %3) %4",
        "jikko_get_lcd_row": "%1",
        "jikko_get_lcd_col": "%1",
        "jikko_module_digital_lcd": "LCD화면 %1 열 %2 행 부터 %3 출력 %4",
        "jikko_lcd_clear": "LCD 화면 지우기 %1",
        "jikko_get_dht_temp_value": "DHT11 온습도센서(out %1)의 온도(°C)값",
        "jikko_get_dht_humi_value": "DHT11 온습도센서(out %1)의 습도(%)값",
        "jikko_set_mp3_init": "mp3 초기화 ( tx: %1, rx: %2 ) %3",
        "jikko_set_mp3_play": "mp3 %1 번 파일 재생 %2",
        "jikko_set_mp3_play2": "mp3 %1 번 파일 %2 초 동안 재생 %3",
        "jikko_set_mp3_vol": "mp3 볼륨 %1 으로 설정 (0 ~ 30) %2",
        "jikko_get_analog_temp_value": "DHT11 포트 %1의 %2 센서 값",
        "jikko_load_init": "HX711 로드셀 시작하기 설정 (DOUT %1, SCK %2) %3",
        "jikko_load_scale": "HX711 로드셀 보정하기 %1 %2",
        "jikko_load_value": "HX711 로드셀 값",
        "jikko_get_dust": "미세먼지센서 (LED %1, AO %2) 값",
        "jikko_rfid_init": "RFID 시작하기 설정 (SS %1, RST %2) %3",
        "jikko_is_rfid_tapped": "RFID 카드가 인식되었는가?",
        "jikko_get_rfid_value": "RFID 카드 값",
        "jikko_joy_init": "%1 조이스틱 시작하기 설정 (X AO %2, Y AO %3, Z %4) %5",
        "jikko_get_joy_x": "%1 조이스틱 X값",
        "jikko_get_joy_y": "%1 조이스틱 y값",
        "jikko_get_joy_z": "%1 조이스틱 버튼 눌림 상태",
        "jikko_get_joy_move": "%1 조이스틱이 %2 방향으로 움직였을 때",
        "jikko_step_init": "%1 스텝모터 시작하기 설정 (IN1 %2, IN2 %3, IN3 %4, IN4 %5) %6",
        "jikko_step_speed": "%1 스텝모터 속도를 %2 로 설정하기 (0 ~ 20) %3",
        "jikko_step_rotate": "%1 스텝모터 %2 으로 %3 바퀴 회전하기 %4",
        "jikko_step_rotate2": "%1 스텝모터 %2 으로 %3 도 회전하기 %4",
        "jikko_step_rotate3": "%1 스텝모터 %2 으로 %3 초 동안 회전하기 %4",
        "joystick_get_number_sensor_value": "아날로그 %1 번 센서값  ",
        "joystick_get_digital_value": "디지털 %1 번 센서값  ",
        "joystick_toggle_led": "디지털 %1 번 핀 %2 %3",
        "joystick_toggle_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "joystick_convert_scale": "%1 값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 바꾼값  ",
        "joystick_get_analog_value": "아날로그 %1 번 센서값",
        "joystick_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "joystick_get_ultrasonic_value": "울트라소닉 Trig %1 Echo %2 센서값",
        "joystick_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "joystick_set_tone": "피에조부저를 %1 %2 음으로 %3 초 연주하기 %4",
        "joystick_set_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "joystick_get_digital": "디지털 %1 번 센서값",
        "joystick_is_button_pressed": "%1 버튼이 눌렸는가?",
        "joystick_get_joystick_value": "조이스틱을 %1 으로 움직였는가?",
        "joystick_get_sensor_value": "%1 의 측정값",
        "joystick_toggle_motor": "진동모터 %1 %2",
        "joystick_toggle_shield_led": "%1 번째 LED를 %2 %3",
        "joystick_get_led_number": "%1",
        "kaduino_buzzer_onoff": "스피커 삐 소리 %1 초 연주하기 %2",
        "kaduino_set_digital_buzzer": "스피커음계 %1 옥타브 %2 음 %3 초 연주하기 %4",
        "kaduino_set_motor_speed": "DC모터 왼쪽 속도%1 오른쪽 속도%2 으로 정하기 %3",
        "kaduino_motor_stop": "DC모터 정지하기 %1",
        "kaduino_set_servo": "서보모터 %1핀 각도 %2 이동 %3",
        "kaduino_set_rgbled_onoff": "RGB LED %1 번째 색깔 %2 하기 %3",
        "kaduino_rgbled_seting": "RGB LED %1핀에 %2개  밝기%3 설정하기 %4",
        "kaduino_set_rgbled_value": "RGB LED %1번째  빨강%2 초록%3 파랑%4 으로 하기 %5",
        "kaduino_rgbled_all_onoff": "RGB LED  %1 %2",
        "kaduino_digital_onoff": "디지털 %1 핀 %2 설정하기 %3",
        "kaduino_get_digital_value": "디지털 %1 핀 읽기",
        "kaduino_get_analog_value": "아날로그 %1 핀 읽기",
        "kaduino_set_pwm": "PWM %1 핀에 %2 보내기 %3",
        "kaduino_set_ultrasonic": "초음파센서 설정 트리거 %1 핀, 에코 %2 핀 으로 연결하기 %3",
        "kaduino_get_usonic_value": "초음파센서 값 읽기",
        "kaduino_set_temp": "온도센서 %1 핀에 연결하기 %2",
        "kaduino_get_temp_value": "온도센서 값 읽기",
        "kaduino_set_i2c": "I2C포트  %1 연결하기 %2",
        "kaduino_get_color_value": "컬러센서 %1 값 읽기",
        "kaduino_get_gyro_value": "자이로센서 %1 값 읽기",
        "kaduino_set_lcd_string": "lcd 세로%1줄,  가로%2줄 에  %3 표시하기 %4",
        "kaduino_set_lcd_init": "lcd 설정 : I2C 주소 0x%1 , 가로줄 수 %2 , 세로줄 수 %3 으로 정하기%4",
        "kaduino_set_lcd_clear": "lcd 지우기 %1",
        "kaduino_get_analog_mapping": " %1 값 %2 ~ %3 에서 %4 ~ %5 으로 변환값",
        "kamibot_move_forward": "{ 블록 }: 앞으로 %1 칸 가기 %2",
        "kamibot_turn_left": "{ 블록 }: 왼쪽으로 돌기 %1",
        "kamibot_turn_right": "{ 블록 }: 오른쪽으로 돌기 %1",
        "kamibot_turn_back": "{ 블록 }: 뒤로 돌기 %1",
        "kamibot_linetracer_speed": "선따라 이동 속도 %1 로 정하기 %2",
        "kamibot_linetracer": "선따라 이동하기 %1 %2",
        "kamibot_forward_speed": "앞으로 %1 속도로 가기 %2",
        "kamibot_left_speed": "왼쪽으로 %1 속도로 돌기 %2",
        "kamibot_right_speed": "오른쪽으로 %1 속도로 돌기 %2",
        "kamibot_backward_speed": "뒤로 %1 속도로 가기 %2",
        "kamibot_forward_lr_speed": "앞으로 속도 왼쪽: %1 오른쪽: %2 %3",
        "kamibot_backward_lr_speed": "뒤로 속도 왼쪽: %1 오른쪽: %2 %3",
        "kamibot_stop": "멈추기 %1",
        "kamibot_color": "LED %1 으로 바꾸기 %2",
        "kamibot_servor": "서보모터 %1 도 위치로 설정 %2",
        "kamibot_ultrasonic": "초음파센서 %1",
        "kamibot_infrared": "적외선 센서 %1 번 %2",
        "kingcoding_set_motor": "킹코딩 모터 제어 %1 %2",
        "kingcoding_set_led": "킹코딩 LED 제어 %1 %2",
        "kingcoding_set_buzzer": "킹코딩 버저 제어 %1 %2",
        "kingcoding_set_digital1": "디지털 1번 제어  %1 %2",
        "kingcoding_set_digital2": "디지털 2번 제어  %1 %2",
        "kingcoding_get_number_sensor_1_value": "아날로그 1번 센서값(0~100)",
        "kingcoding_get_number_sensor_2_value": "아날로그 2번 센서값(0~100)",
        "kingcoding_get_digital_1_value": "디지털 1번 센서 참 ",
        "kingcoding_get_digital_2_value": "디지털 2번 센서 참",
        "lecoboard_button_read": "버튼 읽어오기",
        "lecoboard_button_read_bool": "버튼 읽어오기",
        "lecoboard_ultrasonic_read": "초음파센서 읽어오기",
        "lecoboard_cds_read": "조도센서 읽어오기",
        "lecoboard_var_read": "가변저항 읽어오기",
        "lecoboard_ir_read": "습도센서 읽어오기",
        "lecoboard_temp_read": "온도센서 읽어오기",
        "lecoboard_analog_read": "아날로그입력 %1 읽어오기",
        "lecoboard_digital_read": "디지털 %1 읽어오기",
        "lecoboard_dual_led_color_toggle": "LED %1 색으로 정하기 %2",
        "lecoboard_dual_led_toggle": "LED 녹색 %1 빨강 %2 으로 정하기 %3",
        "lecoboard_led_rgb_toggle": "RGB LED R%1 G%2 B%3 %4",
        "lecoboard_set_tone": "부저를 %1 음으로 %2 박자로 연주하기 %3",
        "lecoboard_set_tone_long": "부저를 %1 음으로 연주하기 %2",
        "lecoboard_set_freq_tone": "신호음 %1번핀에서 %2 주파수로 %3 동안 연주하기 %4",
        "lecoboard_set_tone_off": "부저 끄기 %1",
        "lecobaord_set_servo": "%1번 서보모터 %2°로 정하기 %3",
        "lecoboard_dc_motor": "%1번 DC모터 %2방향으로 속력%3 으로 정하기 %4",
        "lecoboard_dc_motor_stop": "DC 모터 정지하기",
        "lecoboard_digital_write": "디지털 %1번핀에 %2 보내기 %3",
        "lecoboard_digital_pwm": "PWM %1 번핀에 %2 보내기 %3",
        "lecoboard_convert_value": "%1의 값을 %2부터 %3까지의 값으로 변환하기 %4",
        "lecoboard_lcd_command": "LCD 설정 %1 %2",
        "lecoboard_set_lcd": "LCD %1번째줄 %2번째칸에 %3을 출력하기 %4",
        "lecoboard_send_ble": "블루투스로 %1을 보내기 %2",
        "lecoboard_get_bluetooth": "블루투스에서 읽어오기",
        "littlebits_text": "%1",
        "littlebits_get_sensor_number": "%1  ",
        "littlebits_get_port_number": "%1  ",
        "littlebits_get_pwm_port_number": "%1  ",
        "littlebits_get_number_sensor_value": "아날로그 %1 번 센서값  ",
        "littlebits_get_digital_value": "디지털 %1 번 센서값  ",
        "littlebits_toggle_led": "디지털 %1 번 핀 %2 %3",
        "littlebits_toggle_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "littlebits_convert_scale": "%1 값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 바꾼값  ",
        "magkinder_list_leftSide": "바깥 왼쪽",
        "magkinder_list_left": "왼쪽",
        "magkinder_list_right": "오른쪽",
        "magkinder_list_rightSide": "바깥 오른쪽",
        "magkinder_list_front": "앞쪽",
        "magkinder_list_both": "양쪽",
        "magkinder_list_forward": "앞으로",
        "magkinder_list_backwards": "뒤로",
        "magkinder_list_on": "켜기",
        "magkinder_list_off": "끄기",
        "magkinder_list_red": "빨간색",
        "magkinder_list_blue": "파란색",
        "magkinder_list_green": "초록색",
        "magkinder_list_yellow": "노란색",
        "magkinder_list_purple": "보라색",
        "magkinder_list_white": "하얀색",
        "magkinder_list_4_octave_C": "4 옥타브 도",
        "magkinder_list_4_octave_D": "4 옥타브 레",
        "magkinder_list_4_octave_E": "4 옥타브 미",
        "magkinder_list_4_octave_F": "4 옥타브 파",
        "magkinder_list_4_octave_G": "4 옥타브 솔",
        "magkinder_list_4_octave_A": "4 옥타브 라",
        "magkinder_list_4_octave_B": "4 옥타브 시",
        "magkinder_list_5_octave_C": "5 옥타브 도",
        "magkinder_list_5_octave_D": "5 옥타브 레",
        "magkinder_list_5_octave_E": "5 옥타브 미",
        "magkinder_list_5_octave_F": "5 옥타브 파",
        "magkinder_list_5_octave_G": "5 옥타브 솔",
        "magkinder_list_5_octave_A": "5 옥타브 라",
        "magkinder_list_5_octave_B": "5 옥타브 시",
        "magkinder_list_6_octave_C": "6 옥타브 도",
        "magkinder_list_codingMode": "코딩",
        "magkinder_list_lineMode": "라인",
        "magkinder_list_gestureFollowMode": "몸짓 따라가기",
        "magkinder_list_handFollowMode": "손 따라가기",
        "magkinder_list_AvoidMode": "피하기",
        "magkinder_list_gestureCodingMode": "몸짓 코딩",
        "magkinder_list_cardCodingMode": "카드 코딩",
        "magkinder_received_bottomSensor_block": "바닥 %1 센서 값",
        "magkinder_received_cardSensor_block": "카드 %1 센서 값",
        "magkinder_received_frontSensor_block": "전방 %1 센서 값",
        "magkinder_transmit_autoSensor_block": "센서값 자동 업데이트 %1 %2",
        "magkinder_transmit_moveStop_block": "정지하기 %1",
        "magkinder_transmit_move_block": "%1 으로 %2 cm 움직이기 %3",
        "magkinder_transmit_turn_block": "%1 으로 %2 ° 회전하기 %3",
        "magkinder_transmit_wheelSpeed_block": "%1 바퀴의 빠르기를 %2로 정하기 %3",
        "magkinder_transmit_eyeLED_block": "눈 LED 색상을 %1 으로 정하기 %2",
        "magkinder_transmit_volumm_block": "소리 크기를 %1 로 정하기 %2",
        "magkinder_transmit_speak_block": "%1 번 소리를 내기 %2",
        "magkinder_transmit_scale_block": "%1 음을 내기 %2",
        "magkinder_transmit_modeSetting_block": "%1 모드로 정하기 %2",
        "mechanicblock_controller_get_analog_value": "아날로그 %1 번 센서값",
        "mechanicblock_controller_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "mechanicblock_controller_get_ultrasonic_value": "울트라소닉 Trig %1 Echo %2 센서값",
        "mechanicblock_controller_toggle_led": "디지털 %1 번 핀 %2 %3",
        "mechanicblock_controller_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "mechanicblock_controller_set_tone": "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
        "mechanicblock_controller_set_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "mechanicblock_controller_get_digital": "디지털 %1 번 센서값",
        "mechanicblock_uno_get_analog_value": "아날로그 %1 번 센서값",
        "mechanicblock_uno_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "mechanicblock_uno_get_ultrasonic_value": "울트라소닉 Trig %1 Echo %2 센서값",
        "mechanicblock_uno_toggle_led": "디지털 %1 번 핀 %2 %3",
        "mechanicblock_uno_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "mechanicblock_uno_set_tone": "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
        "mechanicblock_uno_set_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "mechanicblock_uno_get_digital": "디지털 %1 번 센서값",
        "mechanicblock_uno_mini_get_analog_value": "아날로그 %1 번 센서값",
        "mechanicblock_uno_mini_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "mechanicblock_uno_mini_get_ultrasonic_value": "울트라소닉 Trig %1 Echo %2 센서값",
        "mechanicblock_uno_mini_toggle_led": "디지털 %1 번 핀 %2 %3",
        "mechanicblock_uno_mini_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "mechanicblock_uno_mini_set_tone": "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
        "mechanicblock_uno_mini_set_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "mechanicblock_uno_mini_get_digital": "디지털 %1 번 센서값",
        "mechanicblock_uno_s_get_analog_value": "아날로그 %1 번 센서값",
        "mechanicblock_uno_s_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "mechanicblock_uno_s_get_ultrasonic_value": "울트라소닉 Trig %1 Echo %2 센서값",
        "mechanicblock_uno_s_toggle_led": "디지털 %1 번 핀 %2 %3",
        "mechanicblock_uno_s_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "mechanicblock_uno_s_set_tone": "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
        "mechanicblock_uno_s_set_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "mechanicblock_uno_s_get_digital": "디지털 %1 번 센서값",
        "mechatro_get_dc_motor_current": "%1모터 사용전류값",
        "mechatro_get_digital": "%1 디지털 값",
        "mechatro_get_sensor_value": "%1 센서값",
        "mechatro_set_get_sensor_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "mechatro_get_ultrasonic_value": "초음파센서 Trig %1 Echo %2 의 거리값 [cm]",
        "mechatro_get_temperature": "%1 온도 센서 값",
        "mechatro_set_blue_pw": "블루투스 비밀번호 : %1%2%3%4로 정하기%5",
        "mechatro_set_dc_motor": "%1모터 속도 %2로 정하기%3",
        "mechatro_set_digital": "%1번 %2 %3",
        "mechatro_set_pwm": "%1PWM을 %2%로 정하기 %3",
        "mechatro_set_servo_position": "%1서보모터 위치 :%2도로 옮기기 %3",
        "mechatro_set_servo_speed": "%1서보모터 속도 : 1초당 %2도로 정하기 %3",
        "mechatro_set_threshold": "%1 센서 감도 : %2로 정하기%3",
        "mechatro_set_tone": "%1버저 %2 %3 음으로 연주 %4",
        "mechatro_set_tone_time": "%1버저 %2 %3 음으로 %4 초 연주 %5",
        "mechatro_event_rising": "%1 %2 이 참이 될 때",
        "mechatro_event_falling": "%1 %2 이 거짓이 될 때",
        "memaker_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "memaker_get_analog_value": "아날로그 %1 번 센서값",
        "memaker_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "memaker_get_digital": "디지털 %1 번 센서값",
        "memaker_get_ultrasonic_value": "초음파센서 Trig %1 Echo %2 센서값",
        "memaker_set_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "memaker_toggle_led": "디지털 %1 번 핀 %2 %3",
        "microbit_ext_led_toggle": "LED의 X:%1 Y:%2 %3 %4",
        "microbit_ext_get_led": "LED의 X:%1 Y:%2 상태값",
        "microbit_ext_show_string": "%1 출력하기 %2",
        "microbit_ext_show_image": "%1 아이콘 출력하기 %2",
        "microbit_ext_set_led_image": "LED %1 으로 출력하기 %2",
        "microbit_ext_reset_screen": "화면 지우기 %1",
        "microbit_ext_set_tone": "%1 음을 %2 박자 연주하기 %3",
        "microbit_ext_set_tempo": "연주 속도를 %1 BPM 으로 정하기 %2",
        "microbit_ext_set_relative_tempo": "연주 속도를 %1 BPM 만큼 바꾸기 %2",
        "microbit_ext_set_analog": "%1 에 아날로그 값 %2 출력 %3",
        "microbit_ext_set_analog_period": "%1 에 아날로그 PWM 출력 주기를 %2 마이크로초 로 설정 %3",
        "microbit_ext_get_analog": "아날로그 핀 %1번 센서값",
        "microbit_ext_get_analog_map": "아날로그 핀 %1번 센서값의 범위를 %2~%3 에서 %4~%5 (으)로 바꾼값",
        "microbit_ext_set_digital": "%1 에 디지털 값 %2 출력 %3",
        "microbit_ext_get_digital": "디지털 핀 %1번 센서값",
        "microbit_ext_get_button": "%1 버튼을 눌렀는가?",
        "microbit_ext_get_sensor": "%1 센서값",
        "microbit_ext_is_tilt": "%1 방향으로 기울었는가?",
        "microbit_ext_get_tilt": "%1 방향으로 기울어진 각도값",
        "microbit_ext_get_accelerometer": "가속도 센서 %1의 값",
        "microbit_ext_set_servo": "%1 에 서보 값 %2 출력 %3",
        "microbit_ext_set_servo_period": "%1 에 서보 펄스 폭을 %2 마이크로초로 설정 %3",
        "microbit_ext_get_gesture": "%1 이 감지되는가?",
        "mindpiggy_get_analog_value": "아날로그 %1 번 센서값 ",
        "mindpiggy_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "mindpiggy_toggle_led": "디지털 %1 번 핀 %2 %3",
        "mindpiggy_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "mindpiggy_get_digital": "디지털 %1 번 센서값",
        "mindpiggy_get_bool_digital": "디지털 %1 번 센서값 ",
        "mindpiggy_neopixel_on_value": "네오픽셀 %1 번핀  %2 로 설정하기 %3",
        "mindpiggy_neopixel_pixel_on_value": "네오픽셀 %1 번핀 %2번째 픽셀 %3 로 설정하기 %4",
        "mindpiggy_neopixel_off_value": "네오픽셀 %1 번핀 끄기 %2",
        "mindpiggy_set_tone": "스피커 %1 핀 %2 %3의 음으로 %4초 연주하기 %5",
        "mindpiggy_dcmotor_direction_forward": "정방향",
        "mindpiggy_dcmotor_direction_reverse": "역방향",
        "mindpiggy_set_dcmotor": "DC모터 %1 번 핀을 %2 , %3 번 핀의 속도를 %4 로 정하기 %5",
        "mindpiggy_get_vibration": " 진동센서 %1 번핀 값 ",
        "mindpiggy_module_digital_remote": "리모컨 아날로그 %1 핀 수신값",
        "mkboard_get_ultrasonic_value": "초음파센서 Trig %1 Echo %2 센서값",
        "mkboard_set_lcd": "1602 문자 LCD %1 행 , %2열에 %3 출력하기 %4",
        "mkboard_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "mkboard_get_analog_value": "아날로그 %1 번 센서값",
        "mkboard_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "mkboard_get_digital": "디지털 %1 번 센서값",
        "mkboard_get_ultrasonic_1_use": "초음파센서 1번 Trig %1 Echo %2 시작 %3",
        "mkboard_get_ultrasonic_1_value": "초음파센서 1번 센서값",
        "mkboard_get_ultrasonic_2_use": "초음파센서 2번 Trig %1 Echo %2 시작 %3",
        "mkboard_get_ultrasonic_2_value": "초음파센서 2번 센서값",
        "mkboard_set_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "mkboard_set_tone": "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
        "mkboard_toggle_led": "디지털 %1 번 핀 %2 %3",
        "mkboard_lcd_print": "1602 LCD : 문자를 %1 행 %2 열에 %3 출력 %4",
        "mkboard_lcd_init": "1602 LCD : LCD를 %1 로 초기화 %2",
        "mkboard_lcd_command": "1602 LCD : LCD에 %1 명령어 수행 %2",
        "mkboard_segment_init": "FND : 디지털 CLK을 %1 DIO를 %2 로 설정 %3",
        "mkboard_segment_bright": "FND : 밝기를 %1 로 설정 하기 %2",
        "mkboard_segment_clear": "FND : 세그먼트 내용 지우기 %1",
        "mkboard_segment_value": "FND : 숫자 %1 를 소숫점 이하 %2로 출력 0 채움 %3 %4",
        "mkboard_oled_init": "OLED : OLED를 %1 로 초기화 %2",
        "mkboard_oled_clear": "OLED : OLED 내용 지우기 %1",
        "mkboard_oled_print": "OLED : %1 행, %2 열에 문자열 %3 출력 %4",
        "mkboard_oled_print_number": "OLED : %1 행 %2 열에 숫자 %3 를 소수점 이하 %4로 출력 %5",
        "mkboard_matrix_init": "매트릭스 : 총 개수 %1 매트릭스 Data %2 Clk %3 CS %4로 설정 %5",
        "mkboard_matrix_bright": "매트릭스 : %1 매트릭스 밝기를 %2 로 설정 하기 %3",
        "mkboard_matrix_clear": "매트릭스 : %1 매트릭스 내용 지우기 %2",
        "mkboard_matrix_set": "매트릭스 : %1 매트릭스 %2행 %3열 위치 %4 %5",
        "mkboard_matrix_set_row": "매트릭스 : %1 매트릭스 %2행에 2진수 %3 출력 %4",
        "mkboard_matrix_set_col": "매트릭스 : %1 매트릭스 %2열에 2진수 %3 출력 %4",
        "mkboard_matrix_char": "매트릭스 : %1 문자 %2 출력 %3",
        "mkboard_neopixel_init": "네오픽셀(%1) : 디지털 %2 번 핀으로 설정(LED 개수 %3개) %4 로 설정",
        "mkboard_neopixel_set_rgb": "네오픽셀(RGB) : %1 번째 LED를 색상 (R:%2 G:%3 B:%4) %5",
        "mkboard_neopixel_set_rgbw": "네오픽셀(RGBW) : %1 번째 LED를 색상 (R:%2 G:%3 B:%4 W:%5) %6",
        "mkboard_neopixel_on": "네오픽셀 : 설정한 값으로 네오픽셀 %1 %2",
        "mkboard_pms5003_init": "먼지센서 : RX핀 %1 TX핀 %2로 설정 %3",
        "mkboard_pms5003_measure": "먼지센서 : 먼지 값 측정 시작하기 %1",
        "mkboard_pms5003_read": "먼지센서 : %1 먼지 값 읽오 오기 %2",
        "mkboard_lsm303_accel_init": "가속도센서 : 초기화 %1",
        "mkboard_lsm303_accel_measure": "가속도센서 : 가속도 값 측정 시작하기 %1",
        "mkboard_lsm303_accel_read": "가속도센서 : %1 축 가속도 값 읽기 %2",
        "mkboard_lsm303_compass_init": "나침반센서 : 초기화 %1",
        "mkboard_lsm303_compass_measure": "나침반센서 : 방위각 측정 시작하기 %1",
        "mkboard_lsm303_compass_read": "나침반센서 : 방위각 읽기 %1",
        "mrt_digitalInput": "%1",
        "mrt_analogValue": "%1",
        "mrt_digitalOutput": "디지털 %1 핀, 출력 값 %2 %3",
        "mrt_servo": "서보 모터 %1 , 각도 %2 %3",
        "mrt_oneWheel": "바퀴(DC) 모터 %1 , 속도 %2 %3",
        "mrt_buzzer": "%1   %2 음을 %3 초 연주하기 %4",
        "mrt_lcd": "LCD %1 번째 줄 ,  출력 값 %2 %3",
        "mrt_ultra": "초음파 센서",
        "mrt_gyro": "자이로 센서 %1",
        "mrt_color": "컬러 센서",
        "mrt_remotecontrol": "리모콘",
        "mrt_keyvalue": "키 값",
        "nemoino_get_number_sensor_value": "아날로그 %1 번 센서값  ",
        "nemoino_get_digital_value": "디지털 %1 번 센서값  ",
        "nemoino_toggle_led": "디지털 %1 번 핀 %2 %3",
        "nemoino_toggle_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "nemoino_convert_scale": "%1 값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 바꾼값  ",
        "neo_spider_get_analog_value": "아날로그 %1 센서값",
        "neo_spider_get_analog_value_map": "아날로그 %1 센서값의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "neo_spider_get_ultrasonic_value": "초음파 센서값",
        "neo_spider_get_motion_value": "모션 센서값",
        "neo_spider_get_infared_value": "적외선 %1 센서값",
        "neo_spider_set_tone": "버저를 %1 %2 음으로 %3 초 연주하기 %4",
        "neo_spider_set_servo": "서보모터를 %1 의 각도로 정하기 %2",
        "neo_spider_motor_state": "네오스파이더 %1 이동하기 %2",
        "neo_spider_neopixel": "RGB LED %1번 빨 %2 녹 %3 파 %4 (으)로 켜기 %5",
        "neo_spider_neopixel_all_on": "RGB LED 전체 빨 %1 녹 %2 파 %3 (으)로 켜기 %4",
        "neo_spider_neopixel_all_off": "RGB LED 전체 끄기 %1",
        "neo_spider_outer_motor": "디지털 %1핀 %2 %3",
        "neobot_turn_left": "왼쪽모터를 %1 %2 회전 %3",
        "neobot_stop_left": "왼쪽모터 정지 %1",
        "neobot_turn_right": "오른쪽모터를 %1 %2 회전 %3",
        "neobot_stop_right": "오른쪽모터 정지 %1",
        "neobot_run_motor": "%1 모터를  %2 초간 %3 %4 %5",
        "neobot_servo_1": "SERVO1에 연결된 서보모터를 %1 속도로 %2 로 이동 %3",
        "neobot_servo_2": "SERVO2에 연결된 서보모터를 %1 속도로 %2 로 이동 %3",
        "neobot_set_sensor_value": "%1 번 포트의 값을 %2 %3",
        "neobot_sensor_value": "%1 값",
        "neobot_sensor_connect_external": "%1 에 연결한 %2 값",
        "neobot_sensor_convert_scale": "%1 센서값 %2 ~ %3 를 %4 ~ %5 (으)로 바꾼 값",
        "neobot_compare_symbol": "%1",
        "neobot_decision_sensor_is_over": "%1 의 센서값이 %2 %3",
        "neobot_decision_equal_with_sensor": "%1 에 연결한 컬러센서가 %2 을 감지함",
        "neobot_remote_button": "리모컨의 %1 버튼을 누름",
        "get_motor_speed": "%1",
        "neobot_left_motor": "왼쪽 모터를 %1 %2 의 속도로 회전 %3",
        "neobot_stop_left_motor": "왼쪽 모터를 정지 %1",
        "neobot_right_motor": "오른쪽 모터를 %1 %2 의 속도로 회전 %3",
        "neobot_stop_right_motor": "오른쪽 모터를 정지 %1",
        "neobot_both_motor": "왼쪽 모터를 %1 %2 & 오른쪽 모터를 %3 %4 의 속도로 회전 %5",
        "neobot_all_motor": "양쪽 모터를 %1 %2의 속도로 %3 회전 %4",
        "neobot_stop_all_motor": "양쪽 모터를 정지 %1",
        "neobot_robot": "로봇 %1 %2",
        "neobot_output_led_type1": "%1 에 연결한 LED를 %2 밝기로 %3 켜기 %4",
        "neobot_output_led_on": "%1 에 연결한 LED 켜기 %2",
        "neobot_output_led_off": "%1 에 연결한 LED 끄기 %2",
        "neobot_set_output": "%1 에 %2값만큼 출력 %3",
        "get_servo_degree": "%1",
        "neobot_servo_init": "%1 Servo모터 리셋 %2",
        "neobot_servo_change_degree": "Servo모터 각도 바꾸기 : %1 %2 %3 %4 %5",
        "neobot_servo_rotate": "Servo모터 회전하기 : %1 %2 %3 %4",
        "neobot_servo_stop": "%1 Servo모터 멈추기 %2",
        "neobot_play_note_for": "멜로디 %1 을(를) %2 옥타브로 %3 길이만큼 소리내기 %4",
        "neobot_play_note_with_sensor": "컨트롤러에서 %1 센서의 %2 ~ %3 값으로 멜로디 연주하기 %4",
        "neobot_gyro_value": "자이로 %1 값",
        "neobot_joystick_value": "조이스틱 %1 값",
        "neobot_crash_value": "가속값",
        "neobot_random_value": "%1 랜덤값",
        "neobot_judge_joystick_move": "조이스틱 컨트롤? %1",
        "neobot_judge_joystick_direction": "조이스틱 방향? %1",
        "neobot_judge_button": "%1 버튼 클릭?",
        "neobot_judge_gyro_direction_angle": "%1으로 기울었는가?",
        "neobot_judge_coord": "%1위치 %2 %3",
        "neobot_judge_crash": "가속값 %1 %2",
        "neobot_locate": "%1위치로 %2이동하기%3",
        "neobot_look": "%1쪽 바라보기%2",
        "get_gyro_degree": "%1",
        "get_move_method": "%1",
        "get_number_type1": "%1",
        "get_number_type2": "%1",
        "neobot_rb_port_value": "%1값",
        "neobot_rb_ir_sensor_value": "적외선센서값",
        "neobot_rb_light_sensor_value": "빛센서값",
        "neobot_rb_sound_sensor_value": "소리센서값",
        "neobot_rb_top_sensor_value": "윗면센서값",
        "neobot_rb_bottom_sensor_value": "바닥면센서값",
        "neobot_rb_led_on_type1": "LED를 %1 밝기로 켜기 %2",
        "neobot_rb_led_on_type2": "LED를 %1 밝기로 %2 초 켠 후 끄기 %3",
        "neobot_rb_led_off": "LED 끄기 %1",
        "neobot_rb_led_on_type3": "%1에 연결한 LED를 %2 밝기로 켜기 %3",
        "neobot_rb_led_on_type4": "%1에 연결한 LED를 %2 밝기로 %3초 켠 후 끄기 %4",
        "neobot_rb_led_off_type1": "%1에 연결한 LED 끄기 %2",
        "neobot_rb_output_type1": "%1에 연결한 외부포트에 %2만큼 출력하기 %3",
        "neobot_rb_motor_type1": "%1 모터를 %2 의 속도로 %3초 회전 후 정지 %4",
        "neobot_rb_motor_type2": "모터를 %1 %2 의 속도로 회전 %3",
        "neobot_rb_motor_type3": "%1 모터를 %2 의 속도로 회전 %3",
        "neobot_rb_motor_stop": "%1 모터 정지 %2",
        "neobot_rb_motor_type_select": "로봇 %1 %2",
        "neobot_rb_motor_type_stop": "로봇 정지 %1",
        "neobot_rb_ir_decision": "적외선센서 작동 (기준 값: %1)",
        "neobot_rb_light_decision": "빛센서 작동 (기준 값: %1)",
        "neobot_rb_sound_decision": "소리센서 작동 (기준 값: %1)",
        "neobot_rb_port_decision": " %1 작동 (기준 값: %2)",
        "neobot_rb_top_decision": "윗면센서 작동 (기준 값: %1)",
        "neobot_rb_bottom_decision": "바닥면센서 작동 (기준 값: %1)",
        "neobot_rb_remote_decision": "리모컨의 %1 버튼을 누름",
        "neobot_rb_servo_init": "%1에 연결한 Servo모터를 현재 위치로 초기화하기 %2",
        "neobot_rb_servo_turn_type1": "%1에 연결한 Servo모터를 %2으로 %3도 회전하기 %4",
        "neobot_rb_servo_turn_type2": "%1에 연결한 Servo모터를 %2도 회전하기 %3",
        "neobot_rb_servo_turn_type4": "%1에 연결한 Servo모터의 회전속도를 %2로 정하기 %3",
        "neobot_rb_servo_turn_type5": "%1에 연결한 Servo모터를 %2 %3 빠르기로 계속 회전하기 %4",
        "neobot_rb_servo_mode_manual": "%1에 연결한 Servo모터를 수동 제어모드로 바꾸기 %2",
        "neobot_rb_servo_stop": "%1에 연결한 Servo모터 멈추기 %2",
        "neobot_rb_led": "%1",
        "neobot_rb_time": "%1",
        "neobot_rb_time2": "%1",
        "neobot_rb_speed": "%1",
        "neobot_rb_speed2": "%1",
        "neobot_rb_surface": "%1",
        "neobot_st_sensor_value": "%1 값",
        "neobot_st_sensor_connect_external": "%1 에 연결한 %2 값",
        "neobot_st_sensor_convert_scale": "%1 센서값 %2 ~ %3 를 %4 ~ %5 (으)로 바꾼 값",
        "neobot_st_compare_symbol": "%1",
        "neobot_st_decision_sensor_is_over": "%1 의 센서값이 %2 %3",
        "neobot_st_decision_equal_with_sensor": "%1 에 연결한 컬러센서가 %2 을 감지함",
        "neobot_st_output_led_on": "%1 에 연결한 LED 켜기 %2",
        "neobot_st_output_led_off": "%1 에 연결한 LED 끄기 %2",
        "neobot_st_set_output": "%1 에 %2 값만큼 출력 %3",
        "orange_get_analog_value": "아날로그 %1 번 센서값",
        "orange_get_analog_value_map": "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
        "orange_get_ultrasonic_value": "울트라소닉 Trig %1 Echo %2 센서값",
        "orange_toggle_led": "디지털 %1 번 핀 %2 %3",
        "orange_digital_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "orange_set_tone": "디지털 %1 번 핀의 피에조 부저를 %3 옥타브 %2 음으로 %4 초 연주하기 %5",
        "orange_set_noTone": "디지털 %1 번 핀의 피에조 부저 소리 끄기 %2",
        "orange_set_servo": "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
        "orange_get_digital": "디지털 %1 번 센서값",
        "orange_set_neopixelinit": "디지털 %1 번 핀에 연결된 %2 개의 네오픽셀 LED 사용하기 %3",
        "orange_set_neopixel": "디지털 %1 번 핀에 연결된 %2 번째 네오픽셀 LED를 R: %3 , G: %4 , B: %5 색으로 켜기 %6",
        "orange_set_dht_init": "디지털 %1 번 핀에 연결된 온습도센서 사용하기 %2",
        "orange_get_dht_temp_value": "온습도센서의 온도값",
        "orange_get_dht_humi_value": "온습도센서의 습도값",
        "orange_set_pmsensor_init": "미세먼지 센서를 tx: %1 핀 rx: %2 핀에 연결해 사용하기 %3",
        "orange_get_pmsensor_value": "%1 미세먼지 농도(ug/m3)값",
        "orange_get_lcd_row": "%1",
        "orange_get_lcd_col": "%1",
        "orange_set_I2CLCD_init": "I2C LCD사용하기 %3",
        "orange_set_I2CLCD_print": "I2C LCD의 %1 번째 줄, %2 번째 칸에 %3 출력하기 %4",
        "orange_set_I2CLCD_clear": "I2C LCD의 화면 모두 지우기 %3",
        "orange_set_I2CLCD_emoticon": "I2C LCD의 %1 번째 줄, %2 번째 칸에 %3 이모티콘 출력하기 %4",
        "palmkit_inputsensor": "%1 %2 번",
        "palmkit_ispressed": "%1 번 버튼 누르기?",
        "palmkit_buzzer_off": "%1 번 부저 끄기 %2",
        "palmkit_buzzer_note": "%1 번 부저 %2 음 내기 %3",
        "palmkit_buzzer_note_delay": "%1 번 부저 %2 음 %3 박자로 연주하기 %4",
        "palmkit_led_toggle": "%1 번 LED %2 %3",
        "palmkit_led_color": "%1 번 LED 색 %2 으로 정하기 %3",
        "palmkit_led_color_number": "%1 번 LED 색 %2 으로 정하기 %3",
        "palmkit_led": "%1 번 LED R %2 G %3 B %4 %5",
        "palmkit_led_pwm": "%1 번 LED R %2 G %3 B %4 %5",
        "palmkit_motor_stop": "모터 정지하기 %1",
        "palmkit_dc_motor": "%1 번 DC모터 %2 속력 %3 으로 움직이기 %4",
        "palmkit_dc_motor_for_secs": "%1 번 DC모터 %2 속력 %3 으로 %4 초간 움직이기 %5",
        "palmkit_rc_motor": "%1 번 RC모터 각도 %2 속력 %3 으로 움직이기 %4",
        "pingpong_g1_when_button_pressed": "%1 큐브 버튼을 눌렀을 때",
        "pingpong_g1_when_tilted": "%1 큐브를 %2 방향으로 기울였을 때",
        "pingpong_g1_is_button_pressed": "큐브 버튼이 눌렸는가?",
        "pingpong_g1_is_tilted": "큐브가 %1 방향으로 기울어졌는가?",
        "pingpong_g1_get_tilt_value": "%1 방향 큐브 기울기",
        "pingpong_g1_get_sensor_value": "%1 센서값",
        "pingpong_g1_motor_rotate": "모터를 %1 방향으로 %2 도 회전하기 %3",
        "pingpong_g1_start_motor_rotate": "모터의 속도를 %1으로 계속 회전하기 %2",
        "pingpong_g1_stop_motor_rotate": "모터 멈추기 %1",
        "pingpong_g1_rotate_servo_mortor": "서보모터를 %1도로 설정하기 %2",
        "pingpong_g1_is_top_shape": "큐브 윗면에 %1 모양이 있는가?",
        "pingpong_g1_set_dot_pixel": "도트 X:%1 Y:%2 %3 %4",
        "pingpong_g1_set_dot_string": "도트에 문자열 %1  %2초동안 출력 %3",
        "pingpong_g1_set_dot_clear": "도트 화면 지우기 %1",
        "pingpong_g1_playNoteForBeats": "%1 음을 %2 박자로 연주하기 %3",
        "pingpong_g1_restForBeats": "%1 박자 쉬기 %2",
        "pingpong_g1_setTempo": "악보 빠르기를 %1 으로 정하기 %2",
        "pingpong_g1_getTempo": "악보 빠르기",
        "pingpong_g2_when_button_pressed": "%1 %2 큐브 버튼을 눌렀을 때",
        "pingpong_g2_when_tilted": "%1 %2 큐브를 %3로 기울였을 때",
        "pingpong_g2_is_button_pressed": "%1 큐브 버튼이 눌렸는가?",
        "pingpong_g2_is_tilted": "%1 큐브가 %2로 기울어졌는가?",
        "pingpong_g2_is_top_shape": "%1 큐브의 윗면에 %2 모양이 있는가?",
        "pingpong_g2_get_tilt_value": "%1 큐브의 %2 방향 기울기",
        "pingpong_g2_get_sensor_value": "%1 큐브의 %2 센서값",
        "pingpong_g2_multi_motor_rotate": "모터1을 %1 방향 %2 도, 모터2를 %3 방향 %4 도 회전하기 %5",
        "pingpong_g2_motor_rotate": "%1 모터를 %2 방향으로 %3 도 회전하기 %4",
        "pingpong_g2_start_multi_motor_rotate": "모터1 속도를 %1, 모터2 속도를 %2으로 계속 회전하기 %3",
        "pingpong_g2_start_motor_rotate": "%1 모터의 속도를 %2으로 계속 회전하기 %3",
        "pingpong_g2_stop_motor_rotate": "%1 모터 멈추기 %2",
        "pingpong_g2_set_dot_pixel": "%1 번째 큐브의 도트 X:%2 Y:%3 %4 %5",
        "pingpong_g2_set_dot_string": "%1 번째 큐브에 도트 문자열 %2 %3초동안 보여주기 %4",
        "pingpong_g2_set_dot_clear": "%1 번째 큐브의 화면 지우기 %2",
        "pingpong_g2_rotate_servo_mortor": "%1 번째 큐브의 서보모터 %2도로 설정하기 %3",
        "pingpong_g2_playNoteForBeats": "%1 큐브의 %2 음을 %3 박자로 연주하기 %4",
        "pingpong_g2_playChordForBeats": "%1 큐브 %2, %3 큐브 %4, %5 박자로 연주하기 %6",
        "pingpong_g2_restForBeats": "%1 박자 쉬기 %2",
        "pingpong_g2_setTempo": "악보 빠르기를 %1 으로 정하기 %2",
        "pingpong_g2_getTempo": "악보 빠르기",
        "pingpong_g3_when_button_pressed": "%1 %2 큐브 버튼을 눌렀을 때",
        "pingpong_g3_when_tilted": "%1 %2 큐브를 %3로 기울였을 때",
        "pingpong_g3_is_button_pressed": "%1 큐브 버튼이 눌렸는가?",
        "pingpong_g3_is_tilted": "%1 큐브가 %2로 기울어졌는가?",
        "pingpong_g3_is_top_shape": "%1 큐브의 윗면에 %2 모양이 있는가?",
        "pingpong_g3_get_tilt_value": "%1 큐브의 %2 방향 기울기",
        "pingpong_g3_get_sensor_value": "%1 큐브의 %2 센서값",
        "pingpong_g3_multi_motor_rotate": "모터1을 %1 방향 %2 도, 모터2를 %3 방향 %4 도, 모터3을 %5방향 %6도 회전하기 %7",
        "pingpong_g3_motor_rotate": "%1 모터를 %2 방향으로 %3 도 회전하기 %4",
        "pingpong_g3_start_multi_motor_rotate": "모터1 속도를 %1, 모터2 속도를 %2, 모터3 속도를 %3으로 계속 회전하기 %4",
        "pingpong_g3_start_motor_rotate": "%1 모터의 속도를 %2으로 계속 회전하기 %3",
        "pingpong_g3_stop_motor_rotate": "%1 모터 멈추기 %2",
        "pingpong_g3_set_dot_pixel": "%1 번째 큐브의 도트 X:%2 Y:%3 %4 %5",
        "pingpong_g3_set_dot_string": "%1 번째 큐브에 도트 문자열 %2 %3초동안 보여주기 %4",
        "pingpong_g3_set_dot_clear": "%1 번째 큐브의 화면 지우기 %2",
        "pingpong_g3_rotate_servo_mortor": "%1 번째 큐브의 서보모터 %2도로 설정하기 %3",
        "pingpong_g3_playNoteForBeats": "%1 큐브의 %2 음을 %3 박자로 연주하기 %4",
        "pingpong_g3_playChordForBeats": "%1 큐브 %2, %3 큐브 %4, %5 큐브 %6 %7 박자로 연주하기 %8",
        "pingpong_g3_restForBeats": "%1 박자 쉬기 %2",
        "pingpong_g3_setTempo": "악보 빠르기를 %1 으로 정하기 %2",
        "pingpong_g3_getTempo": "악보 빠르기",
        "pingpong_g4_when_button_pressed": "%1 %2 큐브 버튼을 눌렀을 때",
        "pingpong_g4_when_tilted": "%1 %2 큐브를 %3로 기울였을 때",
        "pingpong_g4_is_button_pressed": "%1 큐브 버튼이 눌렸는가?",
        "pingpong_g4_is_tilted": "%1 큐브가 %2로 기울어졌는가?",
        "pingpong_g4_is_top_shape": "%1 큐브의 윗면에 %2 모양이 있는가?",
        "pingpong_g4_get_tilt_value": "%1 큐브의 %2 방향 기울기",
        "pingpong_g4_get_sensor_value": "%1 큐브의 %2 센서값",
        "pingpong_g4_multi_motor_rotate": "모터1은 %1방향 %2도, 모터2는 %3방향 %4도, 모터3은 %5방향 %6도, 모터4는 %7방향 %8도 회전하기 %9",
        "pingpong_g4_motor_rotate": "%1 모터를 %2 방향으로 %3 도 회전하기 %4",
        "pingpong_g4_start_multi_motor_rotate": "모터1 속도를 %1, 모터2 속도를 %2, 모터3 속도를 %3, 모터4 속도를 %4으로 계속 회전하기 %5",
        "pingpong_g4_start_motor_rotate": "%1 모터의 속도를 %2으로 계속 회전하기 %3",
        "pingpong_g4_stop_motor_rotate": "%1 모터 멈추기 %2",
        "pingpong_g4_set_dot_pixel": "%1 번째 큐브의 도트 X:%2 Y:%3 %4 %5",
        "pingpong_g4_set_dot_string": "%1 번째 큐브에 도트 문자열 %2 %3초동안 보여주기 %4",
        "pingpong_g4_set_dot_clear": "%1 번째 큐브의 화면 지우기 %2",
        "pingpong_g4_rotate_servo_mortor": "%1 번째 큐브의 서보모터 %2도로 설정하기 %3",
        "pingpong_g4_playNoteForBeats": "%1 큐브의 %2 음을 %3 박자로 연주하기 %4",
        "pingpong_g4_playChordForBeats": "%1 큐브 %2, %3 큐브 %4, %5 큐브 %6 %7 박자로 연주하기 %8",
        "pingpong_g4_restForBeats": "%1 박자 쉬기 %2",
        "pingpong_g4_setTempo": "악보 빠르기를 %1 으로 정하기 %2",
        "pingpong_g4_getTempo": "악보 빠르기",
        "set_vibrator": "진동 알림 %1 %2",
        "set_fan": "팬을 속도 %1(으)로 회전 시키기 %2",
        "set_servor": "서보모터의 각도를 %1도로 정하기 %2",
        "set_motor": "DC모터 %1을 %2의 속도로 %3으로 회전하기 %4",
        "stop_motor": "DC모터 %1을 정지하기 %2",
        "set_move": "로봇을 %1의 속도로 %2 하기 %3",
        "stop_move": "로봇 정지하기 %1",
        "set_audio_octave": "계명 %1음을 %2옥타브 %3으로 연주하기 %4",
        "set_audio_freq": "펄스 %1Hz 음을 %2초 연주하기 %3",
        "stop_audio": "%1 만큼 연주쉬기 %2",
        "get_ultrasonic": "초음파센서 값 읽기",
        "get_joystick": "조이스틱 방향이 %1 인가?",
        "get_joystick_button": "조이스틱 버튼이 눌렸는가?",
        "get_button": "%1색 버튼이 눌렸는가?",
        "set_led": "컬러 LED 켜기- 빨강%1 초록%2 파랑%3 %4",
        "set_led_color": "LED %1색을 밝기 %2으로 켜기 %3",
        "stop_led": "LED 끄기 %1",
        "get_soil": "토양 센서 값 읽기",
        "get_analog": "아날로그 값 읽기",
        "get_digital": "디지털 %1번 포트가 참인가?",
        "set_digital": "디지털 %1 포트에 %2 출력하기 %3",
        "get_analog_value": "가변저항 값 읽기",
        "connect_senser_setting": "센서 설정 A1:%1 A2:%2 A3:%3 A4:%4 %5",
        "connect_remote_input": "리모컨 입력 %1",
        "connect_digital_input": "디지털 센서 %1",
        "connect_analog_input": "아날로그 센서 %1",
        "connect_value_mapping": "%1 의 %2 ~ %3 값을 %4 ~ %5 (으)로 변환",
        "connect_color_input_b": "컬러 센서 %1 이(가) %2 색 인가?",
        "connect_color_input_r": "컬러 센서 %1 의 색상",
        "connect_infinite_reset": "무한회전 센서 %1 초기화 %2",
        "connect_infinite_transform_input": "무한회전 센서 %1 의  %2",
        "connect_infinite_mm_diameter": "무한회전 센서 %1  지름 %2 의 mm 값",
        "connect_port_output": "출력포트 %1 을(를) %2 %3",
        "connect_servo_output": "서보 모터 %1 의 위치를 %2 로 이동 %3",
        "connect_dc_output": "DC 모터 %1 을(를) %2 속도로 회전 %3",
        "connect_mel_sec_output": "멜로디 %1 을(를) %2 초 동안 소리내기 %3",
        "connect_melody_output": "멜로디 %1 을(를) 소리내기 %2",
        "connect_melody_off": "멜로디 소리끄기 %1",
        "connect_fnd_output": "FND를 %1 (으)로 켜기 %2",
        "connect_fnd_off": "FND를 끄기 %1",
        "connect_eeprom_write": "EEPROM %1 주소에 %2 값 설정하기 %3",
        "connect_eeprom_buffset": "EEPROM %1 주소의 값 임시저장소로 호출하기 %2",
        "connect_buff_read": "EEPROM 임시저장소의 값",
        "roboid_hamster_beep": "햄스터 %1: 삐 소리내기 %2",
        "roboid_hamster_change_both_wheels_by": "햄스터 %1: 왼쪽 바퀴 %2 오른쪽 바퀴 %3 만큼 바꾸기 %4",
        "roboid_hamster_change_buzzer_by": "햄스터 %1: 버저 음을 %2 만큼 바꾸기 %3",
        "roboid_hamster_change_output_by": "햄스터 %1: 출력 %2 를 %3 만큼 바꾸기 %4",
        "roboid_hamster_change_tempo_by": "햄스터 %1: 연주 속도를 %2 만큼 바꾸기 %3",
        "roboid_hamster_change_wheel_by": "햄스터 %1: %2 바퀴 %3 만큼 바꾸기 %4",
        "roboid_hamster_clear_buzzer": "햄스터 %1: 버저 끄기 %2",
        "roboid_hamster_clear_led": "햄스터 %1: %2 LED 끄기 %3",
        "roboid_hamster_follow_line_until": "햄스터 %1: %2 선을 따라 %3 교차로까지 이동하기 %4",
        "roboid_hamster_follow_line_using": "햄스터 %1: %2 선을 %3 바닥 센서로 따라가기 %4",
        "roboid_hamster_hand_found": "햄스터 %1: 손 찾음?",
        "roboid_hamster_move_backward_for_secs": "햄스터 %1: 뒤로 %2 초 이동하기 %3",
        "roboid_hamster_move_forward_for_secs": "햄스터 %1: 앞으로 %2 초 이동하기 %3",
        "roboid_hamster_move_forward_once": "햄스터 %1: 말판 앞으로 한 칸 이동하기 %2",
        "roboid_hamster_play_note_for": "햄스터 %1: %2 %3 음을 %4 박자 연주하기 %5",
        "roboid_hamster_rest_for": "햄스터 %1: %2 박자 쉬기 %3",
        "roboid_hamster_set_both_wheels_to": "햄스터 %1: 왼쪽 바퀴 %2 오른쪽 바퀴 %3 (으)로 정하기 %4",
        "roboid_hamster_set_buzzer_to": "햄스터 %1: 버저 음을 %2 (으)로 정하기 %3",
        "roboid_hamster_set_following_speed_to": "햄스터 %1: 선 따라가기 속도를 %2 (으)로 정하기 %3",
        "roboid_hamster_set_led_to": "햄스터 %1: %2 LED를 %3 으로 정하기 %4",
        "roboid_hamster_set_output_to": "햄스터 %1: 출력 %2 를 %3 (으)로 정하기 %4",
        "roboid_hamster_set_port_to": "햄스터 %1: 포트 %2 를 %3 으로 정하기 %4",
        "roboid_hamster_set_tempo_to": "햄스터 %1: 연주 속도를 %2 BPM으로 정하기 %3",
        "roboid_hamster_set_wheel_to": "햄스터 %1: %2 바퀴 %3 (으)로 정하기 %4",
        "roboid_hamster_stop": "햄스터 %1: 정지하기 %2",
        "roboid_hamster_turn_for_secs": "햄스터 %1: %2 으로 %3 초 돌기 %4",
        "roboid_hamster_turn_once": "햄스터 %1: 말판 %2 으로 한 번 돌기 %3",
        "roboid_hamster_value": "햄스터 %1: %2",
        "roboid_turtle_button_state": "거북이 %1: 버튼을 %2 ?",
        "roboid_turtle_change_buzzer_by": "거북이 %1: 버저 음을 %2 만큼 바꾸기 %3",
        "roboid_turtle_change_head_led_by_rgb": "거북이 %1: 머리 LED를 R: %2 G: %3 B: %4 만큼 바꾸기 %5",
        "roboid_turtle_change_tempo_by": "거북이 %1: 연주 속도를 %2 만큼 바꾸기 %3",
        "roboid_turtle_change_wheel_by": "거북이 %1: %2 바퀴 %3 만큼 바꾸기 %4",
        "roboid_turtle_change_wheels_by_left_right": "거북이 %1: 왼쪽 바퀴 %2 오른쪽 바퀴 %3 만큼 바꾸기 %4",
        "roboid_turtle_clear_head_led": "거북이 %1: 머리 LED 끄기 %2",
        "roboid_turtle_clear_sound": "거북이 %1: 소리 끄기 %2",
        "roboid_turtle_cross_intersection": "거북이 %1: 검은색 교차로 건너가기 %2",
        "roboid_turtle_follow_line": "거북이 %1: %2 선을 따라가기 %3",
        "roboid_turtle_follow_line_until": "거북이 %1: 검은색 선을 따라 %2 까지 이동하기 %3",
        "roboid_turtle_follow_line_until_black": "거북이 %1: %2 선을 따라 검은색까지 이동하기 %3",
        "roboid_turtle_is_color_pattern": "거북이 %1: 색깔 패턴이 %2 %3 인가?",
        "roboid_turtle_move_backward_unit": "거북이 %1: 뒤로 %2 %3 이동하기 %4",
        "roboid_turtle_move_forward_unit": "거북이 %1: 앞으로 %2 %3 이동하기 %4",
        "roboid_turtle_pivot_around_wheel_unit_in_direction": "거북이 %1: %2 바퀴 중심으로 %3 %4 %5 방향으로 돌기 %6",
        "roboid_turtle_play_note": "거북이 %1: %2 %3 음을 연주하기 %4",
        "roboid_turtle_play_note_for_beats": "거북이 %1: %2 %3 음을 %4 박자 연주하기 %5",
        "roboid_turtle_play_sound_times": "거북이 %1: %2 소리 %3 번 재생하기 %4",
        "roboid_turtle_play_sound_times_until_done": "거북이 %1: %2 소리 %3 번 재생하고 기다리기 %4",
        "roboid_turtle_rest_for_beats": "거북이 %1: %2 박자 쉬기 %3",
        "roboid_turtle_set_buzzer_to": "거북이 %1: 버저 음을 %2 (으)로 정하기 %3",
        "roboid_turtle_set_following_speed_to": "거북이 %1: 선 따라가기 속도를 %2 (으)로 정하기 %3",
        "roboid_turtle_set_head_led_to": "거북이 %1: 머리 LED를 %2 으로 정하기 %3",
        "roboid_turtle_set_head_led_to_rgb": "거북이 %1: 머리 LED를 R: %2 G: %3 B: %4 (으)로 정하기 %5",
        "roboid_turtle_set_tempo_to": "거북이 %1: 연주 속도를 %2 BPM으로 정하기 %3",
        "roboid_turtle_set_wheel_to": "거북이 %1: %2 바퀴 %3 (으)로 정하기 %4",
        "roboid_turtle_set_wheels_to_left_right": "거북이 %1: 왼쪽 바퀴 %2 오른쪽 바퀴 %3 (으)로 정하기 %4",
        "roboid_turtle_stop": "거북이 %1: 정지하기 %2",
        "roboid_turtle_touching_color": "거북이 %1: %2 에 닿았는가?",
        "roboid_turtle_turn_at_intersection": "거북이 %1: 검은색 교차로에서 %2 으로 돌기 %3",
        "roboid_turtle_turn_unit_in_place": "거북이 %1: %2 으로 %3 %4 제자리 돌기 %5",
        "roboid_turtle_turn_unit_with_radius_in_direction": "거북이 %1: %2 으로 %3 %4 반지름 %5 cm를 %6 방향으로 돌기 %7",
        "roboid_turtle_value": "거북이 %1: %2",
        "roboid_hamster_gripper": "햄스터 %1: 집게 %2 %3",
        "roboid_hamster_release_gripper": "햄스터 %1: 집게 끄기 %2",
        "roboid_hamster_boolean": "햄스터 %1: %2?",
        "roboid_hamster_play_note": "햄스터 %1: %2 %3 음을 연주하기 %4",
        "roboid_hamster_s_hand_found": "햄스터S %1: 손 찾음?",
        "roboid_hamster_s_boolean": "햄스터S %1: %2?",
        "roboid_hamster_s_value": "햄스터S %1: %2",
        "roboid_hamster_s_move_forward_once": "햄스터S %1: 말판 앞으로 한 칸 이동하기 %2",
        "roboid_hamster_s_turn_once": "햄스터S %1: 말판 %2 으로 한 번 돌기 %3",
        "roboid_hamster_s_move_forward_unit": "햄스터S %1: 앞으로 %2 %3 이동하기 %4",
        "roboid_hamster_s_move_backward_unit": "햄스터S %1: 뒤로 %2 %3 이동하기 %4",
        "roboid_hamster_s_turn_unit_in_place": "햄스터S %1: %2 으로 %3 %4 제자리 돌기 %5",
        "roboid_hamster_s_pivot_around_unit_in_direction": "햄스터S %1: %2 중심으로 %3 %4 %5 방향으로 돌기 %6",
        "roboid_hamster_s_turn_unit_with_radius_in_direction": "햄스터S %1: %2 %3 으로 %4 %5 반지름 %6 cm를 %7 방향으로 돌기 %8",
        "roboid_hamster_s_change_both_wheels_by": "햄스터S %1: 왼쪽 바퀴 %2 오른쪽 바퀴 %3 만큼 바꾸기 %4",
        "roboid_hamster_s_set_both_wheels_to": "햄스터S %1: 왼쪽 바퀴 %2 오른쪽 바퀴 %3 (으)로 정하기 %4",
        "roboid_hamster_s_change_wheel_by": "햄스터S %1: %2 바퀴 %3 만큼 바꾸기 %4",
        "roboid_hamster_s_set_wheel_to": "햄스터S %1: %2 바퀴 %3 (으)로 정하기 %4",
        "roboid_hamster_s_follow_line_using": "햄스터S %1: %2 선을 %3 바닥 센서로 따라가기 %4",
        "roboid_hamster_s_follow_line_until": "햄스터S %1: %2 선을 따라 %3 교차로까지 이동하기 %4",
        "roboid_hamster_s_set_following_speed_to": "햄스터S %1: 선 따라가기 속도를 %2 (으)로 정하기 %3",
        "roboid_hamster_s_set_following_gain_to": "햄스터S %1: 선 따라가기 방향 변화량을 %2 (으)로 정하기 %3",
        "roboid_hamster_s_stop": "햄스터S %1: 정지하기 %2",
        "roboid_hamster_s_set_led_to": "햄스터S %1: %2 LED를 %3 으로 정하기 %4",
        "roboid_hamster_s_pick_led": "햄스터S %1: %2 LED를 %3로 정하기 %4",
        "roboid_hamster_s_change_led_by_rgb": "햄스터S %1: %2 LED를 R: %3 G: %4 B: %5 만큼 바꾸기 %6",
        "roboid_hamster_s_set_led_to_rgb": "햄스터S %1: %2 LED를 R: %3 G: %4 B: %5 (으)로 정하기 %6",
        "roboid_hamster_s_clear_led": "햄스터S %1: %2 LED 끄기 %3",
        "roboid_hamster_s_play_sound_times": "햄스터S %1: %2 소리 %3 번 재생하기 %4",
        "roboid_hamster_s_play_sound_times_until_done": "햄스터S %1: %2 소리 %3 번 재생하고 기다리기 %4",
        "roboid_hamster_s_change_buzzer_by": "햄스터S %1: 버저 음을 %2 만큼 바꾸기 %3",
        "roboid_hamster_s_set_buzzer_to": "햄스터S %1: 버저 음을 %2 (으)로 정하기 %3",
        "roboid_hamster_s_clear_sound": "햄스터S %1: 소리 끄기 %2",
        "roboid_hamster_s_play_note": "햄스터S %1: %2 %3 음을 연주하기 %4",
        "roboid_hamster_s_play_note_for": "햄스터S %1: %2 %3 음을 %4 박자 연주하기 %5",
        "roboid_hamster_s_rest_for": "햄스터S %1: %2 박자 쉬기 %3",
        "roboid_hamster_s_change_tempo_by": "햄스터S %1: 연주 속도를 %2 만큼 바꾸기 %3",
        "roboid_hamster_s_set_tempo_to": "햄스터S %1: 연주 속도를 %2 BPM으로 정하기 %3",
        "roboid_hamster_s_set_port_to": "햄스터S %1: 포트 %2 를 %3 으로 정하기 %4",
        "roboid_hamster_s_change_output_by": "햄스터S %1: 출력 %2 를 %3 만큼 바꾸기 %4",
        "roboid_hamster_s_set_output_to": "햄스터S %1: 출력 %2 를 %3 (으)로 정하기 %4",
        "roboid_hamster_s_gripper": "햄스터S %1: 집게 %2 %3",
        "roboid_hamster_s_release_gripper": "햄스터S %1: 집게 끄기 %2",
        "roboid_hamster_s_write_serial": "햄스터S %1: 시리얼 %2 %3 쓰기 %4",
        "roboid_hamster_s_read_serial_until": "햄스터S %1: 시리얼 %2 읽기 %3",
        "roboid_hamster_s_set_serial_rate_to": "햄스터S %1: 시리얼 속도를 %2 Bd로 정하기 %3",
        "roboid_turtle_boolean": "거북이 %1: %2?",
        "roboid_turtle_pick_head_led": "거북이 %1: 머리 LED를 %2로 정하기 %3",
        "roboid_cheese_value": "치즈 스틱 %1: %2",
        "roboid_cheese_boolean": "치즈 스틱 %1: %2?",
        "roboid_cheese_play_sound_times": "치즈 스틱 %1: %2 소리 %3 번 재생하기 %4",
        "roboid_cheese_play_sound_times_until_done": "치즈 스틱 %1: %2 소리 %3 번 재생하고 기다리기 %4",
        "roboid_cheese_change_buzzer_by": "치즈 스틱 %1: 버저 음을 %2 Hz만큼 바꾸기 %3",
        "roboid_cheese_set_buzzer_to": "치즈 스틱 %1: 버저 음을 %2 Hz로 정하기 %3",
        "roboid_cheese_clear_sound": "치즈 스틱 %1: 소리 끄기 %2",
        "roboid_cheese_play_note": "치즈 스틱 %1: %2 %3 음을 연주하기 %4",
        "roboid_cheese_play_note_for": "치즈 스틱 %1: %2 %3 음을 %4 박자 연주하기 %5",
        "roboid_cheese_rest_for": "치즈 스틱 %1: %2 박자 쉬기 %3",
        "roboid_cheese_change_tempo_by": "치즈 스틱 %1: 연주 속도를 %2 BPM만큼 바꾸기 %3",
        "roboid_cheese_set_tempo_to": "치즈 스틱 %1: 연주 속도를 %2 BPM으로 정하기 %3",
        "roboid_cheese_set_sound_port_to": "치즈 스틱 %1: 소리 출력을 %2로 정하기 %3",
        "roboid_cheese_set_input_mode_to": "치즈 스틱 %1: 포트 %2를 %3 입력으로 정하기 %4",
        "roboid_cheese_set_input_range_to": "치즈 스틱 %1: 입력 %2의 범위 %3 ~ %4을(를) %5 ~ %6 소수점 %7으로 정하기 %8",
        "roboid_cheese_set_three_input_ranges_to": "치즈 스틱 %1: 입력 %2의 범위 %3 ~ %4 ~ %5을(를) %6 ~ %7 ~ %8 소수점 %9으로 정하기 %10",
        "roboid_cheese_analog_input": "치즈 스틱 %1: 입력 %2",
        "roboid_cheese_digital_input": "치즈 스틱 %1: 입력 %2 %3 ?",
        "roboid_cheese_button_state": "치즈 스틱 %1: 버튼 %2를 %3?",
        "roboid_cheese_set_pulse_mode_to": "치즈 스틱 %1: 포트 %2를 %3 입력으로 정하기 %4",
        "roboid_cheese_pulse_input": "치즈 스틱 %1: 포트 %2에서 펄스 감지?",
        "roboid_cheese_set_digital_output_to": "치즈 스틱 %1: 디지털 출력 %2를 %3(으)로 정하기 %4",
        "roboid_cheese_change_pwm_output_by": "치즈 스틱 %1: PWM 출력 %2를 %3%만큼 바꾸기 %4",
        "roboid_cheese_set_pwm_output_to": "치즈 스틱 %1: PWM 출력 %2를 %3%로 정하기 %4",
        "roboid_cheese_change_servo_motor_angle_by": "치즈 스틱 %1: 서보 모터 %2의 각도를 %3도만큼 바꾸기 %4",
        "roboid_cheese_set_servo_motor_angle_to": "치즈 스틱 %1: 서보 모터 %2의 각도를 %3도로 정하기 %4",
        "roboid_cheese_turn_off_servo_motor": "치즈 스틱 %1: 서보 모터 %2 전원 끄기 %3",
        "roboid_cheese_change_dc_motor_velocity_by": "치즈 스틱 %1: DC 모터 %2의 속도를 %3%만큼 바꾸기 %4",
        "roboid_cheese_set_dc_motor_velocity_to": "치즈 스틱 %1: DC 모터 %2의 속도를 %3%로 정하기 %4",
        "roboid_cheese_stop_dc_motor": "치즈 스틱 %1: DC 모터 %2 정지하기 %3",
        "roboid_cheese_rotate_step_motor": "치즈 스틱 %1: 스텝 모터 %2 스텝을 속도 %3 스텝/초로 회전하기 %4",
        "roboid_cheese_change_step_motor_velocity_by": "치즈 스틱 %1: 스텝 모터의 속도를 %2 스텝/초만큼 바꾸기 %3",
        "roboid_cheese_set_step_motor_velocity_to": "치즈 스틱 %1: 스텝 모터의 속도를 %2 스텝/초로 정하기 %3",
        "roboid_cheese_stop_off_step_motor": "치즈 스틱 %1: 스텝 모터 %2 %3",
        "roboid_cheese_set_step_motor_mode_to": "치즈 스틱 %1: 스텝 모터를 %2 모드로 정하기 %3",
        "roboid_cheese_step_count": "치즈 스틱 %1: 스텝 수",
        "roboid_cheese_set_led_to_color": "치즈 스틱 %1: RGB LED %2을(를) %3 %4으로 정하기 %5",
        "roboid_cheese_pick_led_to": "치즈 스틱 %1: RGB LED %2을(를) %3로 정하기 %4",
        "roboid_cheese_change_led_by_rgb": "치즈 스틱 %1: RGB LED %2을(를) R: %3 G: %4 B: %5만큼 바꾸기 %6",
        "roboid_cheese_setLed_to_rgb": "치즈 스틱 %1: RGB LED %2을(를) R: %3 G: %4 B: %5(으)로 정하기 %6",
        "roboid_cheese_clear_led": "치즈 스틱 %1: RGB LED %2 끄기 %3",
        "roboid_cheese_set_led_type_to": "치즈 스틱 %1: RGB LED %2을(를) %3형으로 정하기 %4",
        "roboid_cheese_neopixel_set_number_and_type_to": "치즈 스틱 %1: 네오픽셀 LED %2개, %3로 정하기 %4",
        "roboid_cheese_neopixel_set_all_leds_to_pattern": "치즈 스틱 %1: 네오픽셀 모든 LED를 %2 패턴으로 정하기 %3",
        "roboid_cheese_neopixel_set_all_leds_to_color": "치즈 스틱 %1: 네오픽셀 모든 LED를 %2으로 정하기 %3",
        "roboid_cheese_neopixel_pick_all_leds_to": "치즈 스틱 %1: 네오픽셀 모든 LED를 %2로 정하기 %3",
        "roboid_cheese_neopixel_change_all_leds_by_rgb": "치즈 스틱 %1: 네오픽셀 모든 LED를 R: %2 G: %3 B: %4만큼 바꾸기 %5",
        "roboid_cheese_neopixel_set_all_leds_to_rgb": "치즈 스틱 %1: 네오픽셀 모든 LED를 R: %2 G: %3 B: %4(으)로 정하기 %5",
        "roboid_cheese_neopixel_clear_all_leds": "치즈 스틱 %1: 네오픽셀 모든 LED 끄기 %2",
        "roboid_cheese_neopixel_set_led_to_color": "치즈 스틱 %1: 네오픽셀 %2번째 LED를 %3으로 정하기 %4",
        "roboid_cheese_neopixel_pick_led_to": "치즈 스틱 %1: 네오픽셀 %2번째 LED를 %3로 정하기 %4",
        "roboid_cheese_neopixel_change_led_by_rgb": "치즈 스틱 %1: 네오픽셀 %2번째 LED를 R: %3 G: %4 B: %5만큼 바꾸기 %6",
        "roboid_cheese_neopixel_set_led_to_rgb": "치즈 스틱 %1: 네오픽셀 %2번째 LED를 R: %3 G: %4 B: %5(으)로 정하기 %6",
        "roboid_cheese_neopixel_clear_led": "치즈 스틱 %1: 네오픽셀 %2번째 LED 끄기 %3",
        "roboid_cheese_neopixel_set_led_range_to_pattern": "치즈 스틱 %1: 네오픽셀 %2번째부터 %3번째까지의 LED를 %4 패턴으로 정하기 %5",
        "roboid_cheese_neopixel_set_led_range_to_color": "치즈 스틱 %1: 네오픽셀 %2번째부터 %3번째까지 %4칸 간격의 LED를 %5으로 정하기 %6",
        "roboid_cheese_neopixel_pick_led_range_to": "치즈 스틱 %1: 네오픽셀 %2번째부터 %3번째까지 %4칸 간격의 LED를 %5로 정하기 %6",
        "roboid_cheese_neopixel_change_led_range_by_rgb": "치즈 스틱 %1: 네오픽셀 %2번째부터 %3번째까지 %4칸 간격의 LED를 R: %5 G: %6 B: %7만큼 바꾸기 %8",
        "roboid_cheese_neopixel_set_led_range_to_rgb": "치즈 스틱 %1: 네오픽셀 %2번째부터 %3번째까지 %4칸 간격의 LED를 R: %5 G: %6 B: %7(으)로 정하기 %8",
        "roboid_cheese_neopixel_clear_led_range": "치즈 스틱 %1: 네오픽셀 %2번째부터 %3번째까지 %4칸 간격의 LED 끄기 %5",
        "roboid_cheese_neopixel_shift": "치즈 스틱 %1: 네오픽셀 %2칸 이동하기 %3",
        "roboid_cheese_neopixel_rotate": "치즈 스틱 %1: 네오픽셀 %2칸 회전하기 %3",
        "roboid_cheese_neopixel_change_brightness_by": "치즈 스틱 %1: 네오픽셀 밝기를 %2%만큼 바꾸기 %3",
        "roboid_cheese_neopixel_set_brightness_to": "치즈 스틱 %1: 네오픽셀 밝기를 %2%로 정하기 %3",
        "roboid_cheese_write_serial": "치즈 스틱 %1: 시리얼 %2 %3 쓰기 %4",
        "roboid_cheese_read_serial_until": "치즈 스틱 %1: 시리얼 %2 읽기 %3",
        "roboid_cheese_set_serial_port_to": "치즈 스틱 %1: 시리얼 포트를 %2로 정하기 %3",
        "roboid_cheese_set_serial_rate_to": "치즈 스틱 %1: 시리얼 속도를 %2Bd로 정하기 %3",
        "roboid_cheese_serial_input": "치즈 스틱 %1: 시리얼 입력",
        "roboid_cheese_pid_start": "치즈 스틱 %1: %2 시작하기 %3",
        "roboid_cheese_pid_set_range_to": "치즈 스틱 %1: PID %2의 범위 %3 ~ %4을(를) %5 ~ %6 소수점 %7으로 정하기 %8",
        "roboid_cheese_pid_set_three_ranges_to": "치즈 스틱 %1: PID %2의 범위 %3 ~ %4 ~ %5을(를) %6 ~ %7 ~ %8 소수점 %9으로 정하기 %10",
        "roboid_cheese_pid_reset_encoder": "치즈 스틱 %1: PID 엔코더 값 초기화하기 %2",
        "roboid_cheese_pid_input": "치즈 스틱 %1: PID %2",
        "roboid_cheese_pid_button_state": "치즈 스틱 %1: PID 버튼 %2을(를) %3?",
        "roboid_cheese_hat010_start": "치즈 스틱 %1: HAT-010 5x5 매트릭스 시작하기 %2",
        "roboid_cheese_hat010_button": "치즈 스틱 %1: HAT-010 버튼 %2",
        "roboid_cheese_hat010_button_state": "치즈 스틱 %1: HAT-010 버튼 %2를 %3?",
        "roboid_cheese_hat010_background_turn_on_xy": "치즈 스틱 %1: HAT-010 배경 x: %2 y: %3 %4으로 켜기 %5",
        "roboid_cheese_hat010_background_turn_off_xy": "치즈 스틱 %1: HAT-010 배경 x: %2 y: %3 끄기 %4",
        "roboid_cheese_hat010_background_draw_shape_at_xy": "치즈 스틱 %1: HAT-010 배경 %2 %3을(를) x: %4 y: %5에 그리기 %6",
        "roboid_cheese_hat010_background_draw_string_at_xy": "치즈 스틱 %1: HAT-010 배경 %2 글자 %3을(를) x: %4 y: %5에 그리기 %6",
        "roboid_cheese_hat010_background_draw_pattern_at_xy": "치즈 스틱 %1: HAT-010 배경 %2 패턴 %3을(를) x: %4 y: %5에 그리기 %6",
        "roboid_cheese_hat010_clear": "치즈 스틱 %1: HAT-010 %2 지우기 %3",
        "roboid_cheese_hat010_scroll_by_xy": "치즈 스틱 %1: HAT-010 %2 x: %3 y: %4만큼 이동하기 %5",
        "roboid_cheese_hat010_sprite_set_to_shape": "치즈 스틱 %1: HAT-010 그림 %2을(를) %3 %4(으)로 정하기 %5",
        "roboid_cheese_hat010_sprite_set_to_string": "치즈 스틱 %1: HAT-010 그림 %2을(를) %3 글자 %4(으)로 정하기 %5",
        "roboid_cheese_hat010_sprite_set_to_pattern": "치즈 스틱 %1: HAT-010 그림 %2을(를) %3 패턴 %4(으)로 정하기 %5",
        "roboid_cheese_hat010_sprite_clear_show_hide": "치즈 스틱 %1: HAT-010 그림 %2 %3 %4",
        "roboid_cheese_hat010_sprite_change_positions_by_xy": "치즈 스틱 %1: HAT-010 그림 %2의 위치를 x: %3 y: %4만큼 바꾸기 %5",
        "roboid_cheese_hat010_sprite_set_positions_to_xy": "치즈 스틱 %1: HAT-010 그림 %2의 위치를 x: %3 y: %4(으)로 정하기 %5",
        "roboid_cheese_hat010_sprite_change_position_by_value": "치즈 스틱 %1: HAT-010 그림 %2의 %3 위치를 %4만큼 바꾸기 %5",
        "roboid_cheese_hat010_sprite_set_position_to_value": "치즈 스틱 %1: HAT-010 그림 %2의 %3 위치를 %4(으)로 정하기 %5",
        "roboid_cheese_hat010_sprite_rotate": "치즈 스틱 %1: HAT-010 그림 %2을(를) %3 방향으로 회전하기 %4",
        "roboid_cheese_hat010_sprite_flip_in_direction": "치즈 스틱 %1: HAT-010 그림 %2을(를) %3 방향으로 뒤집기 %4",
        "roboid_cheese_hat010_sprite_stamp_to_background": "치즈 스틱 %1: HAT-010 그림 %2을(를) 배경에 도장 찍기 %3",
        "roboid_cheese_hat010_sprite_position": "치즈 스틱 %1: HAT-010 그림 %2의 %3 위치",
        "roboid_cheese_hat010_sprite_touching_sprite": "치즈 스틱 %1: HAT-010 그림 %2이(가) 그림 %3에 닿았는가?",
        "roboid_cheese_hat010_sprite_touching": "치즈 스틱 %1: HAT-010 그림 %2이(가) %3에 닿았는가?",
        "roboid_cheese_hat010_change_brightness_by": "치즈 스틱 %1: HAT-010 밝기를 %2%만큼 바꾸기 %3",
        "roboid_cheese_hat010_set_brightness_to": "치즈 스틱 %1: HAT-010 밝기를 %2%로 정하기 %3",
        "roduino_get_analog_number": "%1  ",
        "roduino_get_port_number": "%1  ",
        "roduino_get_analog_value": "아날로그 %1 번 센서값  ",
        "roduino_get_digital_value": "디지털 %1 번 센서값  ",
        "roduino_set_digital": "디지털 %1 번 핀 %2 %3",
        "roduino_motor": "%1 %2 %3",
        "roduino_set_color_pin": "컬러센서 R : %1, G : %2, B : %3 %4",
        "roduino_get_color": "컬러센서 %1 감지",
        "roduino_on_block": " On ",
        "roduino_off_block": " Off ",
        "roduino_set_servo_value": "서보모터 %1 번 핀 %2˚ %3",
        "roduino_set_pwm_value": "PWM %1 번 핀 %2으로 전류조절 %3",
        "roduino_get_sensor_analog_value": "아날로그 %1 %2 번 핀 값",
        "roduino_get_sensor_digital_value": "디지털 %1 %2 번 핀 값",
        "schoolkit_get_in_port_number": "%1  ",
        "schoolkit_get_out_port_number": "%1  ",
        "schoolkit_get_servo_port_number": "%1  ",
        "schoolkit_get_input_value": "디지털 %1 번 센서값  ",
        "schoolkit_set_output": "디지털 %1 번 핀 %2 %3",
        "schoolkit_motor": "%1 속도 %2(으)로 %3 %4",
        "schoolkit_set_servo_value": "서보모터 %1 번 핀 %2˚ %3",
        "schoolkit_on_block": " On ",
        "schoolkit_off_block": " Off ",
        "robotami_coding_get_analog_value": "아날로그 %1 번 포트의 입력값",
        "robotami_coding_get_digital_value": "디지털 %1 번 포트의 입력값",
        "robotami_coding_set_digital_value": "디지털 %1 번 포트로 %2 출력하기 %3",
        "robotami_coding_set_pwm": "PWM %1 번 포트로 %2 출력하기 %3",
        "robotami_coding_set_tone": "계명 %1 를 %2 옥타브로 %3 초 동안 연주하기 %4",
        "robotami_coding_set_servo": "서보모터 %1 을 %2 도 위치로 회전 시키기 %3",
        "robotami_coding_set_dcm_value": "DC모터 %1 번을 %2 의 속도로 %3 으로 회전 시키기 %4",
        "robotami_coding_set_dcm_stop": "DC모터 %1 번 정지시키기 %2",
        "robotami_coding_set_robot_value": "로봇을 %1 의 속도로 %2 시키기 %3",
        "robotami_coding_set_robot_stop": "로봇 정지시키기 %1",
        "robotis_carCont_sensor_value": "%1   값",
        "robotis_carCont_cm_led": "4번 LED %1 ,  1번 LED %2 %3",
        "robotis_carCont_cm_sound_detected_clear": "최종소리감지횟수 초기화 %1",
        "robotis_carCont_aux_motor_speed": "%1 감속모터 속도를 %2 , 출력값을 %3 (으)로 정하기 %4",
        "robotis_carCont_cm_calibration": "%1 적외선 센서 캘리브레이션 값을 %2 (으)로 정하기 %3",
        "robotis_openCM70_cm_custom_value": "직접입력 주소 ( %1 ) %2 값",
        "robotis_openCM70_sensor_value": "제어기 %1 값",
        "robotis_openCM70_aux_sensor_value": "%1   %2 값",
        "robotis_openCM70_cm_buzzer_index": "제어기 음계값 %1 을(를) %2 초 동안 연주 %3",
        "robotis_openCM70_cm_buzzer_melody": "제어기 멜로디 %1 번 연주 %2",
        "robotis_openCM70_cm_sound_detected_clear": "최종소리감지횟수 초기화 %1",
        "robotis_openCM70_cm_led": "제어기 %1 LED %2 %3",
        "robotis_openCM70_cm_motion": "모션 %1 번 실행 %2",
        "robotis_openCM70_aux_motor_speed": "%1 감속모터 속도를 %2 , 출력값을 %3 (으)로 정하기 %4",
        "robotis_openCM70_aux_servo_mode": "%1 서보모터 모드를 %2 (으)로 정하기 %3",
        "robotis_openCM70_aux_servo_speed": "%1 서보모터 속도를 %2 , 출력값을 %3 (으)로 정하기 %4",
        "robotis_openCM70_aux_servo_position": "%1 서보모터 위치를 %2 (으)로 정하기 %3",
        "robotis_openCM70_aux_led_module": "%1 LED 모듈을 %2 (으)로 정하기 %3",
        "robotis_openCM70_aux_custom": "%1 사용자 장치를 %2 (으)로 정하기 %3",
        "robotis_openCM70_cm_custom": "직접입력 주소 ( %1 ) (을)를 %2 (으)로 정하기 %3",
        "robotori_digitalInput": "%1",
        "robotori_analogInput": "%1",
        "robotori_digitalOutput": "디지털 %1 핀, 출력 값 %2 %3",
        "robotori_analogOutput": "아날로그 %1 %2 %3",
        "robotori_servo": "서보모터 각도 %1 %2",
        "robotori_dc_direction": "DC모터 %1 회전 %2 %3",
        "rokoboard_get_sensor_value_by_name": "%1 의 센서값",
        "sally_touching_color": "%1 에 닿았는가?",
        "sally_is_color_pattern": "색깔 패턴이 %1 %2 인가?",
        "sally_button_state": "버튼을 %1 ?",
        "sally_boolean": "%1?",
        "sally_value": "%1",
        "sally_move_forward_unit": "앞으로 %1 %2 이동하기 %3",
        "sally_move_backward_unit": "뒤로 %1 %2 이동하기 %3",
        "sally_turn_unit_in_place": "%1 으로 %2 %3 제자리 돌기 %4",
        "sally_pivot_around_wheel_unit_in_direction": "%1 바퀴 중심으로 %2 %3 %4 방향으로 돌기 %5",
        "sally_turn_unit_with_radius_in_direction": "%1 으로 %2 %3 반지름 %4 cm를 %5 방향으로 돌기 %6",
        "sally_change_wheels_by_left_right": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 만큼 바꾸기 %3",
        "sally_set_wheels_to_left_right": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 (으)로 정하기 %3",
        "sally_change_wheel_by": "%1 바퀴 %2 만큼 바꾸기 %3",
        "sally_set_wheel_to": "%1 바퀴 %2 (으)로 정하기 %3",
        "sally_follow_line": "선 따라가기 %1",
        "sally_follow_line_until": "선을 따라 %1 까지 이동하기 %2",
        "sally_cross_intersection": "교차로 건너가기 %1",
        "sally_turn_at_intersection": "교차로에서 %1 으로 돌기 %2",
        "sally_jump_line": "%1 선으로 건너가기 %2",
        "sally_set_following_speed_to": "선 따라가기 속도를 %1 (으)로 정하기 %2",
        "sally_stop": "정지하기 %1",
        "sally_set_led_to": "LED를 %1 으로 정하기 %2",
        "sally_pick_led": "LED를 %1로 정하기 %2",
        "sally_change_led_by_rgb": "LED를 R: %1 G: %2 B: %3 만큼 바꾸기 %4",
        "sally_set_led_to_rgb": "LED를 R: %1 G: %2 B: %3 (으)로 정하기 %4",
        "sally_clear_led": "LED 끄기 %1",
        "sally_play_sound_times": "%1 소리 %2 번 재생하기 %3",
        "sally_play_sound_times_until_done": "%1 소리 %2 번 재생하고 기다리기 %3",
        "sally_change_buzzer_by": "버저 음을 %1 만큼 바꾸기 %2",
        "sally_set_buzzer_to": "버저 음을 %1 (으)로 정하기 %2",
        "sally_clear_sound": "소리 끄기 %1",
        "sally_play_note": "%1 %2 음을 연주하기 %3",
        "sally_play_note_for_beats": "%1 %2 음을 %3 박자 연주하기 %4",
        "sally_rest_for_beats": "%1 박자 쉬기 %2",
        "sally_change_tempo_by": "연주 속도를 %1 만큼 바꾸기 %2",
        "sally_set_tempo_to": "연주 속도를 %1 BPM으로 정하기 %2",
        "sciencecube_temper": "온도 센서값",
        "sciencecube_current": "전류 센서값",
        "sciencecube_pressue": "압력 센서값",
        "sciencecube_voltage": "전압 센서값",
        "sciencecube_ph": "ph 센서값",
        "sciencecube_force": "힘 센서값",
        "sciencecube_motion": "운동 센서값",
        "sensorBoard_get_number_sensor_value": "아날로그 %1 번 센서값  ",
        "sensorBoard_get_digital_value": "디지털 %1 번 센서값  ",
        "sensorBoard_toggle_led": "디지털 %1 번 핀 %2 %3",
        "sensorBoard_toggle_pwm": "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
        "sensorBoard_convert_scale": "%1 값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 바꾼값  ",
        "sensorBoard_get_named_sensor_value": "%1  센서값",
        "sensorBoard_is_button_pressed": "%1  버튼을 눌렀는가?",
        "sensorBoard_led": "%1  LED %2   %3",
        "smartBoard_convert_scale": "%1 값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 바꾼값",
        "smartBoard_get_named_sensor_value": "%1 센서값",
        "smartBoard_is_button_pressed": "%1 버튼을 눌렀는가?",
        "smartBoard_set_dc_motor_direction": "%1 DC 모터를 %2 방향으로 정하기 %3",
        "smartBoard_set_dc_motor_speed": "%1 DC모터를 %2 %3",
        "smartBoard_set_dc_motor_pwm": "%1 DC모터를 %2 속도로 돌리기 %3",
        "smartBoard_set_servo_speed": "%1 번 서보모터의 속도를 %2 %3",
        "smartBoard_set_servo_angle": "%1 번 서보모터를 %2 도 로 움직이기 %3",
        "smartBoard_set_number_eight_pin": "%1 포트를 %2 %3",
        "smartBoard_set_gs1_pwm": "GS1 포트의 PWM을 %1 로 정하기 %2",
        "ssboard_nano_buzzer_onoff": "스피커 삐 소리 %1 초 연주 %2",
        "ssboard_nano_set_digital_buzzer": "스피커음계 %1 옥타브 %2 음 %3 초 연주 %4",
        "ssboard_nano_set_motor_speed": "DC모터 왼쪽 속도%1 오른쪽 속도%2 으로 정하기 %3",
        "ssboard_nano_motor_stop": "DC모터 정지하기 %1",
        "ssboard_nano_set_servo": "서보모터 %1번 핀 각도 %2 %3",
        "ssboard_nano_set_rgbled_onoff": "RGB LED %1 번째 색깔 %2 %3",
        "ssboard_nano_rgbled_seting": "RGB LED %1핀에 %2개  밝기%3  %4",
        "ssboard_nano_set_rgbled_value": "RGB LED %1번째  빨강%2 초록%3 파랑%4 %5",
        "ssboard_nano_rgbled_all_onoff": "RGB LED  %1 %2",
        "ssboard_nano_digital_onoff": "디지털 %1 핀 %2 %3",
        "ssboard_nano_get_digital_value": "디지털 %1 핀 읽기",
        "ssboard_nano_get_analog_value": "아날로그 %1 핀 읽기",
        "ssboard_nano_set_pwm": "PWM %1 핀에 %2 %3",
        "ssboard_nano_set_ultrasonic": "초음파센서 설정 트리거 %1 핀, 에코 %2 핀 으로 연결 %3",
        "ssboard_nano_get_usonic_value": "초음파센서 값 읽기",
        "ssboard_nano_set_temp": "온도센서 %1 핀에 연결 %2",
        "ssboard_nano_get_temp_value": "온도센서 값 읽기",
        "ssboard_nano_set_i2c": "I2C포트  %1 연결 %2",
        "ssboard_nano_get_color_value": "컬러센서 %1 값 읽기",
        "ssboard_nano_get_gyro_value": "자이로센서 %1 값 읽기",
        "ssboard_nano_set_lcd_string": "lcd 세로%1줄,  가로%2줄 에  %3 표시 %4",
        "ssboard_nano_set_lcd_init": "lcd 설정 : I2C 주소 0x%1 , 가로줄 수 %2 , 세로줄 수 %3 으로 설정하기%4",
        "ssboard_nano_set_lcd_clear": "lcd 지우기 %1",
        "ssboard_nano_get_analog_mapping": " %1 값 %2 ~ %3 에서 %4 ~ %5 으로 변환값",
        "thinkboard_buzzer_onoff": "버저 %1 %2",
        "thinkboard_set_digital_buzzer": "버저를 %1 옥타브 %2 음 %3 초 연주 %4",
        "thinkboard_get_digital_value": "포트 %1 버튼 센서 값",
        "thinkboard_digital_button_pressed": " 포트 %1 버튼 센서 눌림",
        "thinkboard_get_analog_value": "포트 %1 의 %2 센서 값",
        "thinkboard_get_analog_mapping": "포트 %1 의 %2 센서 값 %3 ~ %4 에서 %5 ~ %6 으로 변환값",
        "thinkboard_get_distsensor_value": "포트 %1 거리(IR) 센서 값",
        "thinkboard_get_analog_ir_mapping": "포트 %1 의 거리(IR) 센서 값 %2 ~ %3 에서 %4 ~ %5 으로 변환값",
        "thinkboard_get_usonic_value": "포트 %1 초음파 센서 값",
        "thinkboard_get_analog_usonic_mapping": "포트 %1 의 초음파 센서 값 %2 ~ %3 에서 %4 ~ %5 으로 변환값",
        "thinkboard_get_analog_temp_value": "포트 %1 의 %2 센서 값",
        "thinkboard_digital_Laser_onoff": "포트 %1 의 레이저포인터 %2 %3",
        "thinkboard_digital_rgbled_onoff": "RGB LED %1 색 켜기 %2",
        "thinkboard_digital_rgbled_off": "RGB LED 끄기 %1",
        "thinkboard_get_digital_servo_value": "포트 %1 180 서보모터 각도 값",
        "thinkboard_digital_set_servo_angle": "포트 %1 의 180 서보모터의 각도를 %2 으로 정하기 %3",
        "thinkboard_digital_set_servo_direction": "포트 %1 의 180 서보모터를 %2 방향으로 1도 바꾸기 %3",
        "thinkboard_digital_set_servo_stop": "포트 %1 의 180 서보모터 정지하기 %2",
        "thinkboard_get_digital_servo_360_value": "포트 %1 360 서보모터 각도 값",
        "thinkboard_digital_set_servo_360_angle": "포트 %1 의 360 서보모터의 각도를 %2 으로 정하기 %3",
        "thinkboard_digital_set_servo_360_stop": "포트 %1 의 360 서보모터 정지하기 %2",
        "thinkboard_digital_set_motor_direction": "포트 %1 의 DC모터 방향을 %2 방향으로 정하기 %3",
        "thinkboard_digital_set_motor_speed": "포트 %1 의 DC모터의 속도를 %2 %로 정하기 %3",
        "thinkboard_digital_motor_stop": "포트 %1 의 DC모터 정지하기 %2",
        "truetrue_get_accsensor": "가속도센서 %1 의 값",
        "truetrue_get_bottomcolorsensor": "바닥컬러센서 %1 의 값",
        "truetrue_get_frontcolorsensor": "전면컬러센서 %1 의 값",
        "truetrue_get_linesensor": "라인센서 %1 의 값",
        "truetrue_get_proxisensor": "근접센서 %1 의 값",
        "truetrue_set_colorled": "컬러LED Red %1  Green %2 Blue %3 로 설정 %4",
        "truetrue_set_dualmotor": "DC모터 좌 %1  우 %2 속도로 %3 초 구동 %4",
        "truetrue_set_led_colorsensor": "%1 조명용 LED %2 %3",
        "truetrue_set_led_linesensor": "라인센서 조명용 LED %1 %2",
        "truetrue_set_led_proxi": "%1 조명용 LED %2 %3",
        "truetrue_set_linetracer": "라인트레이싱 모드 %1 %2",
        "truetrue_set_singlemotor": "DC모터 %1  속도 %2 로 설정 %3",
        "truetrue_set_head_colorled": "머리 LED를 %1 로 변경 %2",
        "truetrue_set_move": "로봇을 %1 계속이동 %2",
        "truetrue_set_sec_move": "로봇을 %1  %2 초 이동 %3",
        "truetrue_set_rotate": "로봇을 %1 계속 회전 %2",
        "truetrue_set_sec_rotate": "로봇을 %1  %2 초 회전 %3",
        "truetrue_set_grid_block": "뚜루뚜루를 격자 %1 칸 만큼 이동 %2 ",
        "truetrue_set_grid_rotate": "뚜루뚜루를 격자에서 %1 %2 회 회전 %3 ",
        "turtle_button_state": "버튼을 %1 ?",
        "turtle_change_buzzer_by": "버저 음을 %1 만큼 바꾸기 %2",
        "turtle_change_head_led_by_rgb": "머리 LED를 R: %1 G: %2 B: %3 만큼 바꾸기 %4",
        "turtle_change_tempo_by": "연주 속도를 %1 만큼 바꾸기 %2",
        "turtle_change_wheel_by": "%1 바퀴 %2 만큼 바꾸기 %3",
        "turtle_change_wheels_by_left_right": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 만큼 바꾸기 %3",
        "turtle_clear_head_led": "머리 LED 끄기 %1",
        "turtle_clear_sound": "소리 끄기 %1",
        "turtle_cross_intersection": "검은색 교차로 건너가기 %1",
        "turtle_follow_line": "%1 선을 따라가기 %2",
        "turtle_follow_line_until": "검은색 선을 따라 %1 까지 이동하기 %2",
        "turtle_follow_line_until_black": "%1 선을 따라 검은색까지 이동하기 %2",
        "turtle_is_color_pattern": "색깔 패턴이 %1 %2 인가?",
        "turtle_move_backward_unit": "뒤로 %1 %2 이동하기 %3",
        "turtle_move_forward_unit": "앞으로 %1 %2 이동하기 %3",
        "turtle_pivot_around_wheel_unit_in_direction": "%1 바퀴 중심으로 %2 %3 %4 방향으로 돌기 %5",
        "turtle_play_note": "%1 %2 음을 연주하기 %3",
        "turtle_play_note_for_beats": "%1 %2 음을 %3 박자 연주하기 %4",
        "turtle_play_sound_times": "%1 소리 %2 번 재생하기 %3",
        "turtle_play_sound_times_until_done": "%1 소리 %2 번 재생하고 기다리기 %3",
        "turtle_rest_for_beats": "%1 박자 쉬기 %2",
        "turtle_set_buzzer_to": "버저 음을 %1 (으)로 정하기 %2",
        "turtle_set_following_speed_to": "선 따라가기 속도를 %1 (으)로 정하기 %2",
        "turtle_set_head_led_to": "머리 LED를 %1 으로 정하기 %2",
        "turtle_set_head_led_to_rgb": "머리 LED를 R: %1 G: %2 B: %3 (으)로 정하기 %4",
        "turtle_set_tempo_to": "연주 속도를 %1 BPM으로 정하기 %2",
        "turtle_set_wheel_to": "%1 바퀴 %2 (으)로 정하기 %3",
        "turtle_set_wheels_to_left_right": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 (으)로 정하기 %3",
        "turtle_stop": "정지하기 %1",
        "turtle_touching_color": "%1 에 닿았는가?",
        "turtle_turn_at_intersection": "검은색 교차로에서 %1 으로 돌기 %2",
        "turtle_turn_unit_in_place": "%1 으로 %2 %3 제자리 돌기 %4",
        "turtle_turn_unit_with_radius_in_direction": "%1 으로 %2 %3 반지름 %4 cm를 %5 방향으로 돌기 %6",
        "turtle_value": "%1",
        "turtle_boolean": "%1?",
        "turtle_pick_head_led": "머리 LED를 %1로 정하기 %2",
        "uglybot_led": "%1 LED %2 %3",
        "uglybot_buzzer": "%1 음을 %2초동안 소리내기 %3",
        "uglybot_motor": "%1모터를 %2세기로 회전 %3",
        "uglybot_move": "%1(으)로 %2cm 이동 %3",
        "uglybot_rotation": "%1방향으로 %2도 회전 %3",
        "uglybot_servo": "%1번 서보모터를 %2도 회전 %3",
        "uglybot_irpin": "%1 적외선 센서 %2 %3",
        "uglybot_button": "버튼 값",
        "uglybot_ir": "%1 적외선센서 값",
        "uglybot_ultrasonic": "초음파센서 값",
        "uglybot_joystick": "%1 조이스틱 값",
        "uglybot_tilt": "%1 기울기 값",
        "uglybot_sound": "소리센서 값",
        "uglybot_illum": "조도센서 값",
        "uglybot_left": "왼쪽",
        "uglybot_mid": "중간",
        "uglybot_right": "오른쪽",
        "uglybot_on": "켜기",
        "uglybot_off": "끄기",
        "uglybot_do": "도",
        "uglybot_re": "레",
        "uglybot_mi": "미",
        "uglybot_fa": "파",
        "uglybot_sol": "솔",
        "uglybot_ra": "라",
        "uglybot_si": "시",
        "uglybot_front": "앞",
        "uglybot_back": "뒤",
        "uglybot_cc": "시계",
        "uglybot_rcc": "반시계",
        "uglybot_topbottom": "앞뒤",
        "uglybot_leftright": "좌우",
        "uoalbert_value": "%1",
        "uoalbert_hand_found": "손 찾음?",
        "uoalbert_touch_state": "터치 센서를 %1 ?",
        "uoalbert_is_oid": "OID가 %1인가?",
        "uoalbert_boolean": "%1?",
        "uoalbert_move_forward_unit": "앞으로 %1 %2 이동하기 %3",
        "uoalbert_move_backward_unit": "뒤로 %1 %2 이동하기 %3",
        "uoalbert_turn_unit_in_place": "%1 으로 %2 %3 제자리 돌기 %4",
        "uoalbert_pivot_around_unit_in_direction": "%1 바퀴 중심으로 %2 %3 %4 방향으로 돌기 %5",
        "uoalbert_change_both_wheels_by": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 만큼 바꾸기 %3",
        "uoalbert_set_both_wheels_to": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 (으)로 정하기 %3",
        "uoalbert_change_wheel_by": "%1 바퀴 %2 만큼 바꾸기 %3",
        "uoalbert_set_wheel_to": "%1 바퀴 %2 (으)로 정하기 %3",
        "uoalbert_stop": "정지하기 %1",
        "uoalbert_set_board_size": "말판 크기를 폭 %1 높이 %2(으)로 정하기 %3",
        "uoalbert_set_eye_to": "%1 눈을 %2 으로 정하기 %3",
        "uoalbert_pick_eye": "%1 눈을 %2로 정하기 %3",
        "uoalbert_change_eye_by_rgb": "%1 눈을 R: %2 G: %3 B: %4 만큼 바꾸기 %5",
        "uoalbert_set_eye_to_rgb": "%1 눈을 R: %2 G: %3 B: %4 (으)로 정하기 %5",
        "uoalbert_clear_eye": "%1 눈 끄기 %2",
        "uoalbert_play_sound_times": "%1 소리 %2 번 재생하기 %3",
        "uoalbert_play_sound_times_until_done": "%1 소리 %2 번 재생하고 기다리기 %3",
        "uoalbert_change_buzzer_by": "버저 음을 %1 만큼 바꾸기 %2",
        "uoalbert_set_buzzer_to": "버저 음을 %1 (으)로 정하기 %2",
        "uoalbert_clear_sound": "소리 끄기 %1",
        "uoalbert_play_note": "%1 %2 음을 연주하기 %3",
        "uoalbert_play_note_for": "%1 %2 음을 %3 박자 연주하기 %4",
        "uoalbert_rest_for": "%1 박자 쉬기 %2",
        "uoalbert_change_tempo_by": "연주 속도를 %1 만큼 바꾸기 %2",
        "uoalbert_set_tempo_to": "연주 속도를 %1 BPM으로 정하기 %2",
        "xbot_digitalInput": "%1",
        "xbot_analogValue": "%1",
        "xbot_digitalOutput": "디지털 %1 핀, 출력 값 %2 %3",
        "xbot_analogOutput": "아날로그 %1 %2 %3",
        "xbot_servo": "서보 모터 %1 , 각도 %2 %3",
        "xbot_oneWheel": "바퀴(DC) 모터 %1 , 속도 %2 %3",
        "xbot_twoWheel": "바퀴(DC) 모터 오른쪽(2) 속도: %1 왼쪽(1) 속도: %2 %3",
        "xbot_rgb": "RGB LED 켜기 R 값 %1 G 값 %2 B 값 %3 %4",
        "xbot_rgb_picker": "RGB LED 색 %1 로 정하기 %2",
        "xbot_buzzer": "%1   %2 음을 %3 초 연주하기 %4",
        "xbot_lcd": "LCD %1 번째 줄 ,  출력 값 %2 %3",
        "zerone_is_gesture": "제스처가 %1 인가?",
        "zerone_touching_color": "%1 에 닿았는가?",
        "zerone_boolean": "배터리 %1?",
        "zerone_value": "%1",
        "zerone_start_sensor": "%1 센서 시작하기 %2",
        "zerone_move_forward_unit": "앞으로 %1 %2 이동하기 %3",
        "zerone_move_backward_unit": "뒤로 %1 %2 이동하기 %3",
        "zerone_turn_unit_in_place": "%1 으로 %2 %3 제자리 돌기 %4",
        "zerone_change_both_wheels_by": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 만큼 바꾸기 %3",
        "zerone_set_both_wheels_to": "왼쪽 바퀴 %1 오른쪽 바퀴 %2 (으)로 정하기 %3",
        "zerone_change_wheel_by": "%1 바퀴 %2 만큼 바꾸기 %3",
        "zerone_set_wheel_to": "%1 바퀴 %2 (으)로 정하기 %3",
        "zerone_stop": "정지하기 %1",
        "zerone_set_led_to": "%1 LED를 %2 으로 정하기 %3",
        "zerone_pick_led": "%1 LED를 %2로 정하기 %3",
        "zerone_change_led_by_rgb": "%1 LED를 R: %2 G: %3 B: %4 만큼 바꾸기 %5",
        "zerone_set_led_to_rgb": "%1 LED를 R: %2 G: %3 B: %4 (으)로 정하기 %5",
        "zerone_clear_led": "%1 LED 끄기 %2",
        "zerone_play_sound_times": "%1 소리 %2 번 재생하기 %3",
        "zerone_play_sound_times_until_done": "%1 소리 %2 번 재생하고 기다리기 %3",
        "zerone_change_buzzer_by": "버저 음을 %1 만큼 바꾸기 %2",
        "zerone_set_buzzer_to": "버저 음을 %1 (으)로 정하기 %2",
        "zerone_clear_sound": "소리 끄기 %1",
        "zerone_play_note": "%1 %2 음을 연주하기 %3",
        "zerone_play_note_for": "%1 %2 음을 %3 박자 연주하기 %4",
        "zerone_rest_for": "%1 박자 쉬기 %2",
        "zerone_change_tempo_by": "연주 속도를 %1 만큼 바꾸기 %2",
        "zerone_set_tempo_to": "연주 속도를 %1 BPM으로 정하기 %2"
    },
    "Buttons": {
        "apply": "적용하기",
        "cancel": "취소",
        "single_line": "한 줄 쓰기",
        "multi_line": "여러 줄 쓰기",
        "save": "확인",
        "show_only_vector": "벡터 모아보기",
        "add": "추가",
        "add2": "추가하기",
        "load": "불러오기",
        "move": "이동하기",
        "delete": "삭제",
        "course_done": "확인",
        "mission": "미션 확인하기",
        "basic_guide": "기본 사용 방법",
        "previous": "이전",
        "lecture_finish_popup_reset_lecture": "처음부터 다시하기",
        "lecture_finish_popup_show_output": "실습한 코드보기",
        "course_submit": "제출하기",
        "confirm": "확인",
        "list_save": "저장하기",
        "export_to_excel": "엑셀로 내려받기",
        "create_new_table": "테이블 새로 만들기",
        "add_variable": "변수 추가",
        "add_message": "신호 추가",
        "add_list": "리스트 추가",
        "duplication": "복사하기"
    },
    "Helper": {
        "function_create": "자주 쓰는 코드를 이 블록 아래에 조립하여 함수로 만듭니다. [함수 정의하기]의 오른쪽 빈칸에 [이름]을 조립하여 함수의 이름을 정할 수 있습니다. 함수를 실행하는 데 입력값이 필요한 경우 빈칸에 [문자/숫자값], [판단값]을 조립하여 매개변수로 사용합니다.",
        "Block_click_msg": "블록을 클릭하면<br>블록에 대한 설명이 나타납니다.",
        "when_run_button_click": "시작하기 버튼을 클릭하면 아래에 연결된 블록들을 실행합니다.",
        "when_some_key_pressed": "선택한 키를 누르면 아래에 연결된 블록들을 실행합니다.",
        "mouse_clicked": "마우스를 클릭했을 때 아래에 연결된 블록들을 실행합니다.",
        "mouse_click_cancled": "마우스 클릭을 해제했을 때 아래에 연결된 블록들을 실행합니다.",
        "when_object_click": "오브젝트를 클릭했을 때 아래에 연결된 블록들을 실행합니다.",
        "when_object_click_canceled": "오브젝트 클릭을 해제했을 때 아래에 연결된 블록들을 실행합니다.",
        "when_message_cast": "선택한 신호를 받으면 아래에 연결된 블록들을 실행합니다.",
        "message_cast": "선택한 신호를 보냅니다.",
        "message_cast_wait": "선택한 신호를 보내고, 해당 신호를 받는 블록들의 실행이 끝날 때 까지 기다립니다.",
        "when_scene_start": "장면이 시작되면 아래에 연결된 블록들을 실행합니다. ",
        "start_scene": "선택한 장면을 시작합니다.",
        "start_neighbor_scene": "이전 또는 다음 장면을 시작합니다.",
        "text": "해당 글상자가 표시하고 있는 문자값을 의미합니다.",
        "repeat_basic": "입력한 횟수만큼 감싸고 있는 블록들을 반복 실행합니다.",
        "move_direction": "입력한 값만큼 오브젝트의 이동 방향 화살표가 가리키는 방향으로 움직입니다.",
        "wait_second": "입력한 시간만큼 기다린 후 다음 블록을 실행합니다.",
        "repeat_inf": "감싸고 있는 블록들을 계속해서 반복 실행합니다.",
        "repeat_while_true": "판단값에 따라 블록의 반복여부를 결정합니다.\n이 될 때까지: 판단이 참이 될 때까지 감싸고 있는 블록들을 반복 실행합니다.\n인 동안: 판단이 참인 동안 감싸고 있는 블록들을 반복 실행합니다.",
        "stop_repeat": "이 블록을 감싸는 가장 가까운 반복 블록의 반복을 중단합니다.",
        "_if": "만일 판단이 참이라면, 감싸고 있는 블록들을 실행합니다.",
        "if_else": "만일 판단이 참이라면 첫 번째 감싸고 있는 블록들을 실행하고, 거짓이면 두 번째 감싸고 있는 블록들을 실행합니다.",
        "wait_until_true": "판단이 참이 될 때까지 실행을 멈추고 기다립니다.",
        "stop_object": "블록이 실행을 멈춥니다. 현재 실행중인 동작을 멈추는 블록이며, 프로그램을 종료하지 않습니다.\n모든 : 작품의 모든 블록이 실행을 멈춥니다. \n자신 : 해당 오브젝트의 모든 블록이 실행을 멈춥니다.\n이 코드 : 이 블록이 포함된 블록들이 실행을 멈춥니다.\n자신의 다른 코드 :  해당 오브젝트 중 이 블록이 포함된 블록들을 제외한 모든 블록이 실행을 멈춥니다.\n다른 오브젝트의 : 다른 오브젝트의 모든 블록이 실행을 멈춥니다.",
        "restart_project": "작품을 처음부터 다시 실행합니다.",
        "when_clone_start": "해당 오브젝트의 복제본이 새로 생성되었을 때 아래에 연결된 블록들을 실행합니다.",
        "create_clone": "선택한 오브젝트의 복제본을 생성합니다.",
        "delete_clone": "‘복제본이 처음 생성되었을 때’ 블록과 함께 사용되며, 연결된 블록들이 실행되고 있는 복제본을 삭제합니다.",
        "remove_all_clones": "해당 오브젝트의 모든 복제본을 삭제합니다.",
        "bounce_wall": "오브젝트가 실행화면 끝에 닿으면 튕겨 나옵니다.",
        "move_x": "오브젝트의 x 좌표를 입력한 값만큼 바꿉니다. ",
        "move_y": "오브젝트의 y 좌표를 입력한 값만큼 바꿉니다.",
        "move_xy_time": "오브젝트가 입력한 시간에 걸쳐 x와 y 좌표를 입력한 값만큼 바꿉니다.",
        "locate_x": "오브젝트가 입력한 x 좌표로 이동합니다. (오브젝트의 중심점이 기준이 됩니다.)",
        "locate_y": "오브젝트가 입력한 y 좌표로 이동합니다. (오브젝트의 중심점이 기준이 됩니다.)",
        "locate_xy": "오브젝트가 입력한 x와 y 좌표로 이동합니다. (오브젝트의 중심점이 기준이 됩니다.)",
        "locate_xy_time": "오브젝트가 입력한 시간에 걸쳐 입력한 x와 y 좌표로 이동합니다. (오브젝트의 중심점이 기준이 됩니다.)",
        "locate": "오브젝트가 선택한 오브젝트 또는 마우스 포인터의 위치로 이동합니다. (오브젝트의 중심점이 기준이 됩니다.)",
        "locate_object_time": "오브젝트가 입력한 시간에 걸쳐 선택한 오브젝트 또는 마우스 포인터의 위치로 이동합니다. (오브젝트의 중심점이 기준이 됩니다.)",
        "rotate_relative": "오브젝트의 방향이 입력한 각도만큼 시계방향으로 회전합니다. (오브젝트의 중심점을 기준으로 회전합니다.)",
        "direction_relative": "오브젝트의 이동 방향이 입력한 각도만큼 시계방향으로 회전합니다. (오브젝트의 중심점을 기준으로 회전합니다.)",
        "rotate_by_time": "오브젝트의 방향이 입력한 시간에 걸쳐 입력한 각도만큼 시계방향으로 회전합니다. (오브젝트의 중심점을 기준으로 회전합니다.)",
        "direction_relative_duration": "오브젝트의 이동 방향이 입력한 시간에 걸쳐 입력한 각도만큼 시계방향으로 회전합니다. (오브젝트의 중심점을 기준으로 회전합니다.)",
        "rotate_absolute": "오브젝트의 방향을 입력한 각도로 정합니다.",
        "direction_absolute": "오브젝트의 이동 방향을 입력한 각도로 정합니다.",
        "see_angle_object": "해당 오브젝트가 방향을 회전하여 선택한 오브젝트 또는 마우스 포인터 쪽을 바라봅니다. ",
        "move_to_angle": "오브젝트가 입력한 각도 방향으로 입력한 값만큼 움직입니다. (실행화면 위쪽이 0도를 나타내며, 시계방향으로 갈수록 각도가 증가합니다.)",
        "show": "오브젝트를 실행화면에 보이게 합니다.",
        "hide": "오브젝트를 실행화면에 보이지 않게 합니다.",
        "dialog_time": "오브젝트가 입력한 내용을 입력한 시간 동안 말풍선으로 말한 후 다음 블록을 실행합니다.",
        "dialog": "오브젝트가 입력한 내용을 말풍선으로 말하는 동시에 다음 블록을 실행합니다.",
        "remove_dialog": "오브젝트가 말하고 있는 말풍선을 지웁니다.",
        "change_to_some_shape": "오브젝트를 선택한 모양으로 바꿉니다. (내부 블록을 분리하고 모양의 번호를 입력하여 모양을 바꿀 수 있습니다.)",
        "change_to_next_shape": "오브젝트의 모양을 이전 또는 다음 모양으로 바꿉니다.",
        "add_effect_amount": "오브젝트에 선택한 효과를 입력한 값만큼 줍니다.",
        "change_effect_amount": "오브젝트의 효과를 입력한 값으로 정합니다.\n색깔 : 0~100을 주기로 반복됩니다.\n밝기 : -100~100 사이의 범위로 설정할 수 있습니다. (-100 이하는 -100으로 100 이상은 100으로 처리됩니다.)\n투명도 : 0~100 사이의 범위로 설정할 수 있습니다. (0 이하는 0으로, 100 이상은 100으로 처리됩니다.)",
        "erase_all_effects": "오브젝트에 적용된 효과를 모두 지웁니다.",
        "change_scale_size": "오브젝트의 크기를 입력한 값만큼 바꿉니다.",
        "set_scale_size": "오브젝트의 크기를 입력한 값으로 정합니다.",
        "flip_x": "오브젝트의 상하 모양을 뒤집습니다.",
        "flip_y": "오브젝트의 좌우 모양을 뒤집습니다.",
        "change_object_index": "오브젝트가 실행화면에 보이는 순서를 변경합니다.\n맨 앞으로 : 해당 오브젝트를 실행화면의 가장 앞쪽으로 가져옵니다. \n앞으로 : 해당 오브젝트를 한 층 앞쪽으로 가져옵니다.\n뒤로 : 해당 오브젝트를 한 층 뒤쪽으로 보냅니다. \n맨 뒤로 : 해당 오브젝트를 실행화면의 가장 뒤쪽으로 보냅니다.",
        "brush_stamp": "오브젝트의 모양을 도장처럼 실행화면 위에 찍습니다.",
        "start_drawing": "오브젝트가 이동하는 경로를 따라 선이 그리기 시작합니다. (오브젝트의 중심점이 기준이 됩니다.)",
        "stop_drawing": "오브젝트가 선 그리는 것을 멈춥니다.",
        "set_color": "오브젝트가 그리는 선의 색을 선택한 색으로 정합니다.",
        "set_random_color": "오브젝트가 그리는 선의 색을 무작위로 정합니다. ",
        "change_thickness": "오브젝트가 그리는 선의 굵기를 입력한 값만큼 바꿉니다.",
        "set_thickness": "오브젝트가 그리는 선의 굵기를 입력한 값으로 정합니다. 1~무한의 범위로 설정할 수 있습니다. (1 이하는 1로 처리합니다.)",
        "change_brush_transparency": "해당 오브젝트가 그리는 붓의 투명도를 입력한 값만큼 바꿉니다.",
        "set_brush_tranparency": "해당 오브젝트가 그리는 붓의 투명도를 입력한 값으로 정합니다. 0~100의 범위로 설정할 수 있습니다. (0 이하는 0, 100 이상은 100으로 처리합니다.)",
        "brush_erase_all": "해당 오브젝트가 그린 선과 도장을 모두 지웁니다.",
        "text_read": "선택한 글상자에 입력된 텍스트 값입니다. 내용에 줄바꿈이 포함되면 띄어쓰기로 반환합니다.",
        "text_write": "글상자의 내용을 입력한 값으로 고쳐 씁니다.",
        "text_append": "글상자의 내용 뒤에 입력한 값을 추가합니다.",
        "text_prepend": "글상자의 내용 앞에 입력한 값을 추가합니다.",
        "text_change_effect": "글상자에 선택한 텍스트 효과를 켜거나 끕니다.",
        "text_change_font": "글상자를 선택한 글씨체로 변경합니다. ",
        "text_change_font_color": "글상자를 선택한 글씨색으로 변경합니다.",
        "text_change_bg_color": "글상자를 선택한 배경색으로 변경합니다.",
        "text_flush": "글상자의 내용을 모두 지웁니다.",
        "sound_something_with_block": "해당 오브젝트가 선택한 소리를 재생하는 동시에 다음 블록을 실행합니다.",
        "sound_something_second_with_block": "해당 오브젝트가 선택한 소리를 입력한 시간 만큼 재생하는 동시에 다음 블록을 실행합니다.",
        "sound_from_to": "해당 오브젝트가 선택한 소리를 입력한 구간을 재생하는 동시에 다음 블록을 실행합니다.",
        "sound_something_wait_with_block": "해당 오브젝트가 선택한 소리를 재생한 후 다음 블록을 실행합니다.",
        "sound_something_second_wait_with_block": "해당 오브젝트가 선택한 소리를 입력한 시간 만큼 재생한 후 다음 블록을 실행합니다.",
        "sound_from_to_and_wait": "해당 오브젝트가 선택한 소리를 입력한 구간을 재생한 후 다음 블록을 실행합니다.",
        "sound_volume_change": "작품에서 재생되는 모든 소리의 크기를 입력한 값만큼 바꿉니다.",
        "sound_volume_set": "작품에서 재생되는 모든 소리의 크기를 입력한 값으로 정합니다.",
        "sound_silent_all": "재생 중인 모든 소리를 멈춥니다.",
        "is_clicked": "마우스를 클릭한 경우 ‘참’으로 판단합니다.",
        "is_press_some_key": "선택한 키가 눌려져 있는 경우 ‘참’으로 판단합니다.",
        "reach_something": "해당 오브젝트가 선택한 항목과 닿은 경우 ‘참’으로 판단합니다.",
        "boolean_basic_operator": "입력한 두 값을 비교합니다.\n= : 왼쪽에 위치한 값과 오른쪽에 위치한 값이 같은 경우 '참'으로 판단합니다.\n!= : 왼쪽에 위치한 값과 오른쪽에 위치한 값이 같지 않은 경우 '참'으로 판단합니다.\n> : 왼쪽에 위치한 값이 오른쪽에 위치한 값보다 큰 경우 같로 판단합니다.\n< : 왼쪽에 위치한 값이 오른쪽에 위치한 값보다 작은 경우 '참'으로 판단합니다.\n≥ : 왼쪽에 위치한 값이 오른쪽에 위치한 값보다 크거나 같은 경우 '참'으로 판단합니다.\n≤ : 왼쪽에 위치한 값이 오른쪽에 위치한 값보다 작거나 같은 경우 '참'으로 판단합니다.",
        "boolean_and_or": "그리고 : 두 판단이 모두 참인 경우 ‘참’으로 판단합니다.<br>또는 : 두 판단 중 하나라도 참이 있는 경우 ‘참’으로 판단합니다.",
        "boolean_not": "해당 판단이 참이면 거짓, 거짓이면 참으로 만듭니다.",
        "calc_basic": "입력한 두 수의 사칙연산 값입니다.\n+ : 입력한 두 수를 더한 값입니다.\n- : 입력한 두 수를 뺀 값입니다.\n* : 입력한 두 수를 곱한 값입니다.\n/ : 입력한 두 수를 나눈 값입니다.",
        "calc_rand": "입력한 두 수 사이에서 선택된 무작위 수 값입니다. (두 수 모두 정수를 입력한 경우 정수가, 두 수 중 하나라도 소수를 입력한 경우 소숫점 둘째 자리의 소수 값이 선택됩니다.)",
        "coordinate_mouse": "마우스 포인터의 x 또는 y 좌푯값입니다.",
        "coordinate_object": "선택한 오브젝트의 각종 정보 값입니다. (x 좌표, y 좌표, 방향, 이동방향, 크기, 모양번호, 모양이름)",
        "get_sound_volume": "작품에 설정된 소리의 크기 값입니다.",
        "quotient_and_mod": "입력된 두 수를 나눈 결괏값입니다.\n몫 : 앞의 수에서 뒤의 수를 나누어 생긴 몫의 값입니다. \n나머지 : 앞의 수에서 뒤의 수를 나누어 생긴 나머지 값입니다.",
        "calc_operation": "입력한 수에 대한 다양한 수학식의 계산값입니다. (제곱, 루트, 사인값, 코사인값, 탄젠트값, 아크사인값, 아크코사인값, 아크탄젠트값, 로그값, 자연로그값, 소수점 부분, 소수점 버림값, 소수점 올림값, 소수점 반올림값, 펙토리얼값, 절대값)",
        "get_project_timer_value": "이 블록이 실행되는 순간 초시계에 저장된 값입니다.",
        "choose_project_timer_action": "초시계의 상태를 결정합니다.\n시작하기: 초시계를 시작합니다. \n정지하기: 초시계를 정지합니다. \n초기화하기: 초시계의 값을 0으로 초기화합니다. ",
        "set_visible_project_timer": "초시계 창을 실행화면에서 숨기거나 보이게 합니다.",
        "get_date": "현재 연도, 월, 일, 시각과 같이 시간에 대한 값입니다.",
        "distance_something": "해당 오브젝트와 선택한 오브젝트 또는 마우스 포인터 간의 거릿값입니다.",
        "get_sound_duration": "선택한 소리의 길이(초) 값입니다.",
        "get_user_name": "작품을 실행하고 있는 사용자의 이름값입니다.",
        "length_of_string": "입력한 값의 공백을 포함한 글자 수입니다.",
        "combine_something": "입력한 두 값을 결합한 값입니다.",
        "char_at": "입력한 값에서 입력한 숫자 번째의 글자 값입니다. (공백을 포함합니다.)",
        "substring": "입력한 값에서 입력한 범위 내의 글자 값입니다. (공백을 포함합니다.)",
        "index_of_string": "입력한 값에서 지정한 값이 처음으로 등장하는 위치 값입니다. (공백을 포함합니다.)",
        "replace_string": "입력한 값에서 지정한 값을 찾아 추가로 입력한 값으로 모두 바꾼 값입니다. (영문 입력 시 대소문자를 구분합니다.)",
        "change_string_case": "입력한 영문의 모든 알파벳을 대문자 또는 소문자로 바꾼 값입니다.",
        "ask_and_wait": "오브젝트가 입력한 문자를 말풍선으로 묻고, 대답을 입력받습니다. (이 블록이 실행되면 실행화면에 ‘대답 창’이 생성됩니다.)",
        "get_canvas_input_value": "사용자가 '대답 창'에 입력한 값입니다.",
        "set_visible_answer": "대답 창'을 실행화면에서 숨기거나 보이게 합니다.",
        "get_variable": "선택한 변수에 저장된 값입니다.",
        "change_variable": "선택한 변수에 입력한 값을 더합니다.",
        "set_variable": "선택한 변수의 값을 입력한 값으로 정합니다.",
        "show_variable": "선택한 변수의 '변수 창'을 실행화면에 보이게 합니다.",
        "hide_variable": "선택한 변수의 '변수 창'을 실행화면에서 숨깁니다.",
        "value_of_index_from_list": "선택한 리스트에서 입력한 순서에 있는 항목 값입니다.",
        "add_value_to_list": "입력한 값을 선택한 리스트의 마지막 항목에 추가합니다.",
        "remove_value_from_list": "선택한 리스트의 입력한 순서에 있는 항목을 삭제합니다.",
        "insert_value_to_list": "입력한 값을 선택한 리스트의 입력한 순서의 항목으로 추가합니다. (입력한 항목 뒤에 있는 항목들은 순서가 하나씩 밀려납니다.)",
        "change_value_list_index": "선택한 리스트에서 입력한 순서에 있는 항목의 값을 입력한 값으로 바꿉니다.",
        "length_of_list": "선택한 리스트가 보유한 항목의 개수입니다.",
        "is_included_in_list": "선택한 리스트가 입력한 값을 가진 항목을 포함하는 경우 '참'으로 판단합니다.",
        "show_list": "선택한 리스트의 '리스트 창'을 실행화면에 보이게 합니다.",
        "hide_list": "선택한 리스트의 '리스트 창'을 실행화면에서 숨깁니다.",
        "append_row_to_table": "선택한 테이블의 마지막에 행(열)을 추가합니다. 추가된 행(열)의 모든 셀 값은 0입니다.",
        "insert_row_to_table": "선택한 테이블의 입력한 순서에 행(열)을 추가합니다. 추가된 행(열)의 모든 셀 값은 0입니다. 추가된 행(열) 뒤에 있는 행(열)들은 순서가 하나씩 밀립니다.",
        "delete_row_from_table": "선택한 테이블의 입력한 순서에 있는 행(열)을 삭제합니다.",
        "set_value_from_table": "선택한 테이블에서 입력한 행의 속성을 입력한 값으로 바꿉니다.",
        "get_table_count": "선택한 테이블의 행(열) 개수입니다.",
        "get_value_from_table": "선택한 테이블에서 입력한 행의 속성 값입니다. 속성 값 블록 대신 (행을 의미하는) 값 블록을 결합해 사용할 수도 있습니다.",
        "get_value_from_last_row": "선택한 테이블에서 마지막 행의 선택한 속성 값입니다. 속성 값 블록 대신 (행을 의미하는) 값 블록을 결합해 사용할 수도 있습니다.",
        "calc_values_from_table": "선택한 테이블에서 선택한 속성들에 대한 요약통계량입니다. (합, 최댓값, 최솟값, 평균값, 표준편차)",
        "open_table_chart": "선택한 테이블의 차트창을 엽니다.",
        "close_table_chart": "열려있는 테이블 차트 창을 닫습니다.",
        "insert_data_for_test": "데이터를 입력하고 학습한 모델로 인식합니다.",
        "insert_text_block_for_test": "데이터를 입력하고 학습한 모델로 인식합니다.",
        "test_result": "입력한 데이터를 모델에서 인식한 결과 값입니다. 값은 모델의 클래스 이름(텍스트)으로 표현됩니다.",
        "accuracy_of_result": "입력한 데이터의 선택한 클래스에 대한 신뢰도 값입니다. 값은 확률(숫자)로 표현됩니다.",
        "is_group": "입력한 데이터의 인식 결과가 선택한 클래스인 경우 '참'으로 판단합니다.",
        "model_is_trained": "모델이 학습되었다면 '참'을, 학습 중이거나 학습되지 않았다면 '거짓'으로 판단합니다.",
        "set_train_visible": "모델의 상태를 표시하는 창을 실행 화면에 보이게 하거나 숨깁니다.",
        "set_train_chart": "입력한 데이터와 학습한 모델의 군집을 2차원 좌표평면에 나타낸 차트 창을 열거나 닫습니다. ",
        "set_regression_option": "모델의 학습 조건을 변경합니다. 변경한 학습 조건은 '모델 다시 학습하기' 블록으로 모델을 다시 학습할 때부터 적용됩니다.",
        "get_regression_predict_1": "입력한 핵심 속성으로 모델이 예측한 값을 반환합니다.",
        "get_regression_predict_2": "입력한 핵심 속성으로 모델이 예측한 값을 반환합니다.",
        "get_regression_predict_3": "입력한 핵심 속성으로 모델이 예측한 값을 반환합니다.",
        "get_regression_accuracy": "모델의 결정계수를 값으로 반환합니다.",
        "set_cluster_option_k": "군집의 개수를 입력한 값으로 바꾸어 설정합니다. 변경한 군집 개수는 '모델 다시 학습하기' 블록으로 모델을 다시 학습할 때부터 적용됩니다.",
        "set_cluster_option_centroids": "군집의 최초 중심점 기준을 선택한 기준으로 바꿉니다. 변경한 중심점 기준은 '모델 다시 학습하기' 블록으로 모델을 다시 학습할 때부터 적용됩니다.",
        "get_cluster_centriod_count": "모델의 군집 개수를 값으로 반환합니다. ",
        "get_cluster_centriod_value": "지정한 군집의 중심점에 대한 핵심 속성을 반환합니다. 핵심 속성이 여러 개인 경우, 목록 상자에서 핵심 속성을 선택할 수 있습니다.",
        "get_cluster_centriod_index_1": "입력한 핵심 속성이 모델이 묶은 군집 중에 어느 군집에 속하는지를 반환합니다. 값은 텍스트(군집 이름)로 표현됩니다.",
        "get_cluster_centriod_index_2": "입력한 핵심 속성이 모델이 묶은 군집 중에 어느 군집에 속하는지를 반환합니다. 값은 텍스트(군집 이름)로 표현됩니다.",
        "get_cluster_centriod_index_3": "입력한 핵심 속성이 모델이 묶은 군집 중에 어느 군집에 속하는지를 반환합니다. 값은 텍스트(군집 이름)로 표현됩니다.",
        "set_number_learning_option_k": "이웃 개수를 입력한 값으로 바꾸어 설정합니다. 변경한 이웃 개수는 '모델 다시 학습하기' 블록으로 모델을 다시 학습할 때부터 적용됩니다.",
        "get_number_learning_predict_1": "입력한 데이터를 모델에서 분류한 값입니다. 값은 모델의 클래스 이름(텍스트)으로 표현됩니다.",
        "get_number_learning_predict_2": "입력한 데이터를 모델에서 분류한 값입니다. 값은 모델의 클래스 이름(텍스트)으로 표현됩니다.",
        "get_number_learning_predict_3": "입력한 데이터를 모델에서 분류한 값입니다. 값은 모델의 클래스 이름(텍스트)으로 표현됩니다.",
        "get_number_learning_predict_param_1": "입력한 데이터의 선택한 클래스에 대한 분류 신뢰도 값입니다. 값은 숫자로 표현됩니다.",
        "get_number_learning_predict_param_2": "입력한 데이터의 선택한 클래스에 대한 분류 신뢰도 값입니다. 값은 숫자로 표현됩니다.",
        "get_number_learning_predict_param_3": "입력한 데이터의 선택한 클래스에 대한 분류 신뢰도 값입니다. 값은 숫자로 표현됩니다.",
        "is_number_learning_group_1": "입력한 데이터의 분류 결과가 선택한 클래스인 경우 '참'으로 판단합니다.",
        "is_number_learning_group_2": "입력한 데이터의 분류 결과가 선택한 클래스인 경우 '참'으로 판단합니다.",
        "is_number_learning_group_3": "입력한 데이터의 분류 결과가 선택한 클래스인 경우 '참'으로 판단합니다.",
        "check_microphone": "컴퓨터에 마이크가 연결되어 있는 경우 '참'으로 판단합니다. (IE/Safari 브라우저 지원하지 않음)",
        "speech_to_text_convert": "마이크에 입력되는 사람의 목소리를 텍스트로 변환합니다. (IE/Safari 브라우저 지원하지 않음)",
        "speech_to_text_get_value": "사람의 목소리를 문자로 바꾼 값입니다. 목소리가 입력되지 않거나, 음성인식 도중 오류가 발생한 경우 무조건 0 값을 갖습니다. (IE/Safari 브라우저 지원하지 않음)",
        "get_microphone_volume": "마이크에 입력되는 소리의 크기 값입니다. (IE/Safari 브라우저 지원하지 않음)",
        "read_text": "입력한 문자값을 설정된 목소리로 읽습니다.<br>입력은 2500자까지 가능합니다.<br>인터넷에 연결되어 있지 않거나 인터넷 환경이 불안할 경우, 해당 블록이 실행되지 않고 다음 블록으로 넘어갈 수 있습니다.",
        "read_text_wait_with_block": "입력한 문자값을 읽어준 후 다음 블록을 실행합니다.",
        "set_tts_property": "선택한 목소리가 선택한 속도와 선택한 음높이로 설정됩니다.",
        "get_translated_string": "입력한 문자값을 선택한 언어로 번역합니다. 입력은 3000자까지 가능합니다.\n*번역 가능한 언어 \n - 한국어 → 영어, 중국어 간체, 중국어 번체, 베트남어, 스페인어, 인도네시아어, 태국어, 프랑스어\n - 영어 → 일본어, 프랑스어, 한국어\n - 중국어 간체, 중국어 번체, 베트남어, 스페인어, 인도네시아어, 태국어, 프랑스어 → 한국어\n - 일본어 →영어 \n - 프랑스어 → 영어",
        "check_language": "입력된 문자값의 언어를 감지합니다. 입력은 문장 형태로 3000자까지 가능합니다.",
        "video_draw_webcam": "컴퓨터에 연결된 카메라에 촬영되는 화면을 실행화면에서 보이게하거나 숨깁니다.(IE 및 iOS 미지원)",
        "video_check_webcam": "컴퓨터에 카메라가 연결되어 있는 경우 '참'으로 판단합니다. (IE 및 iOS 미지원)",
        "video_change_cam": "촬영하는 카메라를 변경합니다.",
        "video_flip_camera": "촬영되는 화면을 좌우 혹은 상하로 뒤집습니다. (IE 및 iOS 미지원)",
        "video_set_camera_opacity_option": "촬영되는 화면의 투명도 효과를 입력한 값으로 정합니다. 0~100 사이의 범위로 설정할 수 있습니다. (0 이하는 0으로 100 이상은 100으로 처리됩니다.) (IE 및 iOS 미지원)",
        "video_motion_value": "선택한 오브젝트 혹은 실행화면 위에서 감지되는 움직임 혹은 방향 값입니다. (움직임: 움직임이 크고 빠를 수록 값이 커집니다. 방향: 오른쪽 혹은 위쪽으로 움직일 때 양수, 왼쪽 혹은 아래쪽으로 움직일 때 음수가 됩니다.) (IE 및 iOS 미지원)",
        "video_toggle_model": "선택한 인식 모델을 동작시키거나 중지시킵니다. (사람 인식: 사람의 몸을 인식하여 각 신체부위의 위치 등을 알 수 있습니다. 얼굴 인식: 사람의 얼굴을 인식하여 눈, 코, 입, 귀의 위치나 예상되는 성별, 나이, 감정을 알 수 있습니다. 사물 인식: 인식된 사물의 종류를 알 수 있습니다) (IE 및 iOS 미지원)",
        "video_is_model_loaded": "사람/얼굴/사물 인식이 된 경우 '참'으로 판단합니다. (IE 및 iOS 미지원)",
        "video_object_detected": "선택한 사물이 인식된 경우 '참'으로 판단합니다. (IE 및 iOS 미지원)",
        "video_number_detect": "인식된 사람/얼굴/사물의 개수입니다. (인식 가능 객체: 사람, 자전거, 자동차, 오토바이, 비행기, 버스, 기차, 트럭, 보트,교통 신호등, 소화전, 정지 신호, 주차 미터, 벤치, 새, 고양이, 개, 말, 양, 암소, 코끼리, 곰, 얼룩말, 기린, 책가방, 우산, 핸드백, 넥타이, 가방, 프리스비, 스키, 스노보드, 스포츠 볼, 연, 야구 방망이, 야구 글러브, 스케이트 보드, 서핑 보드, 테니스 라켓, 병, 와인 글라스, 컵, 포크, 나이프, 숟가락, 그릇, 바나나, 애플, 샌드위치, 주황색, 브로콜리, 당근, 핫도그, 피자, 도넛, 케이크, 의자, 소파, 화분, 침대, 식사테이블, 화장실, TV 모니터, 노트북, 마우스, 원격, 키보드, 휴대 전화, 전자 레인지, 오븐, 토스터기, 싱크대, 냉장고, 도서, 시계, 꽃병, 가위, 테디베어, 헤어드라이어, 칫솔) (IE 및 iOS 미지원)",
        "video_toggle_ind": "인식된 사람/얼굴/사물의 위치와 순서를 실행화면에 보이게 하거나 숨깁니다. (IE 및 iOS 미지원)",
        "video_body_part_coord": "입력한 순서의 사람의 선택한 신체 부위의 위치값입니다. (얼굴, 목, 왼쪽 어깨, 왼쪽 팔꿈치, 왼쪽 손목, 왼쪽 엉덩이, 왼쪽 무릎, 왼쪽 발목, 오른쪽 어깨, 오른쪽 팔꿈치, 오른쪽 손목, 오른쪽 엉덩이, 오른쪽 무릎, 오른쪽 발목) (IE 및 iOS 미지원)",
        "video_face_part_coord": "입력한 순서의 얼굴 중 선택된 얼굴 부위의 위치값입니다. 인식이 잘 되지 않는 경우 무조건 0으로 출력됩니다. (왼쪽 눈, 오른쪽 눈, 코, 왼쪽 입꼬리, 오른쪽 입꼬리, 윗 입술, 아랫 입술) (IE 및 iOS 미지원)",
        "video_detected_face_info": "입력한 순서의 얼굴의 성별/나이/감정의 추정값입니다. 인식이 잘 되지 않는 경우 무조건 0으로 출력됩니다. (IE 및 iOS 미지원)",
        "check_weather": "<br>선택한 날짜와 지역의 날씨 정보를 실제 날씨 상태와 비교하여 일치하는 경우 ‘참’으로 판단합니다.<br> * 옵션<br> 날짜: 어제, 오늘, 내일, 모레, 3일 후, 4일 후, 5일 후, 6일 후<br> 지역: 서울, 강원, 경기, 경남, 경북, 광주, 대구, 대전, 부산, 세종, 울산, 인천, 전남, 전북, 제주, 충남, 충북<br> 날씨: 맑음, 구름조금, 구름많음, 흐림, 비, 진눈깨비, 눈",
        "check_finedust": "<br>선택한 지역의 현재 미세먼지 정보를 실제 미세먼지 등급과 비교하여 일치하는 경우 ‘참’으로 판단합니다.<br> * 옵션<br> 지역: 서울, 강원, 경기, 경남, 경북, 광주, 대구, 대전, 부산, 세종, 울산, 인천, 전남, 전북, 제주, 충남, 충북<br> 미세먼지 등급: 좋음, 보통, 나쁨, 매우나쁨",
        "get_weather_data": "<br>선택한 날짜와 지역의 각종 날씨 정보값(최저기온, 최고기온, 습도, 강수량, 강수확률, 풍속)입니다.<br> * 옵션<br> 날짜: 어제, 오늘, 내일, 모레, 3일 후, 4일 후, 5일 후, 6일 후<br> 지역: 서울, 강원, 경기, 경남, 경북, 광주, 대구, 대전, 부산, 세종, 울산, 인천, 전남, 전북, 제주, 충남, 충북<br> 정보: 최저기온(℃), 최고기온(℃), 습도(%), 강수량(mm), 강수확률(%), 풍속(m/s)",
        "get_current_weather_data": "<br>현재 선택한 지역의 날씨 정보값(기온, 미세먼지농도)입니다.<br> * 옵션<br> 지역: 서울, 강원, 경기, 경남, 경북, 광주, 대구, 대전, 부산, 세종, 울산, 인천, 전남, 전북, 제주, 충남, 충북<br> 정보: (기온(℃)), 미세먼지농도(㎍)",
        "get_today_temperature": "<br>오늘 선택한 지역과 시간대의 기온을 의미합니다.<br> * 옵션<br> 지역: 서울, 강원, 경기, 경남, 경북, 광주, 대구, 대전, 부산, 세종, 울산, 인천, 전남, 전북, 제주, 충남, 충북<br> 시간대: 00, 03, 06, 09, 12, 15, 18, 21",
        "check_city_weather": "선택한 날짜와 지역의 날씨 정보를 실제 날씨 상태와 비교하여 일치하는 경우 ‘참’으로 판단합니다.\n* 옵션\n날짜: 어제, 오늘, 내일, 모레, 3일 후, 4일 후, 5일 후, 6일 후\n시도: 서울, 강원, 경기, 경남, 경북 광주, 대구, 대전, 부산, 세종, 울산, 인천, 전남, 전북, 제주, 충남, 충북 \n시군구: 시도별로 다름\n날씨: 맑음, 구름조금, 구름많음, 흐림, 비, 진눈깨비, 눈",
        "check_city_finedust": "선택한 지역의 현재 미세먼지 정보를 실제 미세먼지 등급과 비교하여 일치하는 경우 ‘참’으로 판단합니다.\n* 옵션\n시도: 서울, 강원, 경기, 경남, 경북,광주, 대구, 대전, 부산, 세종, 울산, 인천, 전남, 전북, 제주, 충남, 충북 \n시군구: 시도별로 다름\n미세먼지 등급: 좋음, 보통, 나쁨, 매우나쁨",
        "get_city_weather_data": "선택한 날짜와 지역의 각종 날씨 정보입니다.\n *옵션\n날짜: 어제, 오늘, 내일, 모레, 3일 후, 4일 후, 5일 후, 6일 후\n시도:서울, 강원, 경기, 경남, 경북, 광주, 대구, 대전, 부산, 세종, 울산, 인천, 전남, 전북, 제주, 충남, 충북 \n시군구: 시도별로 다름\n정보: 최저기온(℃), 최고기온(℃), 습도(%), 강수량(mm), 강수확률(%), 풍속(m/s)",
        "get_current_city_weather_data": "현재 선택한 지역의 날씨 정보입니다.\n*옵션\n시도: 서울, 강원, 경기, 경남, 경북, 광주, 대구, 대전, 부산, 세종, 울산, 인천, 전남, 전북, 제주, 충남, 충북 \n시군구: 시도별로 다름\n정보: 기온(℃), 미세먼지농도(㎍)",
        "get_today_city_temperature": "오늘 선택한 지역과 시간대의 기온입니다.\n*옵션\n시도: 서울, 강원, 경기, 경남, 경북 광주, 대구, 대전, 부산, 세종, 울산, 인천, 전남, 전북, 제주, 충남, 충북 \n시군구: 시도별로 다름\n시간대: 00, 03, 06, 09, 12, 15, 18, 21",
        "count_festival": "선택한 날짜와 지역에서 열리는 행사의 수입니다.\n* 옵션 \n지역: 서울, 강원, 경기, 경남, 경북 광주, 대구, 대전, 부산, 세종, 울산, 인천, 전남, 전북, 제주, 충남, 충북 \n행사일: 1~12월",
        "get_festival_info": "선택한 날짜와 지역에서 열리는 행사에 대한 정보입니다.\n* 옵션 \n지역: 서울, 강원, 경기, 경남, 경북 광주, 대구, 대전, 부산, 세종, 울산, 인천, 전남, 전북, 제주, 충남, 충북 \n행사일: 1~12월 \n정보: 제목, 지역, 시작일, 종료일, 주소, 개요, 홈페이지",
        "count_disaster_behavior": "선택한 자연재해가 발생했을 때 해야할 행동요령의 수입니다.<br> *옵션<br> 자연재해: 태풍, 홍수, 호우, 강풍, 대설, 한파, 풍랑, 황사, 폭염, 가뭄, 지진, 해일, 산사태<br> 상황: 자연재해에 따라 다름 ",
        "get_disaster_behavior": "선택한 자연재해가 발생했을 때 해야하는 행동요령에 대한 정보입니다.<br> *옵션<br> 자연재해: 태풍, 홍수, 호우, 강풍, 대설, 한파, 풍랑, 황사, 폭염, 가뭄, 지진, 해일, 산사태<br> 상황: 자연재해에 따라 다름",
        "count_lifeSafety_behavior": "선택한 생활 속 문제가 발생했을 때 해야할 행동요령의 수입니다.<br> *옵션<br> 생활 속 문제: 응급처치, 심폐소생술, 소화기·소화전 사용법, 식중독, 산행안전, 실종유괴, 성폭력, 학교폭력, 가정 폭력, 억류 및 납치, 교통사고, 승강기 안전사고, 미세먼지<br> 상황: 생활 속 문제에 따라 다름 ",
        "get_lifeSafety_behavior": "선택한 생활 속 문제가 발생했을 때 해야할 행동요령에 대한 정보입니다.<br> *옵션<br> 생활 속 문제: 응급처치, 심폐소생술, 소화기·소화전 사용법, 식중독, 산행안전, 실종유괴, 성폭력, 학교폭력, 가정 폭력, 억류 및 납치, 교통사고, 승강기 안전사고, 미세먼지<br> 상황: 생활 속 문제에 따라 다름 ",
        "function_general": "현재 만들고 있는 함수 블록 또는 지금까지 만들어 둔 함수 블록입니다.",
        "boolean_and": "두 판단이 모두 참인 경우 ‘참’으로 판단합니다.",
        "boolean_or": "두 판단 중 하나라도 참이 있는 경우 ‘참’으로 판단합니다.",
        "function_field_label": "함수 정의하기' 블록 안에 조립하며, 함수의 이름을 정합니다. ",
        "function_field_string": "함수 정의하기' 블록 안에 조립하며, 입력한 문자/숫자값(매개변수)에 따라 함수의 실행 결과가 달라집니다. 이 블록을 분리하여 함수의 코드 중 필요한 부분에 넣어 사용합니다.",
        "function_field_boolean": "함수 정의하기' 블록 안에 조립하며, 참 또는 거짓의 판단값에 따라 함수의 실행 결과가 달라집니다. 이 블록을 분리하여 함수의 코드 중 필요한 부분에 넣어 사용합니다.",
        "target_project": "목표 작품 확인하기",
        "study_goal": "학습 목표 확인하기",
        "show_hint": "힌트보기",
        "albert_value": "왼쪽 근접 센서: 왼쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>오른쪽 근접 센서: 오른쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>x축 가속도: 가속도 센서의 X축 값 (값의 범위: -8192 ~ 8191, 초기값: 0) 로봇이 전진하는 방향이 X축의 양수 방향입니다.<br/>y축 가속도: 가속도 센서의 Y축 값 (값의 범위: -8192 ~ 8191, 초기값: 0) 로봇의 왼쪽 방향이 Y축의 양수 방향입니다.<br/>z축 가속도: 가속도 센서의 Z축 값 (값의 범위: -8192 ~ 8191, 초기값: 0) 로봇의 위쪽 방향이 Z축의 양수 방향입니다.<br/>앞쪽 OID: 앞쪽 OID 센서의 값 (값의 범위: -1 ~ 65535, 초기값: -1)<br/>뒤쪽 OID: 뒤쪽 OID 센서의 값 (값의 범위: -1 ~ 65535, 초기값: -1)<br/>x 위치: 말판 위에서 로봇의 위치 x좌표 값 (값의 범위: -1 ~ 39999, 초기값: -1)<br/>y 위치: 말판 위에서 로봇의 위치 y좌표 값 (값의 범위: -1 ~ 39999, 초기값: -1)<br/>방향: 말판 위에서 로봇의 방향 값 (값의 범위: -179 ~ 180, 초기값: -200)<br/>밝기: 밝기 센서의 값 (값의 범위: 0 ~ 65535, 초기값: 0) 밝을 수록 값이 커집니다.<br/>온도: 로봇 내부의 온도 값 (값의 범위: 섭씨 -40 ~ 88도, 초기값: 0)<br/>신호 세기: 블루투스 무선 통신의 신호 세기 (값의 범위: -128 ~ 0 dBm, 초기값: 0) 신호의 세기가 셀수록 값이 커집니다.",
        "albert_hand_found": "근접 센서 앞에 손 또는 물체가 있으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "albert_is_oid_value": "앞쪽/뒤쪽 OID 센서가 감지한 OID 값이 입력한 숫자와 같으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "albert_boolean": "앞으로 기울임: 앞으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>뒤로 기울임: 뒤로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>왼쪽으로 기울임: 왼쪽으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>오른쪽으로 기울임: 오른쪽으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>거꾸로 뒤집음: 거꾸로 뒤집었으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>기울이지 않음: 기울이지 않았으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 정상: 배터리 잔량이 충분하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 부족: 배터리 잔량이 부족하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 없음: 배터리 잔량이 없으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "albert_move_forward_for_secs": "입력한 시간(초)만큼 앞으로 이동합니다.",
        "albert_move_backward_for_secs": "입력한 시간(초)만큼 뒤로 이동합니다.",
        "albert_turn_for_secs": "입력한 시간(초)만큼 왼쪽/오른쪽 방향으로 제자리에서 회전합니다.",
        "albert_change_both_wheels_by": "왼쪽과 오른쪽 바퀴의 현재 속도 값(%)에 입력한 값을 각각 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "albert_set_both_wheels_to": "왼쪽과 오른쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 각각 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "albert_change_wheel_by": "왼쪽/오른쪽/양쪽 바퀴의 현재 속도 값(%)에 입력한 값을 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "albert_set_wheel_to": "왼쪽/오른쪽/양쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "albert_stop": "양쪽 바퀴를 정지합니다.",
        "albert_set_pad_size_to": "말판의 폭과 높이를 입력한 값으로 설정합니다.",
        "albert_move_to_x_y_on_board": "밑판 위에서 입력한 x, y 위치로 이동합니다.",
        "albert_set_orientation_on_board": "말판 위에서 입력한 각도 방향으로 회전합니다.",
        "albert_set_eye_to": "왼쪽/오른쪽/양쪽 눈을 선택한 색깔로 켭니다.",
        "albert_clear_eye": "왼쪽/오른쪽/양쪽 눈을 끕니다.",
        "albert_body_led": "몸통 LED를 켜거나 끕니다.",
        "albert_front_led": "앞쪽 LED를 켜거나 끕니다.",
        "albert_beep": "버저 소리를 짧게 냅니다.",
        "albert_change_buzzer_by": "버저 소리의 현재 음 높이(Hz)에 입력한 값을 더합니다. 소수점 둘째 자리까지 입력할 수 있습니다.",
        "albert_set_buzzer_to": "버저 소리의 음 높이를 입력한 값(Hz)으로 설정합니다. 소수점 둘째 자리까지 입력할 수 있습니다. 숫자 0을 입력하면 버저 소리를 끕니다.",
        "albert_clear_buzzer": "버저 소리를 끕니다.",
        "albert_play_note": "선택한 계이름과 옥타브의 음을 계속 소리 냅니다.",
        "albert_play_note_for": "선택한 계이름과 옥타브의 음을 입력한 박자만큼 소리 냅니다.",
        "albert_rest_for": "입력한 박자만큼 쉽니다.",
        "albert_change_tempo_by": "연주하거나 쉬는 속도의 현재 BPM(분당 박자 수)에 입력한 값을 더합니다.",
        "albert_set_tempo_to": "연주하거나 쉬는 속도를 입력한 BPM(분당 박자 수)으로 설정합니다.",
        "albertai_value": "왼쪽 근접 센서: 왼쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>오른쪽 근접 센서: 오른쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>x축 가속도: 가속도 센서의 X축 값 (값의 범위: -8192 ~ 8191, 초기값: 0) 로봇이 전진하는 방향이 X축의 양수 방향입니다.<br/>y축 가속도: 가속도 센서의 Y축 값 (값의 범위: -8192 ~ 8191, 초기값: 0) 로봇의 왼쪽 방향이 Y축의 양수 방향입니다.<br/>z축 가속도: 가속도 센서의 Z축 값 (값의 범위: -8192 ~ 8191, 초기값: 0) 로봇의 위쪽 방향이 Z축의 양수 방향입니다.<br/>마이크 터치: 마이크 터치 센서의 값 (터치하면 1, 아니면 0, 초기값: 0)<br/>소리 크게 터치: 소리 크게 터치 센서의 값 (터치하면 1, 아니면 0, 초기값: 0)<br/>소리 작게 터치: 소리 작게 터치 센서의 값 (터치하면 1, 아니면 0, 초기값: 0)<br/>실행 터치: 실행 터치 센서의 값 (터치하면 1, 아니면 0, 초기값: 0)<br/>뒤로 터치: 뒤로 터치 센서의 값 (터치하면 1, 아니면 0, 초기값: 0)<br/>OID 모드: OID 모드의 값 (0: 멀리 떨어짐, 1: 위치 모드, 2: OID 버전 2, 3: OID 버전 3, 15: OID 아님, 초기값: 0)<br/>OID: OID 센서의 값 (값의 범위: -1 ~ 268435455, 초기값: -1)<br/>들어올림: 들어올림 센서의 값 (들어올리면 1, 아니면 0, 초기값: 0)<br/>x 위치: 말판 위에서 로봇의 위치 x좌표 값 (값의 범위: -1 ~ 268435454, 초기값: -1)<br/>y 위치: 말판 위에서 로봇의 위치 y좌표 값 (값의 범위: -1 ~ 268435454, 초기값: -1)<br/>방향: 말판 위에서 로봇의 방향 값 (값의 범위: -179 ~ 180, 초기값: -200)<br/>밝기: 밝기 센서의 값 (값의 범위: 0 ~ 65535, 초기값: 0) 밝을 수록 값이 커집니다.<br/>신호 세기: 블루투스 무선 통신의 신호 세기 (값의 범위: -128 ~ 0 dBm, 초기값: 0) 신호의 세기가 셀수록 값이 커집니다.",
        "albertai_hand_found": "근접 센서 앞에 손 또는 물체가 있으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "albertai_touch_state": "터치 센서를 클릭했으면/길게 눌렀으면/아주 길게 눌렀으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "albertai_is_oid": "OID 센서가 감지한 OID 값이 입력한 숫자와 같으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "albertai_boolean": "앞으로 기울임: 앞으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>뒤로 기울임: 뒤로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>왼쪽으로 기울임: 왼쪽으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>오른쪽으로 기울임: 오른쪽으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>거꾸로 뒤집음: 거꾸로 뒤집었으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>기울이지 않음: 기울이지 않았으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>두드림: 두드렸으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>들어올림: 들어올렸으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 정상: 배터리 잔량이 충분하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 부족: 배터리 잔량이 부족하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 없음: 배터리 잔량이 없으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "albertai_move_forward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 앞으로 이동합니다.",
        "albertai_move_backward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 뒤로 이동합니다.",
        "albertai_turn_unit_in_place": "입력한 각도(도)/시간(초)/펄스만큼 왼쪽/오른쪽 방향으로 제자리에서 회전합니다.",
        "albertai_pivot_around_unit_in_direction": "왼쪽/오른쪽 바퀴 중심으로 입력한 각도(도)/시간(초)/펄스만큼 앞쪽/뒤쪽 방향으로 회전합니다.",
        "albertai_change_both_wheels_by": "왼쪽과 오른쪽 바퀴의 현재 속도 값(%)에 입력한 값을 각각 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "albertai_set_both_wheels_to": "왼쪽과 오른쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 각각 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "albertai_change_wheel_by": "왼쪽/오른쪽/양쪽 바퀴의 현재 속도 값(%)에 입력한 값을 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "albertai_set_wheel_to": "왼쪽/오른쪽/양쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "albertai_stop": "양쪽 바퀴를 정지합니다.",
        "albertai_move_to_x_y_on_board": "밑판 위에서 입력한 x, y 위치로 이동합니다.",
        "albertai_set_orientation_on_board": "말판 위에서 입력한 각도 방향으로 회전합니다.",
        "albertai_set_eye_to": "왼쪽/오른쪽/양쪽 눈을 선택한 색깔로 켭니다.",
        "albertai_pick_eye": "왼쪽/오른쪽/양쪽 눈을 선택한 색깔로 켭니다.",
        "albertai_change_eye_by_rgb": "왼쪽/오른쪽/양쪽 눈의 현재 R, G, B 값에 입력한 값을 각각 더합니다.",
        "albertai_set_eye_to_rgb": "왼쪽/오른쪽/양쪽 눈의 R, G, B 값을 입력한 값으로 각각 설정합니다.",
        "albertai_clear_eye": "왼쪽/오른쪽/양쪽 눈을 끕니다.",
        "albertai_play_sound_times": "선택한 소리를 입력한 횟수만큼 재생합니다.",
        "albertai_play_sound_times_until_done": "선택한 소리를 입력한 횟수만큼 재생하고, 재생이 완료될 때까지 기다립니다.",
        "albertai_change_buzzer_by": "버저 소리의 현재 음 높이(Hz)에 입력한 값을 더합니다. 소수점 둘째 자리까지 입력할 수 있습니다.",
        "albertai_set_buzzer_to": "버저 소리의 음 높이를 입력한 값(Hz)으로 설정합니다. 소수점 둘째 자리까지 입력할 수 있습니다. 숫자 0을 입력하면 버저 소리를 끕니다.",
        "albertai_clear_sound": "소리를 끕니다.",
        "albertai_play_note": "선택한 계이름과 옥타브의 음을 계속 소리 냅니다.",
        "albertai_play_note_for": "선택한 계이름과 옥타브의 음을 입력한 박자만큼 소리 냅니다.",
        "albertai_rest_for": "입력한 박자만큼 쉽니다.",
        "albertai_change_tempo_by": "연주하거나 쉬는 속도의 현재 BPM(분당 박자 수)에 입력한 값을 더합니다.",
        "albertai_set_tempo_to": "연주하거나 쉬는 속도를 입력한 BPM(분당 박자 수)으로 설정합니다.",
        "brown_touching_color": "선택한 색깔을 컬러 센서가 감지하였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "brown_is_color_pattern": "선택한 색깔 패턴을 컬러 센서가 감지하였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "brown_button_state": "버튼을 클릭했으면/더블클릭했으면/길게 눌렀으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "brown_boolean": "앞으로 기울임: 앞으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>뒤로 기울임: 뒤로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>왼쪽으로 기울임: 왼쪽으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>오른쪽으로 기울임: 오른쪽으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>거꾸로 뒤집음: 거꾸로 뒤집었으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>기울이지 않음: 기울이지 않았으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>두드림: 두드렸으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>자유 낙하: 자유 낙하했으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 정상: 배터리 잔량이 충분하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 부족: 배터리 잔량이 부족하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 없음: 배터리 잔량이 없으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "brown_value": "색깔 번호: 컬러 센서가 감지한 색깔의 번호 (값의 범위: -2 ~ 8, 초기값: -1)<br/>색깔 패턴: 컬러 센서가 감지한 색깔 패턴의 값 (값의 범위: -1 ~ 88, 초기값: -1)<br/>색깔 R: 컬러 센서가 감지한 색깔의 빨간색(R) 성분 (값의 범위: 0 ~ 255, 초기값: 0)<br/>색깔 G: 컬러 센서가 감지한 색깔의 초록색(G) 성분 (값의 범위: 0 ~ 255, 초기값: 0)<br/>색깔 B: 컬러 센서가 감지한 색깔의 파란색(B) 성분 (값의 범위: 0 ~ 255, 초기값: 0)<br/>바닥 센서: 바닥 센서의 값 (값의 범위: 0 ~ 100, 초기값: 0)<br/>버튼: 버튼의 상태 값 (누르면 1, 아니면 0, 초기값: 0)<br/>x축 가속도: 가속도 센서의 X축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇이 전진하는 방향이 X축의 양수 방향입니다.<br/>y축 가속도: 가속도 센서의 Y축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 왼쪽 방향이 Y축의 양수 방향입니다.<br/>z축 가속도: 가속도 센서의 Z축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 위쪽 방향이 Z축의 양수 방향입니다.<br/>온도: 로봇 내부의 온도 값 (값의 범위: 섭씨 -41 ~ 87도, 초기값: 0)<br/>신호 세기: 블루투스 무선 통신의 신호 세기 (값의 범위: -128 ~ 0 dBm, 초기값: 0) 신호의 세기가 셀수록 값이 커집니다.",
        "brown_move_forward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 앞으로 이동합니다.",
        "brown_move_backward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 뒤로 이동합니다.",
        "brown_turn_unit_in_place": "입력한 각도(도)/시간(초)/펄스만큼 왼쪽/오른쪽 방향으로 제자리에서 회전합니다.",
        "brown_pivot_around_wheel_unit_in_direction": "왼쪽/오른쪽 바퀴 중심으로 입력한 각도(도)/시간(초)/펄스만큼 앞쪽/뒤쪽 방향으로 회전합니다.",
        "brown_turn_unit_with_radius_in_direction": "입력한 반지름의 원을 그리면서 입력한 시간(초)/펄스만큼 왼쪽/오른쪽, 앞쪽/뒤쪽 방향으로 회전합니다.",
        "brown_change_wheels_by_left_right": "왼쪽과 오른쪽 바퀴의 현재 속도 값(%)에 입력한 값을 각각 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "brown_set_wheels_to_left_right": "왼쪽과 오른쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 각각 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "brown_change_wheel_by": "왼쪽/오른쪽/양쪽 바퀴의 현재 속도 값(%)에 입력한 값을 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "brown_set_wheel_to": "왼쪽/오른쪽/양쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "brown_follow_line": "하얀색 바탕 위에서 검은색 선을 따라 이동합니다.",
        "brown_follow_line_until": "하얀색 바탕 위에서 검은색 선을 따라 이동하다가 선택한 색깔을 컬러 센서가 감지하면 정지합니다.",
        "brown_cross_intersection": "검은색 교차로에서 잠시 앞으로 이동한 후 검은색 선을 찾습니다.",
        "brown_turn_at_intersection": "검은색 교차로에서 잠시 앞으로 이동한 후 제자리에서 왼쪽/오른쪽/뒤쪽으로 회전하고 검은색 선을 찾습니다.",
        "brown_jump_line": "제자리에서 왼쪽/오른쪽으로 90도 회전한 후 앞으로 이동하다가 컬러 센서가 검은색 선을 감지하면 원래 방향으로 다시 회전합니다.",
        "brown_set_following_speed_to": "선을 따라 이동하는 속도(1 ~ 8)를 설정합니다. 숫자가 클수록 이동하는 속도가 빠릅니다.",
        "brown_stop": "양쪽 바퀴를 정지합니다.",
        "brown_set_led_to": "LED를 선택한 색깔로 켭니다.",
        "brown_pick_led": "LED를 선택한 색깔로 켭니다.",
        "brown_change_led_by_rgb": "LED의 현재 R, G, B 값에 입력한 값을 각각 더합니다.",
        "brown_set_led_to_rgb": "LED의 R, G, B 값을 입력한 값으로 각각 설정합니다.",
        "brown_clear_led": "LED를 끕니다.",
        "brown_play_sound_times": "선택한 소리를 입력한 횟수만큼 재생합니다.",
        "brown_play_sound_times_until_done": "선택한 소리를 입력한 횟수만큼 재생하고, 재생이 완료될 때까지 기다립니다.",
        "brown_change_buzzer_by": "버저 소리의 현재 음 높이(Hz)에 입력한 값을 더합니다. 소수점 둘째 자리까지 입력할 수 있습니다.",
        "brown_set_buzzer_to": "버저 소리의 음 높이를 입력한 값(Hz)으로 설정합니다. 소수점 둘째 자리까지 입력할 수 있습니다. 숫자 0을 입력하면 소리를 끕니다.",
        "brown_clear_sound": "소리를 끕니다.",
        "brown_play_note": "선택한 계이름과 옥타브의 음을 계속 소리 냅니다.",
        "brown_play_note_for_beats": "선택한 계이름과 옥타브의 음을 입력한 박자만큼 소리 냅니다.",
        "brown_rest_for_beats": "입력한 박자만큼 쉽니다.",
        "brown_change_tempo_by": "연주하거나 쉬는 속도의 현재 BPM(분당 박자 수)에 입력한 값을 더합니다.",
        "brown_set_tempo_to": "연주하거나 쉬는 속도를 입력한 BPM(분당 박자 수)으로 설정합니다.",
        "byrobot_controller_3_4_controller_buzzer_hz": "<br>지정한 주파수의 소리를 계속해서 연주합니다(최대 60초). 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#즉시</font>",
        "byrobot_controller_3_4_controller_buzzer_hz_delay": "<br>지정한 주파수의 소리를 지정한 시간동안 연주합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_controller_3_4_controller_buzzer_hz_reserve": "<br>지정한 주파수의 소리를 지정한 시간동안 연주하도록 예약합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭은 소리가 나도록 예약하고, 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#예약</font>",
        "byrobot_controller_3_4_controller_buzzer_off": "<br>버저 작동을 중단합니다. 예약된 소리가 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저끄기</font>",
        "byrobot_controller_3_4_controller_buzzer_scale": "<br>지정한 옥타브의 음을 계속해서 연주합니다(최대 60초). 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font>",
        "byrobot_controller_3_4_controller_buzzer_scale_delay": "<br>지정한 옥타브의 음을 지정한 시간동안 연주합니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_controller_3_4_controller_buzzer_scale_reserve": "<br>지정한 옥타브의 음을 지정한 시간동안 연주하도록 예약합니다. 이 블럭은 소리가 나도록 예약하고 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#예약</font>",
        "byrobot_controller_3_4_controller_if_button_press": "<br>지정한 조종기의 버튼이 눌러졌을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_controller_3_4_controller_if_joystick_direction": "<br>조종기의 조이스틱을 지정한 방향으로 움직였을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_controller_3_4_controller_light_color_preset": "<br>조종기 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_controller_3_4_controller_light_manual_single_input": "<br>조종기 LED를 조작하는데 사용합니다.<br>LED를 선택하는데는 10진수(0 ~ 255) 또는 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다. <br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_controller_3_4_controller_light_manual_single_off": "<br>조종기의 모든 LED를 끕니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_controller_3_4_controller_value_button": "<br>조종기에서 눌러진 버튼과 관련된 이벤트를 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_controller_3_4_controller_value_joystick": "<br>조종기의 조이스틱과 관련된 입력 값을 반환합니다. 각 축의 범위는 -100 ~ 100 입니다.<br><br>조이스틱 방향은 가로x세로 = 3x3 = 총9방향입니다.<br>위(왼쪽=17, 가운데=18, 오른쪽=20)<br>중간(왼쪽=33, 센터=34, 오른쪽=36)<br>아래(왼쪽=65, 가운데=66, 오른쪽=68)<br>기본값은 센터=34입니다.<br><br>조이스틱 이벤트는 값이 있을때 2, 없으면 0, 진입 1, 벗어남 3입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_controller_3_4_controller_vibrator_delay": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복합니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_controller_3_4_controller_vibrator_off": "<br>진동을 끕니다. 예약된 진동이 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동끄기</font>",
        "byrobot_controller_3_4_controller_vibrator_on_delay": "<br>진동을 지정한 시간동안 켭니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_controller_3_4_controller_vibrator_on_reserve": "<br>진동을 지정한 시간동안 켜는 것을 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_controller_3_4_controller_vibrator_reserve": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복하도록 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_controller_4_buzzer_hz": "<br>지정한 주파수의 소리를 계속해서 연주합니다(최대 60초). 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#즉시</font>",
        "byrobot_controller_4_buzzer_hz_delay": "<br>지정한 주파수의 소리를 지정한 시간동안 연주합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_controller_4_buzzer_hz_reserve": "<br>지정한 주파수의 소리를 지정한 시간동안 연주하도록 예약합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭은 소리가 나도록 예약하고, 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#예약</font>",
        "byrobot_controller_4_buzzer_off": "<br>버저 작동을 중단합니다. 예약된 소리가 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저끄기</font>",
        "byrobot_controller_4_buzzer_scale": "<br>지정한 옥타브의 음을 계속해서 연주합니다(최대 60초). 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font>",
        "byrobot_controller_4_buzzer_scale_delay": "<br>지정한 옥타브의 음을 지정한 시간동안 연주합니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_controller_4_buzzer_scale_reserve": "<br>지정한 옥타브의 음을 지정한 시간동안 연주하도록 예약합니다. 이 블럭은 소리가 나도록 예약하고 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#예약</font>",
        "byrobot_controller_4_display_clear": "<br>조종기 OLED 화면의 선택한 영역을 지웁니다. x, y 좌표값과 너비, 높이를 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_controller_4_display_clear_all": "<br>조종기 OLED 화면 전체를 지웁니다. 흰색/검은색 중에서 원하는 색을 선택할 수 있습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_controller_4_display_draw_circle": "<br>조종기 OLED 화면에서 지정한 위치에 원을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>x, y 좌표값과 반지름을 지정합니다. 원의 중심 = (x, y),<br>반지름은 원의 크기를 결정합니다.<br><br>★☆사용 가능한 값의 범위는 x값은 (-50~178), y값은 (-50~114), 반지름은 (1~200)입니다.☆★<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_controller_4_display_draw_line": "<br>조종기 OLED 화면에서 지정한 위치에 선을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>시작점 = (x1, y1), 끝나는점 = (x2, y2)<br>선 그리기는 시작점과 끝나는점을 이어주는 기능입니다.<br>사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_controller_4_display_draw_point": "<br>조종기 OLED 화면에서 지정한 위치에 점을 찍습니다. 흰색/검은색 중에서 원하는 색을 선택할 수 있습니다. x, y 좌표값으로 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_controller_4_display_draw_rect": "<br>조종기 OLED 화면에서 지정한 위치에 사각형을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>x, y 좌표값과 너비, 높이를 지정합니다. 시작점 = (x, y), 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_controller_4_display_draw_string": "<br>조종기 OLED 화면에서 지정한 위치에 문자열을 씁니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>글자 입력은 영문자 알파벳 대문자, 소문자와 숫자, 공백(space), 특수문자만 가능합니다.(한글은 아직 지원되지 않습니다.)<br>x, y 좌표값과 글자 크기, 색을 지정합니다. 시작점 = (x, y), 사용 가능한 값의 범위는 x값은 (0~120), y값과 높이는 (0~60)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_controller_4_display_draw_string_align": "<br>조종기 OLED 화면에서 지정한 위치에 문자열을 정렬하여 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>글자 입력은 영문자 알파벳 대문자, 소문자와 숫자, 공백(space), 특수문자만 가능합니다.(한글은 아직 지원되지 않습니다.)<br>x, y 좌표값과 정렬 방향, 글자 크기, 색을 지정합니다. 시작점 = (x1, y), 끝나는점 = (x2, y), 사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~60)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_controller_4_if_button_press": "<br>지정한 조종기의 버튼이 눌러졌을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_controller_4_if_joystick_direction": "<br>조종기의 조이스틱을 지정한 방향으로 움직였을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_controller_4_controller_light_color_input": "<br>빛의 삼원색인 Red, Green, Blue 값을 지정하여 조종기 LED의 색상을 원하는대로 만들 수 있습니다.<br>10진수(0 ~ 255) 값을 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_controller_4_controller_light_color_select": "<br>RGB 색지정 블록을 이용해서 만들 수 있는<br> 조종기 LED 예시입니다.<br>RGB 색지정 블록을 이용해서 멋진 색깔을<br> 다양하게 만들어보세요.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_controller_4_controller_light_color_preset": "<br>조종기 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_controller_4_controller_light_manual_single_input": "<br>조종기 LED를 조작하는데 사용합니다.<br>10진수(0 ~ 255), 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다. 각각의 비트는 LED를 선택하는 스위치 역할을 합니다.  밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다. 값이 커질수록 더 밝아집니다. <br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_controller_4_controller_light_manual_single_off": "<br>조종기의 모든 LED를 끕니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_controller_4_value_button": "<br>조종기에서 눌러진 버튼과 관련된 이벤트를 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_controller_4_value_joystick": "<br>조종기의 조이스틱과 관련된 입력 값을 반환합니다. 각 축의 범위는 -100 ~ 100 입니다.<br><br>조이스틱 방향은 가로x세로 = 3x3 = 총9방향입니다.<br>위(왼쪽=17, 가운데=18, 오른쪽=20)<br>중간(왼쪽=33, 센터=34, 오른쪽=36)<br>아래(왼쪽=65, 가운데=66, 오른쪽=68)<br>기본값은 센터=34입니다.<br><br>조이스틱 이벤트는 값이 있을때 2, 없으면 0, 진입 1, 벗어남 3입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_controller_4_vibrator_delay": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복합니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_controller_4_vibrator_off": "<br>진동을 끕니다. 예약된 진동이 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동끄기</font>",
        "byrobot_controller_4_vibrator_on_delay": "<br>진동을 지정한 시간동안 켭니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_controller_4_vibrator_on_reserve": "<br>진동을 지정한 시간동안 켜는 것을 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_controller_4_vibrator_reserve": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복하도록 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_drone_3_10_controller_buzzer_hz": "<br>지정한 주파수의 소리를 계속해서 연주합니다(최대 60초). 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#즉시</font>",
        "byrobot_drone_3_10_controller_buzzer_hz_delay": "<br>지정한 주파수의 소리를 지정한 시간동안 연주합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_drone_3_10_controller_buzzer_hz_reserve": "<br>지정한 주파수의 소리를 지정한 시간동안 연주하도록 예약합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭은 소리가 나도록 예약하고, 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#예약</font>",
        "byrobot_drone_3_10_controller_buzzer_off": "<br>버저 작동을 중단합니다. 예약된 소리가 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저끄기</font>",
        "byrobot_drone_3_10_controller_buzzer_scale": "<br>지정한 옥타브의 음을 계속해서 연주합니다(최대 60초). 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font>",
        "byrobot_drone_3_10_controller_buzzer_scale_delay": "<br>지정한 옥타브의 음을 지정한 시간동안 연주합니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_drone_3_10_controller_buzzer_scale_reserve": "<br>지정한 옥타브의 음을 지정한 시간동안 연주하도록 예약합니다. 이 블럭은 소리가 나도록 예약하고 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#예약</font>",
        "byrobot_drone_3_10_controller_if_button_press": "<br>지정한 조종기의 버튼이 눌러졌을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_drone_3_10_controller_if_joystick_direction": "<br>조종기의 조이스틱을 지정한 방향으로 움직였을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_drone_3_10_controller_light_color_preset": "<br>조종기 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_3_10_controller_light_manual_single_input": "<br>조종기 LED를 조작하는데 사용합니다.<br>LED를 선택하는데는 10진수(0 ~ 255) 또는 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다. <br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_3_10_controller_light_manual_single_off": "<br>조종기의 모든 LED를 끕니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_drone_3_10_controller_value_button": "<br>조종기에서 눌러진 버튼과 관련된 이벤트를 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_drone_3_10_controller_value_joystick": "<br>조종기의 조이스틱과 관련된 입력 값을 반환합니다. 각 축의 범위는 -100 ~ 100 입니다.<br><br>조이스틱 방향은 가로x세로 = 3x3 = 총9방향입니다.<br>위(왼쪽=17, 가운데=18, 오른쪽=20)<br>중간(왼쪽=33, 센터=34, 오른쪽=36)<br>아래(왼쪽=65, 가운데=66, 오른쪽=68)<br>기본값은 센터=34입니다.<br><br>조이스틱 이벤트는 값이 있을때 2, 없으면 0, 진입 1, 벗어남 3입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_drone_3_10_controller_vibrator_delay": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복합니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_drone_3_10_controller_vibrator_off": "<br>진동을 끕니다. 예약된 진동이 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동끄기</font>",
        "byrobot_drone_3_10_controller_vibrator_on_delay": "<br>진동을 지정한 시간동안 켭니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_drone_3_10_controller_vibrator_on_reserve": "<br>진동을 지정한 시간동안 켜는 것을 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_drone_3_10_controller_vibrator_reserve": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복하도록 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_drone_3_10_drone_control_headless": "<br>드론 좌표 기준을 변경합니다. Headless mode 선택을 on으로 하면 이륙 시와 '방향초기화'를 했을 때 드론이 바라보는 방향을 기준으로 앞뒤좌우가 고정됩니다. 이 때에는 Yaw를 조작하여 드론이 다른 방향을 보게 하여도 처음 지정한 방향을 기준으로 앞뒤좌우로 움직입니다. 사용자가 바라보는 방향과 드론의 기준 방향이 같을 때 조작하기 편리한 장점이 있습니다.<br>Headless mode를 off로 선택하면 현재 드론이 바라보는 방향을 기준으로 앞뒤좌우가 결정됩니다. 드론의 움직임에 따라 앞뒤좌우가 계속 바뀌기 때문에 익숙해지기 전까지는 사용하기 어려울 수 있습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#좌표기준</font>",
        "byrobot_drone_3_10_drone_control_drone_landing": "<br>드론을 착륙시킵니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#착륙</font>",
        "byrobot_drone_3_10_drone_control_drone_reset_heading": "<br>드론의 방향을 초기화합니다. 앱솔루트 모드인 경우 현재 드론이 바라보는 방향을 0도로 변경합니다. 일반 모드에서는 아무런 영향이 없습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#방향초기화</font>",
        "byrobot_drone_3_10_drone_control_drone_stop": "<br>드론 작동을 정지합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#정지</font>",
        "byrobot_drone_3_10_drone_control_drone_takeoff": "<br>드론을 이륙시킵니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#이륙</font>",
        "byrobot_drone_3_10_drone_control_quad": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 명령 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font>",
        "byrobot_drone_3_10_drone_control_quad_delay": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 지정한 시간이 지나면 해당 조종 값을 0으로 변경합니다. 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_drone_3_10_drone_control_quad_one": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 명령 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font>",
        "byrobot_drone_3_10_drone_control_quad_one_delay": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 지정한 시간이 지나면 해당 조종 값을 0으로 변경합니다. 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_drone_3_10_drone_light_color_input": "<br>빛의 삼원색인 Red, Green, Blue 값을 지정하여 드론의 눈 또는 팔 LED의 색상을 원하는대로 만들 수 있습니다.<br>10진수(0 ~ 255) 값을 사용합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_3_10_drone_light_color_select": "<br>RGB 색지정 블록을 이용해서 만들 수 있는<br> 드론 LED 예시입니다.<br>RGB 색지정 블록을 이용해서 멋진 색깔을<br> 다양하게 만들어보세요.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_3_10_drone_light_color_preset": "<br>드론의 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_3_10_drone_light_manual_single_input": "<br>드론 LED를 조작하는데 사용합니다.<br>LED를 선택하는데는 10진수(0 ~ 255) 또는 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_3_10_drone_light_manual_single_off": "<br>드론의 모든 LED를 끕니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_drone_3_10_drone_motor_stop": "<br>모든 모터의 작동을 정지합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터정지</font>",
        "byrobot_drone_3_10_drone_motorsingle": "<br>모터 제어 블럭입니다.<br>모터의 순서는 12시 방향부터 차례대로 1(앞 오른쪽), 2(뒤 오른쪽), 3(뒤 왼쪽), 4(앞 왼쪽) 입니다.<br>모터 회전에 사용 가능한 값의 범위는 0 ~ 4095입니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_drone_3_10_drone_motorsingle_input": "<br>모터 제어 블럭입니다.<br>모터의 순서는 12시 방향부터 차례대로 1(앞 오른쪽), 2(뒤 오른쪽), 3(뒤 왼쪽), 4(앞 왼쪽) 입니다.<br>모터 회전에 사용 가능한 값의 범위는 0 ~ 4095입니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_drone_3_10_drone_battle_ir_message": "<br>드론 적외선 데이터 송신 장치로 지정한 값을 전송합니다. 값의 범위는 0 ~ 0xFF 입니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#적외선_데이터_송신</font>",
        "byrobot_drone_3_10_drone_value_attitude": "<br>드론의 현재 자세를 각도로 반환합니다. Roll은 좌우 기울기(-90 ~ 90), Pitch는 앞뒤 기울기(-90 ~ 90), Yaw는 회전 각도(-180 ~ 180) 입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#자세</font>",
        "byrobot_drone_3_10_drone_value_etc": "<br>드론 설정과 관련된 값들과 적외선 통신으로 받은 값을 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#기타</font>",
        "byrobot_drone_3_10_drone_value_motion": "<br>드론 IMU센서와 관련된 값들을 반환합니다.<br>(병진운동) 가속도는 x, y, z축에 대한 중력가속도입니다. 1g = 9.8m/s^2<br>(회전운동) 각속도는 x, y, z축을 기준으로 회전하는 속력을 나타내는 벡터입니다.(pitch, roll, yaw) <br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#IMU센서</font> <font color='crimson'>#가속도</font> <font color='dodgerblue'>#병진운동</font> <font color='crimson'>#각속도</font> <font color='dodgerblue'>#회전운동</font>",
        "byrobot_drone_3_10_drone_value_sensor": "<br>드론 센서와 관련된 값들을 반환합니다.<br>온도 단위=섭씨 도, 해발고도 단위=m, image flow 단위=m, 바닥까지의 거리 단위=m<br>해발고도 값은 대기압의 영향을 받아서 오차범위가 큽니다. 바닥까지 거리의 유효 측정 거리는 2m입니다. image flow값은 일정한 속도와 높이에서 이동할 경우에 유효합니다. 이러한 센서값들을 이용하여 호버링(고도 유지) 기능을 수행합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#센서</font> <font color='crimson'>#온도</font> <font color='dodgerblue'>#해발고도</font> <font color='forestgreen'>#image flow</font> <font color='crimson'>#range</font> <font color='dodgerblue'>#대기압</font> <font color='forestgreen'>#호버링</font>",
        "byrobot_drone_3_10_drone_value_ir": "<br>드론 적외선 데이터 수신 장치에서 받은 데이터를 반환합니다<br><br><font color='dodgerblue'>#드론</font> <font color='forestgreen'>#적외선_데이터_수신</font>",
        "byrobot_drone_4_controller_buzzer_hz": "<br>지정한 주파수의 소리를 계속해서 연주합니다(최대 60초). 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#즉시</font>",
        "byrobot_drone_4_controller_buzzer_hz_delay": "<br>지정한 주파수의 소리를 지정한 시간동안 연주합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_drone_4_controller_buzzer_hz_reserve": "<br>지정한 주파수의 소리를 지정한 시간동안 연주하도록 예약합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭은 소리가 나도록 예약하고, 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#예약</font>",
        "byrobot_drone_4_controller_buzzer_off": "<br>버저 작동을 중단합니다. 예약된 소리가 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저끄기</font>",
        "byrobot_drone_4_controller_buzzer_scale": "<br>지정한 옥타브의 음을 계속해서 연주합니다(최대 60초). 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font>",
        "byrobot_drone_4_controller_buzzer_scale_delay": "<br>지정한 옥타브의 음을 지정한 시간동안 연주합니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_drone_4_controller_buzzer_scale_reserve": "<br>지정한 옥타브의 음을 지정한 시간동안 연주하도록 예약합니다. 이 블럭은 소리가 나도록 예약하고 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#예약</font>",
        "byrobot_drone_4_controller_display_clear": "<br>조종기 OLED 화면의 선택한 영역을 지웁니다. x, y 좌표값과 너비, 높이를 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_4_controller_display_clear_all": "<br>조종기 OLED 화면 전체를 지웁니다. 흰색/검은색 중에서 원하는 색을 선택할 수 있습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_4_controller_display_draw_circle": "<br>조종기 OLED 화면에서 지정한 위치에 원을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>x, y 좌표값과 반지름을 지정합니다. 원의 중심 = (x, y),<br>반지름은 원의 크기를 결정합니다.<br><br>★☆사용 가능한 값의 범위는 x값은 (-50~178), y값은 (-50~114), 반지름은 (1~200)입니다.☆★<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_4_controller_display_draw_line": "<br>조종기 OLED 화면에서 지정한 위치에 선을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>시작점 = (x1, y1), 끝나는점 = (x2, y2)<br>선 그리기는 시작점과 끝나는점을 이어주는 기능입니다.<br>사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_4_controller_display_draw_point": "<br>조종기 OLED 화면에서 지정한 위치에 점을 찍습니다. 흰색/검은색 중에서 원하는 색을 선택할 수 있습니다. x, y 좌표값으로 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_4_controller_display_draw_rect": "<br>조종기 OLED 화면에서 지정한 위치에 사각형을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>x, y 좌표값과 너비, 높이를 지정합니다. 시작점 = (x, y), 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_4_controller_display_draw_string": "<br>조종기 OLED 화면에서 지정한 위치에 문자열을 씁니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>글자 입력은 영문자 알파벳 대문자, 소문자와 숫자, 공백(space), 특수문자만 가능합니다.(한글은 아직 지원되지 않습니다.)<br>x, y 좌표값과 글자 크기, 색을 지정합니다. 시작점 = (x, y), 사용 가능한 값의 범위는 x값은 (0~120), y값과 높이는 (0~60)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_4_controller_display_draw_string_align": "<br>조종기 OLED 화면에서 지정한 위치에 문자열을 정렬하여 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>글자 입력은 영문자 알파벳 대문자, 소문자와 숫자, 공백(space), 특수문자만 가능합니다.(한글은 아직 지원되지 않습니다.)<br>x, y 좌표값과 정렬 방향, 글자 크기, 색을 지정합니다. 시작점 = (x1, y), 끝나는점 = (x2, y), 사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~60)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_4_controller_if_button_press": "<br>지정한 조종기의 버튼이 눌러졌을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_drone_4_controller_if_joystick_direction": "<br>조종기의 조이스틱을 지정한 방향으로 움직였을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_drone_4_controller_light_color_input": "<br>빛의 삼원색인 Red, Green, Blue 값을 지정하여 조종기 LED의 색상을 원하는대로 만들 수 있습니다.<br>10진수(0 ~ 255) 값을 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_4_controller_light_color_select": "<br>RGB 색지정 블록을 이용해서 만들 수 있는<br> 조종기 LED 예시입니다.<br>RGB 색지정 블록을 이용해서 멋진 색깔을<br> 다양하게 만들어보세요.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_4_controller_light_color_preset": "<br>조종기 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_4_controller_light_manual_single_input": "<br>조종기 LED를 조작하는데 사용합니다.<br>10진수(0 ~ 255) 또는 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>각각의 비트는 LED를 선택하는 스위치 역할을 합니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다. <br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_4_controller_light_manual_single_off": "<br>조종기의 모든 LED를 끕니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_drone_4_controller_value_button": "<br>조종기에서 눌러진 버튼과 관련된 이벤트를 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_drone_4_controller_value_joystick": "<br>조종기의 조이스틱과 관련된 입력 값을 반환합니다. 각 축의 범위는 -100 ~ 100 입니다.<br><br>조이스틱 방향은 가로x세로 = 3x3 = 총9방향입니다.<br>위(왼쪽=17, 가운데=18, 오른쪽=20)<br>중간(왼쪽=33, 센터=34, 오른쪽=36)<br>아래(왼쪽=65, 가운데=66, 오른쪽=68)<br>기본값은 센터=34입니다.<br><br>조이스틱 이벤트는 값이 있을때 2, 없으면 0, 진입 1, 벗어남 3입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_drone_4_controller_vibrator_delay": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복합니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_drone_4_controller_vibrator_off": "<br>진동을 끕니다. 예약된 진동이 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동끄기</font>",
        "byrobot_drone_4_controller_vibrator_on_delay": "<br>진동을 지정한 시간동안 켭니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_drone_4_controller_vibrator_on_reserve": "<br>진동을 지정한 시간동안 켜는 것을 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_drone_4_controller_vibrator_reserve": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복하도록 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_drone_4_drone_control_headless": "<br>드론 좌표 기준을 변경합니다. Headless mode 선택을 on으로 하면 이륙 시와 '방향초기화'를 했을 때 드론이 바라보는 방향을 기준으로 앞뒤좌우가 고정됩니다. 이 때에는 Yaw를 조작하여 드론이 다른 방향을 보게 하여도 처음 지정한 방향을 기준으로 앞뒤좌우로 움직입니다. 사용자가 바라보는 방향과 드론의 기준 방향이 같을 때 조작하기 편리한 장점이 있습니다.<br>Headless mode를 off로 선택하면 현재 드론이 바라보는 방향을 기준으로 앞뒤좌우가 결정됩니다. 드론의 움직임에 따라 앞뒤좌우가 계속 바뀌기 때문에 익숙해지기 전까지는 사용하기 어려울 수 있습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#좌표기준</font>",
        "byrobot_drone_4_drone_control_drone_landing": "<br>드론을 착륙시킵니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#착륙</font>",
        "byrobot_drone_4_drone_control_drone_reset_heading": "<br>드론의 방향을 초기화합니다. 앱솔루트 모드인 경우 현재 드론이 바라보는 방향을 0도로 변경합니다. 일반 모드에서는 아무런 영향이 없습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#방향초기화</font>",
        "byrobot_drone_4_drone_control_drone_stop": "<br>드론 작동을 정지합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#정지</font>",
        "byrobot_drone_4_drone_control_drone_takeoff": "<br>드론을 이륙시킵니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#이륙</font>",
        "byrobot_drone_4_drone_control_quad": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 명령 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font>",
        "byrobot_drone_4_drone_control_quad_delay": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 지정한 시간이 지나면 해당 조종 값을 0으로 변경합니다. 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_drone_4_drone_control_quad_one": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 명령 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font>",
        "byrobot_drone_4_drone_control_quad_one_delay": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 지정한 시간이 지나면 해당 조종 값을 0으로 변경합니다. 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_drone_4_drone_control_position_one": "<br>드론의 방향과 거리, 이동 속도를 지정하여 지정한 위치로 이동합니다. 거리를 속도로 나누어 얻은 시간에 1.2를 곱한 시간만큼 해당 블럭에 머뭅니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#이동</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_drone_4_drone_control_position_turn": "<br>드론의 회전 방향과 각도, 회전 속도를 지정하여 지정한 각도로 회전합니다. 목표 각도를 회전 속도로 나누어 얻은 시간에 1.2를 곱한 시간만큼 해당 블럭에 머뭅니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#회전</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_drone_4_drone_control_position_location": "<br>드론의 X, Y, Z 축의 방향과 거리, 이동 속도를 설정하여 지정한 위치로 이동합니다. 거리를 속도로 나누어 얻은 시간에 1.2를 곱한 시간만큼 해당 블럭에 머뭅니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#이동</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_drone_4_drone_control_position_location_turn": "<br>드론의 X, Y, Z 축의 방향과 거리, 이동 속도, 회전 방향과 목표 각도, 회전 속도를 설정하여 지정한 위치로의 이동과 회전을 실행합니다. 거리를 속도로 나누어 얻은 시간에 1.2를 곱한 시간 또는 목표 각도를 회전 속도로 나누어 얻은 시간에 1.2를 곱한 시간 중에 긴 시간만큼 해당 블럭에 머뭅니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#이동</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_drone_4_drone_light_color_input": "<br>빛의 삼원색인 Red, Green, Blue 값을 지정하여 드론의 눈 또는 팔 LED의 색상을 원하는대로 만들 수 있습니다.<br>10진수(0 ~ 255) 값을 사용합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_4_drone_light_color_select": "<br>RGB 색지정 블록을 이용해서 만들 수 있는<br> 드론 LED 예시입니다.<br>RGB 색지정 블록을 이용해서 멋진 색깔을<br> 다양하게 만들어보세요.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_4_drone_light_color_preset": "<br>드론의 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_4_drone_light_manual_single_input": "<br>드론 LED를 조작하는데 사용합니다.<br>10진수(0 ~ 255) 또는 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>각각의 비트는 LED를 선택하는 스위치 역할을 합니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_4_drone_light_manual_single_off": "<br>드론의 모든 LED를 끕니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_drone_4_drone_motor_stop": "<br>모든 모터의 작동을 정지합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터정지</font>",
        "byrobot_drone_4_drone_motorsingle": "<br>모터 제어 블럭입니다.<br>모터의 순서는 12시 방향부터 차례대로 1(앞 오른쪽), 2(뒤 오른쪽), 3(뒤 왼쪽), 4(앞 왼쪽) 입니다.<br>모터 회전에 사용 가능한 값의 범위는 0 ~ 4095입니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_drone_4_drone_motorsingle_input": "<br>모터 제어 블럭입니다.<br>모터의 순서는 12시 방향부터 차례대로 1(앞 오른쪽), 2(뒤 오른쪽), 3(뒤 왼쪽), 4(앞 왼쪽) 입니다.<br>모터 회전에 사용 가능한 값의 범위는 0 ~ 4095입니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_drone_4_drone_value_attitude": "<br>드론의 현재 자세를 각도로 반환합니다. Roll은 좌우 기울기(-90 ~ 90), Pitch는 앞뒤 기울기(-90 ~ 90), Yaw는 회전 각도(-180 ~ 180) 입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#자세</font>",
        "byrobot_drone_4_drone_value_etc": "<br>드론 설정과 관련된 값들과 적외선 통신으로 받은 값을 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#기타</font>",
        "byrobot_drone_4_drone_value_motion": "<br>드론 IMU센서와 관련된 값들을 반환합니다.<br>(병진운동) 가속도는 x, y, z축에 대한 중력가속도입니다. 1g = 9.8m/s^2<br>(회전운동) 각속도는 x, y, z축을 기준으로 회전하는 속력을 나타내는 벡터입니다.(pitch, roll, yaw) <br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#IMU센서</font> <font color='crimson'>#가속도</font> <font color='dodgerblue'>#병진운동</font> <font color='crimson'>#각속도</font> <font color='dodgerblue'>#회전운동</font>",
        "byrobot_drone_4_drone_value_position": "<br>드론 위치와 관련된 값들을 반환합니다.(단위:m)<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#위치</font>",
        "byrobot_drone_4_drone_value_sensor": "<br>드론 거리 및 고도 센서와 관련된 값들을 반환합니다(단위:m)<br>거리 센서의 유효 측정 거리는 2m입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#센서</font> <font color='crimson'>#거리센서</font> <font color='dodgerblue'>#대기압</font>",
        "byrobot_drone_8_controller_buzzer_hz": "<br>지정한 주파수의 소리를 계속해서 연주합니다(최대 60초). 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#즉시</font>",
        "byrobot_drone_8_controller_buzzer_hz_delay": "<br>지정한 주파수의 소리를 지정한 시간동안 연주합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_drone_8_controller_buzzer_hz_reserve": "<br>지정한 주파수의 소리를 지정한 시간동안 연주하도록 예약합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭은 소리가 나도록 예약하고, 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#예약</font>",
        "byrobot_drone_8_controller_buzzer_off": "<br>버저 작동을 중단합니다. 예약된 소리가 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저끄기</font>",
        "byrobot_drone_8_controller_buzzer_scale": "<br>지정한 옥타브의 음을 계속해서 연주합니다(최대 60초). 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font>",
        "byrobot_drone_8_controller_buzzer_scale_delay": "<br>지정한 옥타브의 음을 지정한 시간동안 연주합니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_drone_8_controller_buzzer_scale_reserve": "<br>지정한 옥타브의 음을 지정한 시간동안 연주하도록 예약합니다. 이 블럭은 소리가 나도록 예약하고 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#예약</font>",
        "byrobot_drone_8_controller_display_clear": "<br>조종기 OLED 화면의 선택한 영역을 지웁니다. x, y 좌표값과 너비, 높이를 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_8_controller_display_clear_all": "<br>조종기 OLED 화면 전체를 지웁니다. 흰색/검은색 중에서 원하는 색을 선택할 수 있습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_8_controller_display_draw_circle": "<br>조종기 OLED 화면에서 지정한 위치에 원을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>x, y 좌표값과 반지름을 지정합니다. 원의 중심 = (x, y),<br>반지름은 원의 크기를 결정합니다.<br><br>★☆사용 가능한 값의 범위는 x값은 (-50~178), y값은 (-50~114), 반지름은 (1~200)입니다.☆★<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_8_controller_display_draw_line": "<br>조종기 OLED 화면에서 지정한 위치에 선을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>시작점 = (x1, y1), 끝나는점 = (x2, y2)<br>선 그리기는 시작점과 끝나는점을 이어주는 기능입니다.<br>사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_8_controller_display_draw_point": "<br>조종기 OLED 화면에서 지정한 위치에 점을 찍습니다. 흰색/검은색 중에서 원하는 색을 선택할 수 있습니다. x, y 좌표값으로 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_8_controller_display_draw_rect": "<br>조종기 OLED 화면에서 지정한 위치에 사각형을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>x, y 좌표값과 너비, 높이를 지정합니다. 시작점 = (x, y), 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_8_controller_display_draw_string": "<br>조종기 OLED 화면에서 지정한 위치에 문자열을 씁니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>글자 입력은 영문자 알파벳 대문자, 소문자와 숫자, 공백(space), 특수문자만 가능합니다.(한글은 아직 지원되지 않습니다.)<br>x, y 좌표값과 글자 크기, 색을 지정합니다. 시작점 = (x, y), 사용 가능한 값의 범위는 x값은 (0~120), y값과 높이는 (0~60)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_8_controller_display_draw_string_align": "<br>조종기 OLED 화면에서 지정한 위치에 문자열을 정렬하여 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>글자 입력은 영문자 알파벳 대문자, 소문자와 숫자, 공백(space), 특수문자만 가능합니다.(한글은 아직 지원되지 않습니다.)<br>x, y 좌표값과 정렬 방향, 글자 크기, 색을 지정합니다. 시작점 = (x1, y), 끝나는점 = (x2, y), 사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~60)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_drone_8_controller_if_button_press": "<br>지정한 조종기의 버튼이 눌러졌을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_drone_8_controller_if_joystick_direction": "<br>조종기의 조이스틱을 지정한 방향으로 움직였을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_drone_8_controller_light_color_input": "<br>빛의 삼원색인 Red, Green, Blue 값을 지정하여 조종기 LED의 색상을 원하는대로 만들 수 있습니다.<br>10진수(0 ~ 255) 값을 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_8_controller_light_color_select": "<br>RGB 색지정 블록을 이용해서 만들 수 있는<br> 조종기 LED 예시입니다.<br>RGB 색지정 블록을 이용해서 멋진 색깔을<br> 다양하게 만들어보세요.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_8_controller_light_color_preset": "<br>조종기 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_8_controller_light_manual_single_input": "<br>조종기 LED를 조작하는데 사용합니다.<br>10진수(0 ~ 255) 또는 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>2진수로 표현한 값에서 각각의 비트는 LED의 Red, Green, Blue 색을 선택하는 스위치 역할을 합니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다. <br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_8_controller_light_manual_single_off": "<br>조종기의 모든 LED를 끕니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_drone_8_controller_value_button": "<br>조종기에서 눌러진 버튼과 관련된 이벤트를 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_drone_8_controller_value_joystick": "<br>조종기의 조이스틱과 관련된 입력 값을 반환합니다. 각 축의 범위는 -100 ~ 100 입니다.<br><br>조이스틱 방향은 가로x세로 = 3x3 = 총9방향입니다.<br>위(왼쪽=17, 가운데=18, 오른쪽=20)<br>중간(왼쪽=33, 센터=34, 오른쪽=36)<br>아래(왼쪽=65, 가운데=66, 오른쪽=68)<br>기본값은 센터=34입니다.<br><br>조이스틱 이벤트는 값이 있을때 2, 없으면 0, 진입 1, 벗어남 3입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_drone_8_controller_vibrator_delay": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복합니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_drone_8_controller_vibrator_off": "<br>진동을 끕니다. 예약된 진동이 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동끄기</font>",
        "byrobot_drone_8_controller_vibrator_on_delay": "<br>진동을 지정한 시간동안 켭니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_drone_8_controller_vibrator_on_reserve": "<br>진동을 지정한 시간동안 켜는 것을 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_drone_8_controller_vibrator_reserve": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복하도록 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_drone_8_drone_control_headless": "<br>드론 좌표 기준을 변경합니다. Headless mode 선택을 on으로 하면 이륙 시와 '방향초기화'를 했을 때 드론이 바라보는 방향을 기준으로 앞뒤좌우가 고정됩니다. 이 때에는 Yaw를 조작하여 드론이 다른 방향을 보게 하여도 처음 지정한 방향을 기준으로 앞뒤좌우로 움직입니다. 사용자가 바라보는 방향과 드론의 기준 방향이 같을 때 조작하기 편리한 장점이 있습니다.<br>Headless mode를 off로 선택하면 현재 드론이 바라보는 방향을 기준으로 앞뒤좌우가 결정됩니다. 드론의 움직임에 따라 앞뒤좌우가 계속 바뀌기 때문에 익숙해지기 전까지는 사용하기 어려울 수 있습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#좌표기준</font>",
        "byrobot_drone_8_drone_control_drone_landing": "<br>드론을 착륙시킵니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#착륙</font>",
        "byrobot_drone_8_drone_control_drone_reset_heading": "<br>드론의 방향을 초기화합니다. 앱솔루트 모드인 경우 현재 드론이 바라보는 방향을 0도로 변경합니다. 일반 모드에서는 아무런 영향이 없습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#방향초기화</font>",
        "byrobot_drone_8_drone_control_drone_stop": "<br>드론 작동을 정지합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#정지</font>",
        "byrobot_drone_8_drone_control_drone_takeoff": "<br>드론을 이륙시킵니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#이륙</font>",
        "byrobot_drone_8_drone_control_quad": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 명령 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font>",
        "byrobot_drone_8_drone_control_quad_delay": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 지정한 시간이 지나면 해당 조종 값을 0으로 변경합니다. 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_drone_8_drone_control_quad_one": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 명령 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font>",
        "byrobot_drone_8_drone_control_quad_one_delay": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 지정한 시간이 지나면 해당 조종 값을 0으로 변경합니다. 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_drone_8_drone_control_position_one": "<br>드론의 방향과 거리, 이동 속도를 지정하여 지정한 위치로 이동합니다. 거리를 속도로 나누어 얻은 시간에 1.2를 곱한 시간만큼 해당 블럭에 머뭅니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#이동</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_drone_8_drone_control_position_turn": "<br>드론의 회전 방향과 각도, 회전 속도를 지정하여 지정한 각도로 회전합니다. 목표 각도를 회전 속도로 나누어 얻은 시간에 1.2를 곱한 시간만큼 해당 블럭에 머뭅니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#회전</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_drone_8_drone_control_position_location": "<br>드론의 X, Y, Z 축의 방향과 거리, 이동 속도를 설정하여 지정한 위치로 이동합니다. 거리를 속도로 나누어 얻은 시간에 1.2를 곱한 시간만큼 해당 블럭에 머뭅니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#이동</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_drone_8_drone_control_position_location_turn": "<br>드론의 X, Y, Z 축의 방향과 거리, 이동 속도, 회전 방향과 목표 각도, 회전 속도를 설정하여 지정한 위치로의 이동과 회전을 실행합니다. 거리를 속도로 나누어 얻은 시간에 1.2를 곱한 시간 또는 목표 각도를 회전 속도로 나누어 얻은 시간에 1.2를 곱한 시간 중에 긴 시간만큼 해당 블럭에 머뭅니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#이동</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_drone_8_drone_light_color_input": "<br>빛의 삼원색인 Red, Green, Blue 값을 지정하여 드론의 눈 또는 팔 LED의 색상을 원하는대로 만들 수 있습니다.<br>10진수(0 ~ 255) 값을 사용합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_8_drone_light_color_select": "<br>RGB 색지정 블록을 이용해서 만들 수 있는<br> 드론 LED 예시입니다.<br>RGB 색지정 블록을 이용해서 멋진 색깔을<br> 다양하게 만들어보세요.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_8_drone_light_color_preset": "<br>드론의 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_8_drone_light_manual_single_input": "<br>드론 LED를 조작하는데 사용합니다.<br>10진수(0 ~ 255), 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>2진수로 표현한 값에서 각각의 비트는 LED를 선택하는 스위치 역할을 합니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_drone_8_drone_light_manual_single_off": "<br>드론의 모든 LED를 끕니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_drone_8_drone_motor_stop": "<br>모든 모터의 작동을 정지합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터정지</font>",
        "byrobot_drone_8_drone_motorsingle": "<br>모터 제어 블럭입니다.<br>모터의 순서는 12시 방향부터 차례대로 1(앞 오른쪽), 2(뒤 오른쪽), 3(뒤 왼쪽), 4(앞 왼쪽) 입니다.<br>모터 회전에 사용 가능한 값의 범위는 0 ~ 4095입니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_drone_8_drone_motorsingle_input": "<br>모터 제어 블럭입니다.<br>모터의 순서는 12시 방향부터 차례대로 1(앞 오른쪽), 2(뒤 오른쪽), 3(뒤 왼쪽), 4(앞 왼쪽) 입니다.<br>모터 회전에 사용 가능한 값의 범위는 0 ~ 4095입니다. <br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_drone_8_drone_value_attitude": "<br>드론의 현재 자세를 각도로 반환합니다. Roll은 좌우 기울기(-90 ~ 90), Pitch는 앞뒤 기울기(-90 ~ 90), Yaw는 회전 각도(-180 ~ 180) 입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#자세</font>",
        "byrobot_drone_8_drone_value_etc": "<br>드론 설정과 관련된 값들과 적외선 통신으로 받은 값을 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#기타</font>",
        "byrobot_drone_8_drone_value_motion": "<br>드론 IMU센서와 관련된 값들을 반환합니다.<br>(병진운동) 가속도는 x, y, z축에 대한 중력가속도입니다. 1g = 9.8m/s^2<br>(회전운동) 각속도는 x, y, z축을 기준으로 회전하는 속력을 나타내는 벡터입니다.(pitch, roll, yaw) <br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#IMU센서</font> <font color='crimson'>#가속도</font> <font color='dodgerblue'>#병진운동</font> <font color='crimson'>#각속도</font> <font color='dodgerblue'>#회전운동</font>",
        "byrobot_drone_8_drone_value_position": "<br>드론 위치와 관련된 값들을 반환합니다.(단위:m)<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#위치</font>",
        "byrobot_drone_8_drone_value_sensor": "<br>드론 거리 및 고도 센서와 관련된 값들을 반환합니다(단위:m)<br>거리 센서의 유효 측정 거리는 2m입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#센서</font> <font color='crimson'>#거리센서</font> <font color='dodgerblue'>#대기압</font>",
        "byrobot_drone_8_drone_value_card": "<br>드론 카드 센서와 관련된 값들을 반환합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#카드</font>",
        "byrobot_dronefighter_controller_controller_value_button": "<br>조종기에서 눌러진 버튼과 관련된 이벤트를 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_dronefighter_controller_controller_value_joystick": "<br>조종기의 조이스틱과 관련된 입력 값을 반환합니다. 각 축의 범위는 -100 ~ 100 입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_dronefighter_controller_controller_if_button_press": "<br>지정한 조종기의 버튼이 눌러졌을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_dronefighter_controller_controller_if_joystick_direction": "<br>조종기의 조이스틱을 지정한 방향으로 움직였을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_dronefighter_controller_controller_light_manual_single_off": "<br>조종기의 모든 LED를 끕니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_dronefighter_controller_controller_light_manual_single": "<br>조종기 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_dronefighter_controller_controller_light_manual_single_input": "<br>조종기 LED 여러 개의 밝기를 동시에 변경할 때 사용합니다.<br>10진수(0 ~ 255), 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>2진수로 표현한 값에서 각각의 비트는 개별 LED를 선택하는 스위치 역할을 합니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다. <br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_dronefighter_controller_controller_buzzer_off": "<br>버저 작동을 중단합니다. 예약된 소리가 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저끄기</font>",
        "byrobot_dronefighter_controller_controller_buzzer_scale": "<br>지정한 옥타브의 음을 계속해서 연주합니다(최대 60초). 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font>",
        "byrobot_dronefighter_controller_controller_buzzer_scale_delay": "<br>지정한 옥타브의 음을 지정한 시간동안 연주합니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_dronefighter_controller_controller_buzzer_scale_reserve": "<br>지정한 옥타브의 음을 지정한 시간동안 연주하도록 예약합니다. 이 블럭은 소리가 나도록 예약하고 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#예약</font>",
        "byrobot_dronefighter_controller_controller_buzzer_hz": "<br>지정한 주파수의 소리를 계속해서 연주합니다(최대 60초). 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#즉시</font>",
        "byrobot_dronefighter_controller_controller_buzzer_hz_delay": "<br>지정한 주파수의 소리를 지정한 시간동안 연주합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_dronefighter_controller_controller_buzzer_hz_reserve": "<br>지정한 주파수의 소리를 지정한 시간동안 연주하도록 예약합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭은 소리가 나도록 예약하고, 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#예약</font>",
        "byrobot_dronefighter_controller_controller_vibrator_off": "<br>진동을 끕니다. 예약된 진동이 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동끄기</font>",
        "byrobot_dronefighter_controller_controller_vibrator_on_delay": "<br>진동을 지정한 시간동안 켭니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_dronefighter_controller_controller_vibrator_on_reserve": "<br>진동을 지정한 시간동안 켜는 것을 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_dronefighter_controller_controller_vibrator_delay": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복합니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_dronefighter_controller_controller_vibrator_reserve": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복하도록 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_dronefighter_controller_controller_userinterface_preset": "<br>조종기 설정 모드의 사용자 인터페이스를 미리 정해둔 설정으로 변경합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#설정모드</font> <font color='forestgreen'>#인터페이스</font>",
        "byrobot_dronefighter_controller_controller_userinterface": "<br>조종기 설정 모드의 사용자 인터페이스를 직접 지정합니다. 각 버튼 및 조이스틱 조작 시 어떤 명령을 사용할 것인지를 지정할 수 있습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#설정모드</font> <font color='forestgreen'>#인터페이스</font>",
        "byrobot_dronefighter_drive_drone_value_attitude": "<br>자동차의 현재 자세를 각도로 반환합니다. Roll은 좌우 기울기(-90 ~ 90), Pitch는 앞뒤 기울기(-90 ~ 90), Yaw는 회전 각도(-180 ~ 180) 입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#자동차</font> <font color='forestgreen'>#자세</font>",
        "byrobot_dronefighter_drive_drone_value_etc": "<br>드론파이터 설정과 관련된 값들과 적외선 통신으로 받은 값을 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#자동차</font> <font color='forestgreen'>#기타</font>",
        "byrobot_dronefighter_drive_controller_value_button": "<br>조종기에서 눌러진 버튼과 관련된 이벤트를 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_dronefighter_drive_controller_value_joystick": "<br>조종기의 조이스틱과 관련된 입력 값을 반환합니다. 각 축의 범위는 -100 ~ 100 입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_dronefighter_drive_controller_if_button_press": "<br>지정한 조종기의 버튼이 눌러졌을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_dronefighter_drive_controller_if_joystick_direction": "<br>조종기의 조이스틱을 지정한 방향으로 움직였을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_dronefighter_drive_drone_control_car_stop": "<br>자동차 작동을 정지합니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#정지</font>",
        "byrobot_dronefighter_drive_drone_control_double_one": "<br>자동차 조종 값을 지정합니다. 입력 가능한 값의 범위는 방향 -100 ~ 100, 전진 0 ~ 100입니다. 명령 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#조종</font>",
        "byrobot_dronefighter_drive_drone_control_double_one_delay": "<br>자동차 조종 값을 지정합니다. 입력 가능한 값의 범위는 방향 -100 ~ 100, 전진 0 ~ 100입니다. 지정한 시간이 지나면 해당 조종 값을 0으로 변경합니다. 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#조종</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_dronefighter_drive_drone_control_double": "<br>자동차 조종 값을 지정합니다. 입력 가능한 값의 범위는 방향 -100 ~ 100, 전진 0 ~ 100입니다. 명령 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#조종</font>",
        "byrobot_dronefighter_drive_drone_motor_stop": "<br>모든 모터의 작동을 정지합니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#모터정지</font>",
        "byrobot_dronefighter_drive_drone_motorsingle": "<br>지정한 모터를 원하는 빠르기로 회전할 때 사용합니다. 사용 가능한 값의 범위는 0 ~ 4000입니다. 모터의 순서는 '왼쪽 앞', '오른쪽 앞', '오른쪽 뒤', '왼쪽 뒤' 입니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_dronefighter_drive_drone_motorsingle_input": "<br>지정한 모터(1, 2, 3, 4)를 원하는 빠르기로 회전할 때 사용합니다. 사용 가능한 값의 범위는 0 ~ 4000입니다. 모터의 순서는 '왼쪽 앞', '오른쪽 앞', '오른쪽 뒤', '왼쪽 뒤' 입니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_dronefighter_drive_drone_irmessage": "<br>적외선으로 지정한 값을 보냅니다. 사용 가능한 값의 범위는 0 ~ 127입니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#적외선통신</font>",
        "byrobot_dronefighter_drive_drone_light_manual_single_off": "<br>자동차의 모든 LED를 끕니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_dronefighter_drive_drone_light_manual_single": "<br>자동차의 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_dronefighter_drive_drone_light_manual_single_input": "<br>자동차 LED 여러 개의 밝기를 동시에 변경할 때 사용합니다.<br>10진수(0 ~ 255), 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>각각의 비트는 개별 LED를 선택하는 스위치 역할을 합니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_dronefighter_drive_controller_light_manual_single_off": "<br>조종기의 모든 LED를 끕니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_dronefighter_drive_controller_light_manual_single": "<br>조종기 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_dronefighter_drive_controller_light_manual_single_input": "<br>조종기 LED 여러 개의 밝기를 동시에 변경할 때 사용합니다.<br>10진수(0 ~ 255), 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>각각의 비트는 개별 LED를 선택하는 스위치 역할을 합니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_dronefighter_drive_controller_buzzer_off": "<br>버저 작동을 중단합니다. 예약된 소리가 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저끄기</font>",
        "byrobot_dronefighter_drive_controller_buzzer_scale": "<br>지정한 옥타브의 음을 계속해서 연주합니다(최대 60초). 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font>",
        "byrobot_dronefighter_drive_controller_buzzer_scale_delay": "<br>지정한 옥타브의 음을 지정한 시간동안 연주합니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_dronefighter_drive_controller_buzzer_scale_reserve": "<br>지정한 옥타브의 음을 지정한 시간동안 연주하도록 예약합니다. 이 블럭은 소리가 나도록 예약하고 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#예약</font>",
        "byrobot_dronefighter_drive_controller_buzzer_hz": "<br>지정한 주파수의 소리를 계속해서 연주합니다(최대 60초). 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#즉시</font>",
        "byrobot_dronefighter_drive_controller_buzzer_hz_delay": "<br>지정한 주파수의 소리를 지정한 시간동안 연주합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_dronefighter_drive_controller_buzzer_hz_reserve": "<br>지정한 주파수의 소리를 지정한 시간동안 연주하도록 예약합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭은 소리가 나도록 예약하고, 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#예약</font>",
        "byrobot_dronefighter_drive_controller_vibrator_off": "<br>진동을 끕니다. 예약된 진동이 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동끄기</font>",
        "byrobot_dronefighter_drive_controller_vibrator_on_delay": "<br>진동을 지정한 시간동안 켭니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_dronefighter_drive_controller_vibrator_on_reserve": "<br>진동을 지정한 시간동안 켜는 것을 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_dronefighter_drive_controller_vibrator_delay": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복합니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_dronefighter_drive_controller_vibrator_reserve": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복하도록 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_dronefighter_flight_drone_value_attitude": "<br>드론의 현재 자세를 각도로 반환합니다. Roll은 좌우 기울기(-90 ~ 90), Pitch는 앞뒤 기울기(-90 ~ 90), Yaw는 회전 각도(-180 ~ 180) 입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#자세</font>",
        "byrobot_dronefighter_flight_drone_value_etc": "<br>드론파이터 설정과 관련된 값들과 적외선 통신으로 받은 값을 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#기타</font>",
        "byrobot_dronefighter_flight_controller_value_button": "<br>조종기에서 눌러진 버튼과 관련된 이벤트를 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_dronefighter_flight_controller_value_joystick": "<br>조종기의 조이스틱과 관련된 입력 값을 반환합니다. 각 축의 범위는 -100 ~ 100 입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_dronefighter_flight_controller_if_button_press": "<br>지정한 조종기의 버튼이 눌러졌을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_dronefighter_flight_controller_if_joystick_direction": "<br>조종기의 조이스틱을 지정한 방향으로 움직였을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_dronefighter_flight_drone_control_drone_stop": "<br>드론 작동을 정지합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#정지</font>",
        "byrobot_dronefighter_flight_drone_control_coordinate": "<br>드론 좌표 기준을 변경합니다. 앱솔루트 모드는 이륙 시와 '방향초기화'를 했을 때 드론이 바라보는 방향을 기준으로 앞뒤좌우가 고정됩니다. 이 때에는 Yaw를 조작하여 드론이 다른 방향을 보게 하여도 처음 지정한 방향을 기준으로 앞뒤좌우로 움직입니다. 사용자가 바라보는 방향과 드론의 기준 방향이 같을 때 조작하기 편리한 장점이 있습니다. 일반 모드는 현재 드론이 바라보는 방향을 기준으로 앞뒤좌우가 결정됩니다. 드론의 움직임에 따라 앞뒤좌우가 계속 바뀌기 때문에 익숙해지기 전까지는 사용하기 어려울 수 있습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#좌표기준</font>",
        "byrobot_dronefighter_flight_drone_control_drone_reset_heading": "<br>드론의 방향을 초기화합니다. 앱솔루트 모드인 경우 현재 드론이 바라보는 방향을 0도로 변경합니다. 일반 모드에서는 아무런 영향이 없습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#방향초기화</font>",
        "byrobot_dronefighter_flight_drone_control_quad_one": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 명령 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font>",
        "byrobot_dronefighter_flight_drone_control_quad_one_delay": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 지정한 시간이 지나면 해당 조종 값을 0으로 변경합니다. 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_dronefighter_flight_drone_control_quad": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 명령 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font>",
        "byrobot_dronefighter_flight_drone_motor_stop": "<br>모든 모터의 작동을 정지합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터정지</font>",
        "byrobot_dronefighter_flight_drone_motorsingle": "<br>지정한 모터를 원하는 빠르기로 회전할 때 사용합니다. 사용 가능한 값의 범위는 0 ~ 4000입니다. 모터의 순서는 '왼쪽 앞', '오른쪽 앞', '오른쪽 뒤', '왼쪽 뒤' 입니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_dronefighter_flight_drone_motorsingle_input": "<br>지정한 모터(1, 2, 3, 4)를 원하는 빠르기로 회전할 때 사용합니다. 사용 가능한 값의 범위는 0 ~ 4000입니다. 모터의 순서는 '왼쪽 앞', '오른쪽 앞', '오른쪽 뒤', '왼쪽 뒤' 입니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_dronefighter_flight_drone_irmessage": "<br>적외선으로 지정한 값을 보냅니다. 사용 가능한 값의 범위는 0 ~ 127입니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#적외선통신</font>",
        "byrobot_dronefighter_flight_drone_light_manual_single_off": "<br>드론의 모든 LED를 끕니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_dronefighter_flight_drone_light_manual_single": "<br>드론의 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_dronefighter_flight_drone_light_manual_single_input": "<br>드론 LED 여러 개의 밝기를 동시에 변경할 때 사용합니다.<br>10진수(0 ~ 255), 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>2진수로 표현한 값에서 각각의 비트는 개별 LED를 선택하는 스위치 역할을 합니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_dronefighter_flight_controller_light_manual_single_off": "<br>조종기의 모든 LED를 끕니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_dronefighter_flight_controller_light_manual_single": "<br>조종기 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_dronefighter_flight_controller_light_manual_single_input": "<br>조종기 LED 여러 개의 밝기를 동시에 변경할 때 사용합니다.<br>10진수(0 ~ 255), 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>2진수로 표현한 값에서 각각의 비트는 개별 LED를 선택하는 스위치 역할을 합니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_dronefighter_flight_controller_buzzer_off": "<br>버저 작동을 중단합니다. 예약된 소리가 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저끄기</font>",
        "byrobot_dronefighter_flight_controller_buzzer_scale": "<br>지정한 옥타브의 음을 계속해서 연주합니다(최대 60초). 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font>",
        "byrobot_dronefighter_flight_controller_buzzer_scale_delay": "<br>지정한 옥타브의 음을 지정한 시간동안 연주합니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_dronefighter_flight_controller_buzzer_scale_reserve": "<br>지정한 옥타브의 음을 지정한 시간동안 연주하도록 예약합니다. 이 블럭은 소리가 나도록 예약하고 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#예약</font>",
        "byrobot_dronefighter_flight_controller_buzzer_hz": "<br>지정한 주파수의 소리를 계속해서 연주합니다(최대 60초). 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#즉시</font>",
        "byrobot_dronefighter_flight_controller_buzzer_hz_delay": "<br>지정한 주파수의 소리를 지정한 시간동안 연주합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_dronefighter_flight_controller_buzzer_hz_reserve": "<br>지정한 주파수의 소리를 지정한 시간동안 연주하도록 예약합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭은 소리가 나도록 예약하고, 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#예약</font>",
        "byrobot_dronefighter_flight_controller_vibrator_off": "<br>진동을 끕니다. 예약된 진동이 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동끄기</font>",
        "byrobot_dronefighter_flight_controller_vibrator_on_delay": "<br>진동을 지정한 시간동안 켭니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_dronefighter_flight_controller_vibrator_on_reserve": "<br>진동을 지정한 시간동안 켜는 것을 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_dronefighter_flight_controller_vibrator_delay": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복합니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_dronefighter_flight_controller_vibrator_reserve": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복하도록 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_petrone_v2_controller_controller_buzzer_hz": "<br>지정한 주파수의 소리를 계속해서 연주합니다(최대 60초). 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#즉시</font>",
        "byrobot_petrone_v2_controller_controller_buzzer_hz_delay": "<br>지정한 주파수의 소리를 지정한 시간동안 연주합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_petrone_v2_controller_controller_buzzer_hz_reserve": "<br>지정한 주파수의 소리를 지정한 시간동안 연주하도록 예약합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭은 소리가 나도록 예약하고, 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#예약</font>",
        "byrobot_petrone_v2_controller_controller_buzzer_off": "<br>버저 작동을 중단합니다. 예약된 소리가 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저끄기</font>",
        "byrobot_petrone_v2_controller_controller_buzzer_scale": "<br>지정한 옥타브의 음을 계속해서 연주합니다(최대 60초). 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font>",
        "byrobot_petrone_v2_controller_controller_buzzer_scale_delay": "<br>지정한 옥타브의 음을 지정한 시간동안 연주합니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_petrone_v2_controller_controller_buzzer_scale_reserve": "<br>지정한 옥타브의 음을 지정한 시간동안 연주하도록 예약합니다. 이 블럭은 소리가 나도록 예약하고 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#예약</font>",
        "byrobot_petrone_v2_controller_controller_display_clear": "<br>조종기 OLED 화면의 선택한 영역을 지웁니다. x, y 좌표값과 너비, 높이를 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_controller_controller_display_clear_all": "<br>조종기 OLED 화면 전체를 지웁니다. 흰색/검은색 중에서 원하는 색을 선택할 수 있습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_controller_controller_display_draw_circle": "<br>조종기 OLED 화면에서 지정한 위치에 원을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>x, y 좌표값과 반지름을 지정합니다. 원의 중심 = (x, y),<br>반지름은 원의 크기를 결정합니다.<br><br>★☆사용 가능한 값의 범위는 x값은 (-50~178), y값은 (-50~114), 반지름은 (1~200)입니다.☆★<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_controller_controller_display_draw_line": "<br>조종기 OLED 화면에서 지정한 위치에 선을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>시작점 = (x1, y1), 끝나는점 = (x2, y2)<br>선 그리기는 시작점과 끝나는점을 이어주는 기능입니다.<br>사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_controller_controller_display_draw_point": "<br>조종기 OLED 화면에서 지정한 위치에 점을 찍습니다. 흰색/검은색 중에서 원하는 색을 선택할 수 있습니다. x, y 좌표값으로 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_controller_controller_display_draw_rect": "<br>조종기 OLED 화면에서 지정한 위치에 사각형을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>x, y 좌표값과 너비, 높이를 지정합니다. 시작점 = (x, y), 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_controller_controller_display_draw_string": "<br>조종기 OLED 화면에서 지정한 위치에 문자열을 씁니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>글자 입력은 영문자 알파벳 대문자, 소문자와 숫자, 공백(space), 특수문자만 가능합니다.(한글은 아직 지원되지 않습니다.)<br>x, y 좌표값과 글자 크기, 색을 지정합니다. 시작점 = (x, y), 사용 가능한 값의 범위는 x값은 (0~120), y값은 (0~60)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_controller_controller_display_draw_string_align": "<br>조종기 OLED 화면에서 지정한 위치에 문자열을 정렬하여 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>글자 입력은 영문자 알파벳 대문자, 소문자와 숫자, 공백(space), 특수문자만 가능합니다.(한글은 아직 지원되지 않습니다.)<br>x, y 좌표값과 정렬 방향, 글자 크기, 색을 지정합니다. 시작점 = (x1, y), 끝나는점 = (x2, y), 사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~60)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_controller_controller_display_invert": "<br>조종기 OLED 화면에서 선택한 영역의 색을 반전시킵니다. x, y 좌표값과 너비, 높이를 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_controller_controller_if_button_press": "<br>지정한 조종기의 버튼이 눌러졌을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_petrone_v2_controller_controller_if_joystick_direction": "<br>조종기의 조이스틱을 지정한 방향으로 움직였을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_petrone_v2_controller_controller_light_color_input": "<br>빛의 삼원색인 Red, Green, Blue 값을 지정하여 조종기 LED의 색상을 원하는대로 만들 수 있습니다.<br>10진수(0 ~ 255) 값을 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_controller_controller_light_color_select": "<br>RGB 색지정 블록을 이용해서 만들 수 있는<br> 조종기 LED 예시입니다.<br>RGB 색지정 블록을 이용해서 멋진 색깔을<br> 다양하게 만들어보세요.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_controller_controller_light_color_preset": "<br>조종기 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_controller_controller_light_manual_single_input": "<br>조종기 LED를 조작하는데 사용합니다.<br>10진수(0 ~ 255), 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>각각의 비트는 LED를 선택하는 스위치 역할을 합니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다. 값이 커질수록 더 밝아집니다. <br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_controller_controller_light_manual_single_off": "<br>조종기의 모든 LED를 끕니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_petrone_v2_controller_controller_value_button": "<br>조종기에서 눌러진 버튼과 관련된 이벤트를 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_petrone_v2_controller_controller_value_joystick": "<br>조종기의 조이스틱과 관련된 입력 값을 반환합니다. 각 축의 범위는 -100 ~ 100 입니다.<br><br>조이스틱 방향은 가로x세로 = 3x3 = 총9방향입니다.<br>위(왼쪽=17, 가운데=18, 오른쪽=20)<br>중간(왼쪽=33, 센터=34, 오른쪽=36)<br>아래(왼쪽=65, 가운데=66, 오른쪽=68)<br>기본값은 센터=34입니다.<br><br>조이스틱 이벤트는 값이 있을때 2, 없으면 0, 진입 1, 벗어남 3입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_petrone_v2_controller_controller_vibrator_delay": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복합니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_petrone_v2_controller_controller_vibrator_off": "<br>진동을 끕니다. 예약된 진동이 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동끄기</font>",
        "byrobot_petrone_v2_controller_controller_vibrator_on_delay": "<br>진동을 지정한 시간동안 켭니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_petrone_v2_controller_controller_vibrator_on_reserve": "<br>진동을 지정한 시간동안 켜는 것을 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_petrone_v2_controller_controller_vibrator_reserve": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복하도록 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_petrone_v2_drive_controller_buzzer_hz": "<br>지정한 주파수의 소리를 계속해서 연주합니다(최대 60초). 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#즉시</font>",
        "byrobot_petrone_v2_drive_controller_buzzer_hz_delay": "<br>지정한 주파수의 소리를 지정한 시간동안 연주합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_petrone_v2_drive_controller_buzzer_hz_reserve": "<br>지정한 주파수의 소리를 지정한 시간동안 연주하도록 예약합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭은 소리가 나도록 예약하고, 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#예약</font>",
        "byrobot_petrone_v2_drive_controller_buzzer_off": "<br>버저 작동을 중단합니다. 예약된 소리가 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저끄기</font>",
        "byrobot_petrone_v2_drive_controller_buzzer_scale": "<br>지정한 옥타브의 음을 계속해서 연주합니다(최대 60초). 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font>",
        "byrobot_petrone_v2_drive_controller_buzzer_scale_delay": "<br>지정한 옥타브의 음을 지정한 시간동안 연주합니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_petrone_v2_drive_controller_buzzer_scale_reserve": "<br>지정한 옥타브의 음을 지정한 시간동안 연주하도록 예약합니다. 이 블럭은 소리가 나도록 예약하고 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#예약</font>",
        "byrobot_petrone_v2_drive_controller_display_clear": "<br>조종기 OLED 화면의 선택한 영역을 지웁니다. x, y 좌표값과 너비, 높이를 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_drive_controller_display_clear_all": "<br>조종기 OLED 화면 전체를 지웁니다. 흰색/검은색 중에서 원하는 색을 선택할 수 있습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_drive_controller_display_draw_circle": "<br>조종기 OLED 화면에서 지정한 위치에 원을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>x, y 좌표값과 반지름을 지정합니다. 원의 중심 = (x, y),<br>반지름은 원의 크기를 결정합니다.<br><br>★☆사용 가능한 값의 범위는 x값은 (-50~178), y값은 (-50~114), 반지름은 (1~200)입니다.☆★<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_drive_controller_display_draw_line": "<br>조종기 OLED 화면에서 지정한 위치에 선을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>시작점 = (x1, y1), 끝나는점 = (x2, y2)<br>선 그리기는 시작점과 끝나는점을 이어주는 기능입니다.<br>사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_drive_controller_display_draw_point": "<br>조종기 OLED 화면에서 지정한 위치에 점을 찍습니다. 흰색/검은색 중에서 원하는 색을 선택할 수 있습니다. x, y 좌표값으로 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_drive_controller_display_draw_rect": "<br>조종기 OLED 화면에서 지정한 위치에 사각형을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>x, y 좌표값과 너비, 높이를 지정합니다. 시작점 = (x, y), 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_drive_controller_display_draw_string": "<br>조종기 OLED 화면에서 지정한 위치에 문자열을 씁니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>글자 입력은 영문자 알파벳 대문자, 소문자와 숫자, 공백(space), 특수문자만 가능합니다.(한글은 아직 지원되지 않습니다.)<br>x, y 좌표값과 글자 크기, 색을 지정합니다. 시작점 = (x, y), 사용 가능한 값의 범위는 x값은 (0~120), y값과 높이는 (0~60)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_drive_controller_display_draw_string_align": "<br>조종기 OLED 화면에서 지정한 위치에 문자열을 정렬하여 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>글자 입력은 영문자 알파벳 대문자, 소문자와 숫자, 공백(space), 특수문자만 가능합니다.(한글은 아직 지원되지 않습니다.)<br>x, y 좌표값과 정렬 방향, 글자 크기, 색을 지정합니다. 시작점 = (x1, y), 끝나는점 = (x2, y), 사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~60)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_drive_controller_display_invert": "<br>조종기 OLED 화면에서 선택한 영역의 색을 반전시킵니다. x, y 좌표값과 너비, 높이를 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_drive_controller_if_button_press": "<br>지정한 조종기의 버튼이 눌러졌을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_petrone_v2_drive_controller_if_joystick_direction": "<br>조종기의 조이스틱을 지정한 방향으로 움직였을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_petrone_v2_drive_controller_light_color_input": "<br>빛의 삼원색인 Red, Green, Blue 값을 지정하여 조종기 LED의 색상을 원하는대로 만들 수 있습니다.<br>10진수(0 ~ 255) 값을 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_drive_controller_light_color_select": "<br>RGB 색지정 블록을 이용해서 만들 수 있는<br> 조종기 LED 예시입니다.<br>RGB 색지정 블록을 이용해서 멋진 색깔을<br> 다양하게 만들어보세요.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_drive_controller_light_color_preset": "<br>조종기 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_drive_controller_light_manual_single_input": "<br>조종기 LED 여러 개의 밝기를 동시에 변경할 때 사용합니다.<br>10진수(0 ~ 255), 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>각각의 비트는 개별 LED를 선택하는 스위치 역할을 합니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다. <br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_drive_controller_light_manual_single_off": "<br>조종기의 모든 LED를 끕니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_petrone_v2_drive_controller_value_button": "<br>조종기에서 눌러진 버튼과 관련된 이벤트를 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_petrone_v2_drive_controller_value_joystick": "<br>조종기의 조이스틱과 관련된 입력 값을 반환합니다. 각 축의 범위는 -100 ~ 100 입니다.<br><br>조이스틱 방향은 가로x세로 = 3x3 = 총9방향입니다.<br>위(왼쪽=17, 가운데=18, 오른쪽=20)<br>중간(왼쪽=33, 센터=34, 오른쪽=36)<br>아래(왼쪽=65, 가운데=66, 오른쪽=68)<br>기본값은 센터=34입니다.<br><br>조이스틱 이벤트는 값이 있을때 2, 없으면 0, 진입 1, 벗어남 3입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_petrone_v2_drive_controller_vibrator_delay": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복합니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_petrone_v2_drive_controller_vibrator_off": "<br>진동을 끕니다. 예약된 진동이 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동끄기</font>",
        "byrobot_petrone_v2_drive_controller_vibrator_on_delay": "<br>진동을 지정한 시간동안 켭니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_petrone_v2_drive_controller_vibrator_on_reserve": "<br>진동을 지정한 시간동안 켜는 것을 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_petrone_v2_drive_controller_vibrator_reserve": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복하도록 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_petrone_v2_drive_drone_command_mode_vehicle_car": "<br>자동차 Vehicle mode를 변경합니다.<br><br>자동차 = 32, 자동차(FPV) = 33 입니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#Vehicle mode</font>",
        "byrobot_petrone_v2_drive_drone_control_car_stop": "<br>자동차 작동을 정지합니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#정지</font>",
        "byrobot_petrone_v2_drive_drone_control_double": "<br>자동차 조종 값을 지정합니다. 입력 가능한 값의 범위는 방향 -100 ~ 100, 전진/후진 -100 ~ 100입니다. (+)값은 전진, (-)값은 후진입니다. 명령 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#조종</font>",
        "byrobot_petrone_v2_drive_drone_control_double_delay": "<br>자동차 조종 값을 지정합니다. 입력 가능한 값의 범위는 방향 -100 ~ 100, 전진/후진 -100 ~ 100입니다. (+)값은 전진, (-)값은 후진입니다. 지정한 시간이 지나면 해당 조종 값을 0으로 변경합니다. 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#조종</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_petrone_v2_drive_drone_control_double_one": "<br>자동차 조종 값을 지정합니다. 입력 가능한 값의 범위는 방향 -100 ~ 100, 전진/후진 -100 ~ 100입니다. (+)값은 전진, (-)값은 후진입니다. 명령 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#조종</font>",
        "byrobot_petrone_v2_drive_drone_control_double_one_delay": "<br>자동차 조종 값을 지정합니다. 입력 가능한 값의 범위는 방향 -100 ~ 100, 전진/후진 -100 ~ 100입니다. (+)값은 전진, (-)값은 후진입니다. 지정한 시간이 지나면 해당 조종 값을 0으로 변경합니다. 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#조종</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_petrone_v2_drive_drone_irmessage": "<br>적외선으로 지정한 값을 보냅니다. 사용 가능한 값의 범위는 0 ~ 127입니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#적외선통신</font>",
        "byrobot_petrone_v2_drive_drone_light_color_input": "<br>빛의 삼원색인 Red, Green, Blue 값을 지정하여 자동차의 눈 또는 팔 LED의 색상을 원하는대로 만들 수 있습니다.<br>10진수(0 ~ 255) 값을 사용합니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_drive_drone_light_color_select": "<br>RGB 색지정 블록을 이용해서 만들 수 있는<br> 자동차 LED 예시입니다.<br>RGB 색지정 블록을 이용해서 멋진 색깔을<br> 다양하게 만들어보세요.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_drive_drone_light_color_preset": "<br>자동차의 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_drive_drone_light_manual_single_input": "<br>자동차 LED 여러 개의 밝기를 동시에 변경할 때 사용합니다.<br>10진수(0 ~ 255), 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>2진수로 표현한 값에서 각각의 비트는 개별 LED를 선택하는 스위치 역할을 합니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_drive_drone_light_manual_single_off": "<br>자동차의 모든 LED를 끕니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_petrone_v2_drive_drone_motor_stop": "<br>모든 모터의 작동을 정지합니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#모터정지</font>",
        "byrobot_petrone_v2_drive_drone_motorsingle": "<br>지정한 모터를 원하는 빠르기로 회전할 때 사용합니다. 사용 가능한 값의 범위는 0 ~ 4000입니다. 자동차의 바퀴가 움직이기 위해서는 2700 이상을 입력해야 합니다. 모터의 순서는 '왼쪽 앞', '오른쪽 앞', '오른쪽 뒤', '왼쪽 뒤' 입니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_petrone_v2_drive_drone_motorsingle_input": "<br>지정한 모터(1, 2, 3, 4)를 원하는 빠르기로 회전할 때 사용합니다. 사용 가능한 값의 범위는 0 ~ 4000입니다. 자동차의 바퀴가 움직이기 위해서는 2700 이상을 입력해야 합니다. 모터의 순서는 '왼쪽 앞', '오른쪽 앞', '오른쪽 뒤', '왼쪽 뒤' 입니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_petrone_v2_drive_drone_motorsingle_rotation": "<br>지정한 모터를 원하는 빠르기로 회전할 때 사용합니다. 1번 모터와 2번 모터는 역방향도 회전 가능하기 때문에 방향도 선택할 수 있습니다. 사용 가능한 값의 범위는 0 ~ 4000입니다. 자동차의 바퀴가 움직이기 위해서는 2700 이상을 입력해야 합니다. 모터의 순서는 '왼쪽 앞', '오른쪽 앞', '오른쪽 뒤', '왼쪽 뒤' 입니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_petrone_v2_drive_drone_value_attitude": "<br>자동차의 현재 자세를 각도로 반환합니다. Roll은 좌우 기울기(-90 ~ 90), Pitch는 앞뒤 기울기(-90 ~ 90), Yaw는 회전 각도(-180 ~ 180) 입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#자동차</font> <font color='forestgreen'>#자세</font>",
        "byrobot_petrone_v2_drive_drone_value_etc": "<br>페트론V2 설정과 관련된 값들과 적외선 통신으로 받은 값을 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#자동차</font> <font color='forestgreen'>#기타</font>",
        "byrobot_petrone_v2_drive_drone_value_imu": "<br>페트론V2 IMU센서와 관련된 값들을 반환합니다.<br>(병진운동) 가속도는 x, y, z축에 대한 중력가속도입니다. 1g = 9.8m/s^2<br>(회전운동) 각속도는 x, y, z축을 기준으로 회전하는 속력을 나타내는 벡터입니다.(pitch, roll, yaw) <br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#IMU센서</font> <font color='crimson'>#가속도</font> <font color='dodgerblue'>#병진운동</font> <font color='crimson'>#각속도</font> <font color='dodgerblue'>#회전운동</font>",
        "byrobot_petrone_v2_drive_drone_value_sensor": "<br>페트론V2 센서와 관련된 값들을 반환합니다.<br>온도 단위=섭씨 도, 해발고도 단위=m, image flow 단위=m, 바닥까지의 거리 단위=m<br>해발고도 값은 대기압의 영향을 받아서 오차범위가 큽니다. 바닥까지 거리의 유효 측정 거리는 2m입니다. image flow값은 일정한 속도와 높이에서 이동할 경우에 유효합니다. 이러한 센서값들을 이용하여 Petrone V2는 호버링(고도 유지) 기능을 수행합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#센서</font> <font color='crimson'>#온도</font> <font color='dodgerblue'>#해발고도</font> <font color='forestgreen'>#image flow</font> <font color='crimson'>#range</font> <font color='dodgerblue'>#대기압</font> <font color='forestgreen'>#호버링</font>",
        "byrobot_petrone_v2_flight_controller_buzzer_hz": "<br>지정한 주파수의 소리를 계속해서 연주합니다(최대 60초). 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#즉시</font>",
        "byrobot_petrone_v2_flight_controller_buzzer_hz_delay": "<br>지정한 주파수의 소리를 지정한 시간동안 연주합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_petrone_v2_flight_controller_buzzer_hz_reserve": "<br>지정한 주파수의 소리를 지정한 시간동안 연주하도록 예약합니다. 권장 사용 범위는 250 ~ 8000 입니다. 4옥타브를 기준으로 도(261), 도#(277), 레(293), 레#(311), 미(329), 파(349), 파#(370), 솔(392), 솔#(415), 라(440), 라#(466), 시(493)입니다. 여기에서 한 옥타브를 올라갈 때마다 주파수 값이 두 배가 됩니다. 한 옥타브를 내려갈 때에는 주파수 값이 절반이 됩니다. 예를 들면 3옥타브의 도는 130.8128Hz, 4옥타브의 도는 261.6256Hz, 5옥타브의 도는 523.2511Hz 입니다. 이 블럭은 소리가 나도록 예약하고, 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#주파수</font> <font color='peru'>#예약</font>",
        "byrobot_petrone_v2_flight_controller_buzzer_off": "<br>버저 작동을 중단합니다. 예약된 소리가 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저끄기</font>",
        "byrobot_petrone_v2_flight_controller_buzzer_scale": "<br>지정한 옥타브의 음을 계속해서 연주합니다(최대 60초). 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭은 연주 명령을 실행 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font>",
        "byrobot_petrone_v2_flight_controller_buzzer_scale_delay": "<br>지정한 옥타브의 음을 지정한 시간동안 연주합니다. 이 블럭을 만났을 경우 소리가 켜져있거나 예약된 소리가 있다면 모두 삭제합니다. 이 블럭을 사용하면 소리가 끝날때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#즉시</font> <font color='blueviolet'>#시간지연</font>",
        "byrobot_petrone_v2_flight_controller_buzzer_scale_reserve": "<br>지정한 옥타브의 음을 지정한 시간동안 연주하도록 예약합니다. 이 블럭은 소리가 나도록 예약하고 바로 다음 블럭으로 넘어갑니다. 예약은 최대 12개까지 누적할 수 있습니다. 이 블럭은 주로 버저 소리와 함께 다른 행동을 동시에 할 때 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#버저</font> <font color='forestgreen'>#음계</font> <font color='peru'>#예약</font>",
        "byrobot_petrone_v2_flight_controller_display_clear": "<br>조종기 OLED 화면의 선택한 영역을 지웁니다. x, y 좌표값과 너비, 높이를 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_flight_controller_display_clear_all": "<br>조종기 OLED 화면 전체를 지웁니다. 흰색/검은색 중에서 원하는 색을 선택할 수 있습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_flight_controller_display_draw_circle": "<br>조종기 OLED 화면에서 지정한 위치에 원을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>x, y 좌표값과 반지름을 지정합니다. 원의 중심 = (x, y),<br>반지름은 원의 크기를 결정합니다.<br><br>★☆사용 가능한 값의 범위는 x값은 (-50~178), y값은 (-50~114), 반지름은 (1~200)입니다.☆★<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_flight_controller_display_draw_line": "<br>조종기 OLED 화면에서 지정한 위치에 선을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>시작점 = (x1, y1), 끝나는점 = (x2, y2)<br>선 그리기는 시작점과 끝나는점을 이어주는 기능입니다.<br>사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_flight_controller_display_draw_point": "<br>조종기 OLED 화면에서 지정한 위치에 점을 찍습니다. 흰색/검은색 중에서 원하는 색을 선택할 수 있습니다. x, y 좌표값으로 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_flight_controller_display_draw_rect": "<br>조종기 OLED 화면에서 지정한 위치에 사각형을 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>x, y 좌표값과 너비, 높이를 지정합니다. 시작점 = (x, y), 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_flight_controller_display_draw_string": "<br>조종기 OLED 화면에서 지정한 위치에 문자열을 씁니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>글자 입력은 영문자 알파벳 대문자, 소문자와 숫자, 공백(space), 특수문자만 가능합니다.(한글은 아직 지원되지 않습니다.)<br>x, y 좌표값과 글자 크기, 색을 지정합니다. 시작점 = (x, y), 사용 가능한 값의 범위는 x값은 (0~120), y값과 높이는 (0~60)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_flight_controller_display_draw_string_align": "<br>조종기 OLED 화면에서 지정한 위치에 문자열을 정렬하여 그립니다.<br><br>☆★ (x, y)좌표에 관한 설명은 [조종기 화면 점 찍기]블럭을 참조해주세요. ★☆<br><br>글자 입력은 영문자 알파벳 대문자, 소문자와 숫자, 공백(space), 특수문자만 가능합니다.(한글은 아직 지원되지 않습니다.)<br>x, y 좌표값과 정렬 방향, 글자 크기, 색을 지정합니다. 시작점 = (x1, y), 끝나는점 = (x2, y), 사용 가능한 값의 범위는 x값은 (0~128), y값은 (0~60)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_flight_controller_display_invert": "<br>조종기 OLED 화면에서 선택한 영역의 색을 반전시킵니다. x, y 좌표값과 너비, 높이를 지정합니다. 좌표(x, y) = (가로, 세로) 화면상의 위치입니다. 사용 가능한 값의 범위는 x값과 너비는 (0~128), y값과 높이는 (0~64)입니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#Display</font>",
        "byrobot_petrone_v2_flight_controller_if_button_press": "<br>지정한 조종기의 버튼이 눌러졌을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_petrone_v2_flight_controller_if_joystick_direction": "<br>조종기의 조이스틱을 지정한 방향으로 움직였을 때 true를 반환합니다.<br><br><font color='crimson'>#조건</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_petrone_v2_flight_controller_light_color_input": "<br>빛의 삼원색인 Red, Green, Blue 값을 지정하여 조종기 LED의 색상을 원하는대로 만들 수 있습니다.<br>10진수(0 ~ 255) 값을 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_flight_controller_light_color_select": "<br>RGB 색지정 블록을 이용해서 만들 수 있는<br> 조종기 LED 예시입니다.<br>RGB 색지정 블록을 이용해서 멋진 색깔을<br> 다양하게 만들어보세요.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_flight_controller_light_color_preset": "<br>조종기 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_flight_controller_light_manual_single_input": "<br>조종기 LED를 조작하는데 사용합니다.<br>10진수(0 ~ 255), 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>각각의 비트는 LED를 선택하는 스위치 역할을 합니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다. <br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_flight_controller_light_manual_single_off": "<br>조종기의 모든 LED를 끕니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_petrone_v2_flight_controller_value_button": "<br>조종기에서 눌러진 버튼과 관련된 이벤트를 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#버튼</font>",
        "byrobot_petrone_v2_flight_controller_value_joystick": "<br>조종기의 조이스틱과 관련된 입력 값을 반환합니다. 각 축의 범위는 -100 ~ 100 입니다.<br><br>조이스틱 방향은 가로x세로 = 3x3 = 총9방향입니다.<br>위(왼쪽=17, 가운데=18, 오른쪽=20)<br>중간(왼쪽=33, 센터=34, 오른쪽=36)<br>아래(왼쪽=65, 가운데=66, 오른쪽=68)<br>기본값은 센터=34입니다.<br><br>조이스틱 이벤트는 값이 있을때 2, 없으면 0, 진입 1, 벗어남 3입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#조종기</font> <font color='forestgreen'>#조이스틱</font>",
        "byrobot_petrone_v2_flight_controller_vibrator_delay": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복합니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_petrone_v2_flight_controller_vibrator_off": "<br>진동을 끕니다. 예약된 진동이 있다면 모두 삭제합니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동끄기</font>",
        "byrobot_petrone_v2_flight_controller_vibrator_on_delay": "<br>진동을 지정한 시간동안 켭니다. 이 블럭을 만났을 경우 진동이 켜져있거나 예약된 진동이 있다면 모두 삭제합니다. 이 블럭은 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#즉시</font> <font color='peru'>#시간지연</font>",
        "byrobot_petrone_v2_flight_controller_vibrator_on_reserve": "<br>진동을 지정한 시간동안 켜는 것을 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_petrone_v2_flight_controller_vibrator_reserve": "<br>진동을 지정한 시간동안 켜고 끄는 것을 지정한 시간동안 반복하도록 예약합니다. 이 블럭은 명령을 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#조종기</font> <font color='dodgerblue'>#진동</font> <font color='forestgreen'>#예약</font>",
        "byrobot_petrone_v2_flight_drone_command_mode_vehicle_drone": "<br>드론 Vehicle mode를 변경합니다.<br><br>드론(가드 포함) = 16, 드론(가드 없음) = 17, 드론(FPV) = 18 입니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#Vehicle mode</font>",
        "byrobot_petrone_v2_flight_drone_control_coordinate": "<br>드론 좌표 기준을 변경합니다. Headless mode 선택을 on으로 하면 이륙 시와 '방향초기화'를 했을 때 드론이 바라보는 방향을 기준으로 앞뒤좌우가 고정됩니다. 이 때에는 Yaw를 조작하여 드론이 다른 방향을 보게 하여도 처음 지정한 방향을 기준으로 앞뒤좌우로 움직입니다. 사용자가 바라보는 방향과 드론의 기준 방향이 같을 때 조작하기 편리한 장점이 있습니다.<br>Headless mode를 off로 선택하면 현재 드론이 바라보는 방향을 기준으로 앞뒤좌우가 결정됩니다. 드론의 움직임에 따라 앞뒤좌우가 계속 바뀌기 때문에 익숙해지기 전까지는 사용하기 어려울 수 있습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#좌표기준</font>",
        "byrobot_petrone_v2_flight_drone_control_drone_landing": "<br>드론을 착륙시킵니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#착륙</font>",
        "byrobot_petrone_v2_flight_drone_control_drone_reset_heading": "<br>드론의 방향을 초기화합니다. 앱솔루트 모드인 경우 현재 드론이 바라보는 방향을 0도로 변경합니다. 일반 모드에서는 아무런 영향이 없습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#방향초기화</font>",
        "byrobot_petrone_v2_flight_drone_control_drone_stop": "<br>드론 작동을 정지합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#정지</font>",
        "byrobot_petrone_v2_flight_drone_control_drone_takeoff": "<br>드론을 이륙시킵니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#이륙</font>",
        "byrobot_petrone_v2_flight_drone_control_quad": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 명령 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font>",
        "byrobot_petrone_v2_flight_drone_control_quad_delay": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 지정한 시간이 지나면 해당 조종 값을 0으로 변경합니다. 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_petrone_v2_flight_drone_control_quad_one": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 명령 전달 후 바로 다음 블럭으로 넘어갑니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font>",
        "byrobot_petrone_v2_flight_drone_control_quad_one_delay": "<br>드론 조종 값을 지정합니다. 입력 가능한 값의 범위는 -100 ~ 100입니다. 정지 상태에서 Throttle 값을 50이상으로 지정하면 드론이 이륙합니다. 지정한 시간이 지나면 해당 조종 값을 0으로 변경합니다. 지정한 시간이 끝날 때까지 다음 블럭으로 넘어가지 않습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#조종</font> <font color='forestgreen'>#시간지연</font>",
        "byrobot_petrone_v2_flight_drone_irmessage": "<br>적외선으로 지정한 값을 보냅니다. 사용 가능한 값의 범위는 -2147483647 ~ 2147483647입니다.수신 방향이 추가되었습니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#적외선통신</font>",
        "byrobot_petrone_v2_flight_drone_light_color_input": "<br>빛의 삼원색인 Red, Green, Blue 값을 지정하여 드론의 눈 또는 팔 LED의 색상을 원하는대로 만들 수 있습니다.<br>10진수(0 ~ 255) 값을 사용합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_flight_drone_light_color_select": "<br>RGB 색지정 블록을 이용해서 만들 수 있는<br> 드론 LED 예시입니다.<br>RGB 색지정 블록을 이용해서 멋진 색깔을<br> 다양하게 만들어보세요.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_flight_drone_light_color_preset": "<br>드론의 LED를 조작하는데 사용합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_flight_drone_light_manual_single_input": "<br>드론 LED를 조작하는데 사용합니다.<br>10진수(0 ~ 255), 16진수(0x00 ~ 0xFF) 값을 사용할 수 있습니다.<br>각각의 비트는 LED를 선택하는 스위치 역할을 합니다.<br>밝기 값은 0 ~ 255 사이의 값을 사용할 수 있습니다.<br>값이 커질수록 더 밝아집니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED제어</font>",
        "byrobot_petrone_v2_flight_drone_light_manual_single_off": "<br>드론의 모든 LED를 끕니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#LED끄기</font>",
        "byrobot_petrone_v2_flight_drone_motor_stop": "<br>모든 모터의 작동을 정지합니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터정지</font>",
        "byrobot_petrone_v2_flight_drone_motorsingle": "<br>지정한 모터를 원하는 빠르기로 회전할 때 사용합니다. 사용 가능한 값의 범위는 0 ~ 4000입니다. 모터의 순서는 '왼쪽 앞', '오른쪽 앞', '오른쪽 뒤', '왼쪽 뒤' 입니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_petrone_v2_flight_drone_motorsingle_input": "<br>지정한 모터(1, 2, 3, 4)를 원하는 빠르기로 회전할 때 사용합니다. 사용 가능한 값의 범위는 0 ~ 4000입니다. 모터의 순서는 '왼쪽 앞', '오른쪽 앞', '오른쪽 뒤', '왼쪽 뒤' 입니다.<br><br><font color='crimson'>#드론</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_petrone_v2_flight_drone_motorsingle_rotation": "<br>지정한 모터를 원하는 빠르기로 회전할 때 사용합니다. 1번 모터와 2번 모터는 역방향도 회전 가능하기 때문에 방향도 선택할 수 있습니다. 사용 가능한 값의 범위는 0 ~ 4000입니다. 모터의 순서는 '왼쪽 앞', '오른쪽 앞', '오른쪽 뒤', '왼쪽 뒤' 입니다.<br><br><font color='crimson'>#자동차</font> <font color='dodgerblue'>#모터제어</font>",
        "byrobot_petrone_v2_flight_drone_value_attitude": "<br>드론의 현재 자세를 각도로 반환합니다. Roll은 좌우 기울기(-90 ~ 90), Pitch는 앞뒤 기울기(-90 ~ 90), Yaw는 회전 각도(-180 ~ 180) 입니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#자세</font>",
        "byrobot_petrone_v2_flight_drone_value_etc": "<br>페트론V2 설정과 관련된 값들과 적외선 통신으로 받은 값을 반환합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#기타</font>",
        "byrobot_petrone_v2_flight_drone_value_imu": "<br>페트론V2 IMU센서와 관련된 값들을 반환합니다.<br>(병진운동) 가속도는 x, y, z축에 대한 중력가속도입니다. 1g = 9.8m/s^2<br>(회전운동) 각속도는 x, y, z축을 기준으로 회전하는 속력을 나타내는 벡터입니다.(pitch, roll, yaw) <br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#IMU센서</font> <font color='crimson'>#가속도</font> <font color='dodgerblue'>#병진운동</font> <font color='crimson'>#각속도</font> <font color='dodgerblue'>#회전운동</font>",
        "byrobot_petrone_v2_flight_drone_value_sensor": "<br>페트론V2 센서와 관련된 값들을 반환합니다.<br>온도 단위=섭씨 도, 해발고도 단위=m, image flow 단위=m, 바닥까지의 거리 단위=m<br>해발고도 값은 대기압의 영향을 받아서 오차범위가 큽니다. 바닥까지 거리의 유효 측정 거리는 2m입니다. image flow값은 일정한 속도와 높이에서 이동할 경우에 유효합니다. 이러한 센서값들을 이용하여 Petrone V2는 호버링(고도 유지) 기능을 수행합니다.<br><br><font color='crimson'>#값</font> <font color='dodgerblue'>#드론</font> <font color='forestgreen'>#센서</font> <font color='crimson'>#온도</font> <font color='dodgerblue'>#해발고도</font> <font color='forestgreen'>#image flow</font> <font color='crimson'>#range</font> <font color='dodgerblue'>#대기압</font> <font color='forestgreen'>#호버링</font>",
        "chocopi_control_button": "버튼이 눌리면 참이 됩니다.<br/><br/>포트번호는 맞추지 않아도 됩니다.<br/>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_control_event": "버튼을 누르거나 뗄 때 처리할 엔트리 블록들을 연결합니다.<br/><br/>포트번호는 맞추지 않아도 됩니다.<br/>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_control_joystick": "조이스틱 좌우, 상하, 볼륨의 값은 0~4095까지 입니다.<br/>따라서 2047 근처가 중간이 됩니다.<br/><br/>포트번호는 맞추지 않아도 됩니다.<br/>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_dc_motor": "DC모터 모듈에는 직류전동기 두개를 연결 할 수 있습니다.<br/> 직류 전동기는 최대 5V로 동작하게 됩니다.<br/>값은 100이 최대(100%)이고 음수를 넣으면 반대 방향으로 회전합니다.<br/><br/>포트번호는 맞추지 않아도 됩니다.<br/>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_led": "LED번호는 LED블록에 연결된 순서이고 1번부터 시작합니다.<br/>RGB값은 0~255사이의 값입니다.<br/>빨강(Red),녹색(Green), 파랑(Blue)순서로  입력합니다.<br/>밝은 LED를 직접보면 눈이 아프니까 값을 0~5정도로 씁니다.<br/><br/>포트번호는 맞추지 않아도 됩니다.<br/>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_motion_photogate_event": "포토게이트는 모션블록에 연결합니다.<br/>포토게이트는 한쪽에서 나온 빛을 맞은 편의 센서가 감지하는 장치입니다.<br/>빛센서를 물체로 가리거나 치우면 시작되는 엔트리 블록을 연결합니다<br/>모션 모듈에는 포토게이트 2개를 연결할 수 있습니다.<br/><br/>포트번호는 맞추지 않아도 됩니다.<br/>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_motion_photogate_status": "포토게이트는 모션블록에 연결합니다.<br/>포토게이트는 한쪽에서 나온 빛을 맞은 편의 센서가 감지하는 장치입니다.<br>물체가 빛센서를 가리면 참</b>이됩니다.<br/><br/>포트번호는 맞추지 않아도 됩니다.<br/>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_motion_photogate_time": "포토게이트는 모션블록에 연결합니다.<br/>포토게이트는 한쪽에서 나온 빛을 맞은 편의 센서가 감지하는 장치입니다.<br>이 블록은 물체가 빛센서를 가리거나 벗어난 시간을 가집니다.<br/>1/10000초까지 측정할 수 있습니다.<br/><br/>포트번호는 맞추지 않아도 됩니다.<br/>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_motion_value": "모션 모듈에는 3개의 적외선 센서가 있습니다.<br/>0~4095사이의 값을 가질 수 있는데 물체가 빛을 많이 반사할 수록 작은 값을 가집니다. <br/>거리를 대략적으로 측정할 수 있습니다. <br/>가속도와 각가속도 값의 범위는 -32768~32767 까지입니다.<br/>가속도를 이용해서 센서의 기울기를 측정할 수도 있습니다.<br/><br/>포트번호는 맞추지 않아도 됩니다.<br/>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_motion_angle": "모션 모듈의 가속도 센서를 이용하여 기울기를 측정합니다.<br/>포트번호는 맞추지 않아도 됩니다.<br/>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_sensor": "온도 값은 섭씨 온도입니다.<br/>습도 값은 백분율로 나타낸 상대습도 값입니다.<br/>빛은 로그스케일로 0~4095사이입니다.<br/>아날로그 값은 0~4095사이입니다.<br/><br/>포트번호는 맞추지 않아도 됩니다.<br>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_servo_motor": "서보모터 모듈에는 4개의 서보모터를 연결 할 수 있습니다.<br/>서보모터는 5V로 동작하게 됩니다.<br/>각도는 0~200도까지 지정할 수 있습니다.<br/>연속회전식 서보모터를 연결하면 각도에 따라 속도가 변하게됩니다.<br/>90~100 사이가 중간값입니다.<br/><br/>포트번호는 맞추지 않아도 됩니다.<br/>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_touch_event": "터치 모듈에는 1~12번의 연결 패드가 있습니다. <br/>만지거나 뗄 때 처리할 엔트리 블록들을 연결합니다.<br/><br/>포트번호는 맞추지 않아도 됩니다.<br/>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_touch_status": "터치 모듈의 패드를 만지면 참이됩니다.<br/><br/>포트번호는 맞추지 않아도 됩니다.<br>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_touch_value": "터치패드에 연결된 물체의 전기용량이 커지면 값이 작아집니다.<br/>여러 명이 손잡고 만지면 더 작은 값이 됩니다.<br/>전기용량이란 물체에 전기를 띈 입자를 얼마나 가지고 있을 수 있는 지를 말합니다.<br/><br/>포트번호는 맞추지 않아도 됩니다.<br/>단, 같은 종류의 모듈을 여러 개 연결하는 경우에만 포트를 지정하면 됩니다.",
        "chocopi_map_range": "예를 들어 설명하면, 컨트럴 블럭의 조이스틱X의 위치에 따라 인형의 위치를 -100에서 100사이로 정해주고 싶다면. 조이스틱X, 0, 4095, -100,100 순서대로 입력합니다.",
        "hamster_gripper": "집게를 열거나 닫습니다.",
        "hamster_release_gripper": "집게의 전원을 끄고 자유롭게 움직일 수 있도록 합니다.",
        "hamster_boolean": "앞으로 기울임: 앞으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>뒤로 기울임: 뒤로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>왼쪽으로 기울임: 왼쪽으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>오른쪽으로 기울임: 오른쪽으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>거꾸로 뒤집음: 거꾸로 뒤집으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>기울이지 않음: 기울이지 않으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 정상: 배터리 잔량이 충분하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 부족: 배터리 잔량이 부족하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 없음: 배터리 잔량이 없으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "hamster_play_note": "선택한 계이름과 옥타브의 음을 소리 냅니다.",
        "hamster_beep": "버저 소리를 짧게 냅니다.",
        "hamster_change_both_wheels_by": "왼쪽과 오른쪽 바퀴의 현재 속도 값(%)에 입력한 값을 각각 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "hamster_change_buzzer_by": "버저 소리의 현재 음 높이(Hz)에 입력한 값을 더합니다. 소수점 둘째 자리까지 입력할 수 있습니다.",
        "hamster_change_output_by": "선택한 외부 확장 포트의 현재 출력 값에 입력한 값을 더합니다. 더한 결과는 외부 확장 포트의 모드에 따라 다음의 범위를 가집니다.<br/>서보 출력: 유효한 값의 범위는 1 ~ 180도, 0이면 PWM 펄스 없이 항상 0을 출력<br/>PWM 출력: 0 ~ 100%, PWM 파형에서 ON 상태의 듀티비(%)<br/>디지털 출력: 0이면 LOW, 0이 아니면 HIGH",
        "hamster_change_tempo_by": "연주하거나 쉬는 속도의 현재 BPM(분당 박자 수)에 입력한 값을 더합니다.",
        "hamster_change_wheel_by": "왼쪽/오른쪽/양쪽 바퀴의 현재 속도 값(%)에 입력한 값을 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "hamster_clear_buzzer": "버저 소리를 끕니다.",
        "hamster_clear_led": "왼쪽/오른쪽/양쪽 LED를 끕니다.",
        "hamster_follow_line_until": "왼쪽/오른쪽/앞쪽/뒤쪽의 검은색/하얀색 선을 따라 이동하다가 교차로를 만나면 정지합니다.",
        "hamster_follow_line_using": "왼쪽/오른쪽/양쪽 바닥 센서를 사용하여 검은색/하얀색 선을 따라 이동합니다.",
        "hamster_hand_found": "근접 센서 앞에 손 또는 물체가 있으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "hamster_move_backward_for_secs": "입력한 시간(초) 동안 뒤로 이동합니다.",
        "hamster_move_forward_for_secs": "입력한 시간(초) 동안 앞으로 이동합니다.",
        "hamster_move_forward_once": "말판 위에서 한 칸 앞으로 이동합니다.",
        "hamster_play_note_for": "선택한 계이름과 옥타브의 음을 입력한 박자만큼 소리 냅니다.",
        "hamster_rest_for": "입력한 박자만큼 쉽니다.",
        "hamster_set_both_wheels_to": "왼쪽과 오른쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 각각 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "hamster_set_buzzer_to": "버저 소리의 음 높이를 입력한 값(Hz)으로 설정합니다. 소수점 둘째 자리까지 입력할 수 있습니다. 숫자 0을 입력하면 버저 소리를 끕니다.",
        "hamster_set_following_speed_to": "선을 따라 이동하는 속도(1 ~ 8)를 설정합니다. 숫자가 클수록 이동하는 속도가 빠릅니다.",
        "hamster_set_led_to": "왼쪽/오른쪽/양쪽 LED를 선택한 색깔로 켭니다.",
        "hamster_set_output_to": "선택한 외부 확장 포트의 출력 값을 입력한 값으로 설정합니다. 입력하는 값은 외부 확장 포트의 모드에 따라 다음의 범위를 가집니다.<br/>서보 출력: 유효한 값의 범위는 1 ~ 180도, 0이면 PWM 펄스 없이 항상 0을 출력<br/>PWM 출력: 0 ~ 100%, PWM 파형에서 ON 상태의 듀티비(%)<br/>디지털 출력: 0이면 LOW, 0이 아니면 HIGH",
        "hamster_set_port_to": "선택한 외부 확장 포트의 입출력 모드를 선택한 모드로 설정합니다.",
        "hamster_set_tempo_to": "연주하거나 쉬는 속도를 입력한 BPM(분당 박자 수)으로 설정합니다.",
        "hamster_set_wheel_to": "왼쪽/오른쪽/양쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "hamster_stop": "양쪽 바퀴를 정지합니다.",
        "hamster_turn_for_secs": "입력한 시간(초) 동안 왼쪽/오른쪽 방향으로 제자리에서 회전합니다.",
        "hamster_turn_once": "말판 위에서 왼쪽/오른쪽 방향으로 제자리에서 90도 회전합니다.",
        "hamster_value": "왼쪽 근접 센서: 왼쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>오른쪽 근접 센서: 오른쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>왼쪽 바닥 센서: 왼쪽 바닥 센서의 값 (값의 범위: 0 ~ 100, 초기값: 0)<br/>오른쪽 바닥 센서: 오른쪽 바닥 센서의 값 (값의 범위: 0 ~ 100, 초기값: 0)<br/>x축 가속도: 가속도 센서의 X축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇이 전진하는 방향이 X축의 양수 방향입니다.<br/>y축 가속도: 가속도 센서의 Y축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 왼쪽 방향이 Y축의 양수 방향입니다.<br/>z축 가속도: 가속도 센서의 Z축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 위쪽 방향이 Z축의 양수 방향입니다.<br/>밝기: 밝기 센서의 값 (값의 범위: 0 ~ 65535, 초기값: 0) 밝을 수록 값이 커집니다.<br/>온도: 로봇 내부의 온도 값 (값의 범위: 섭씨 -40 ~ 88도, 초기값: 0)<br/>신호 세기: 블루투스 무선 통신의 신호 세기 (값의 범위: -128 ~ 0 dBm, 초기값: 0) 신호의 세기가 셀수록 값이 커집니다.<br/>입력 A: 외부 확장 포트 A로 입력되는 신호의 값 (값의 범위: 아날로그 입력 0 ~ 255, 디지털 입력 0 또는 1, 초기값: 0)<br/>입력 B: 외부 확장 포트 B로 입력되는 신호의 값 (값의 범위: 아날로그 입력 0 ~ 255, 디지털 입력 0 또는 1, 초기값: 0)",
        "hamster_s_hand_found": "근접 센서 앞에 손 또는 물체가 있으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "hamster_s_boolean": "앞으로 기울임: 앞으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>뒤로 기울임: 뒤로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>왼쪽으로 기울임: 왼쪽으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>오른쪽으로 기울임: 오른쪽으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>거꾸로 뒤집음: 거꾸로 뒤집으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>기울이지 않음: 기울이지 않으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 정상: 배터리 잔량이 충분하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 부족: 배터리 잔량이 부족하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 없음: 배터리 잔량이 없으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "hamster_s_value": "왼쪽 근접 센서: 왼쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>오른쪽 근접 센서: 오른쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>왼쪽 바닥 센서: 왼쪽 바닥 센서의 값 (값의 범위: 0 ~ 100, 초기값: 0)<br/>오른쪽 바닥 센서: 오른쪽 바닥 센서의 값 (값의 범위: 0 ~ 100, 초기값: 0)<br/>x축 가속도: 가속도 센서의 X축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇이 전진하는 방향이 X축의 양수 방향입니다.<br/>y축 가속도: 가속도 센서의 Y축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 왼쪽 방향이 Y축의 양수 방향입니다.<br/>z축 가속도: 가속도 센서의 Z축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 위쪽 방향이 Z축의 양수 방향입니다.<br/>밝기: 밝기 센서의 값 (값의 범위: 0 ~ 65535, 초기값: 0) 밝을 수록 값이 커집니다.<br/>온도: 로봇 내부의 온도 값 (값의 범위: 섭씨 -40 ~ 88도, 초기값: 0)<br/>신호 세기: 블루투스 무선 통신의 신호 세기 (값의 범위: -128 ~ 0 dBm, 초기값: 0) 신호의 세기가 셀수록 값이 커집니다.<br/>입력 A: 외부 확장 포트 A로 입력되는 신호의 값 (값의 범위: 아날로그 입력 0 ~ 255, 디지털 입력 0 또는 1, 초기값: 0)<br/>입력 B: 외부 확장 포트 B로 입력되는 신호의 값 (값의 범위: 아날로그 입력 0 ~ 255, 디지털 입력 0 또는 1, 초기값: 0)",
        "hamster_s_move_forward_once": "말판 위에서 한 칸 앞으로 이동합니다.",
        "hamster_s_turn_once": "말판 위에서 왼쪽/오른쪽 방향으로 제자리에서 90도 회전합니다.",
        "hamster_s_move_forward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 앞으로 이동합니다.",
        "hamster_s_move_backward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 뒤로 이동합니다.",
        "hamster_s_turn_unit_in_place": "입력한 각도(도)/시간(초)/펄스만큼 왼쪽/오른쪽 방향으로 제자리에서 회전합니다.",
        "hamster_s_pivot_around_unit_in_direction": "왼쪽/오른쪽 펜/바퀴 중심으로 입력한 각도(도)/시간(초)/펄스만큼 앞쪽/뒤쪽 방향으로 회전합니다.",
        "hamster_s_turn_unit_with_radius_in_direction": "왼쪽/오른쪽 펜이 입력한 반지름의 원을 왼쪽/오른쪽에 그리면서 입력한 각도(도)/시간(초)/펄스만큼 앞쪽/뒤쪽 방향으로 회전합니다.",
        "hamster_s_change_both_wheels_by": "왼쪽과 오른쪽 바퀴의 현재 속도 값(%)에 입력한 값을 각각 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "hamster_s_set_both_wheels_to": "왼쪽과 오른쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 각각 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "hamster_s_change_wheel_by": "왼쪽/오른쪽/양쪽 바퀴의 현재 속도 값(%)에 입력한 값을 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "hamster_s_set_wheel_to": "왼쪽/오른쪽/양쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "hamster_s_follow_line_using": "왼쪽/오른쪽/양쪽 바닥 센서를 사용하여 검은색/하얀색 선을 따라 이동합니다.",
        "hamster_s_follow_line_until": "왼쪽/오른쪽/앞쪽/뒤쪽의 검은색/하얀색 선을 따라 이동하다가 교차로를 만나면 정지합니다.",
        "hamster_s_set_following_speed_to": "선을 따라 이동하는 속도(1 ~ 8)를 설정합니다. 숫자가 클수록 이동하는 속도가 빠릅니다.",
        "hamster_s_set_following_gain_to": "선을 따라 이동하는 방향 변화량(1 ~ 8)을 설정합니다. 숫자가 클수록 급커브를 잘 따라가지만 직선에서 좌우로 더 흔들립니다.",
        "hamster_s_stop": "양쪽 바퀴를 정지합니다.",
        "hamster_s_set_led_to": "왼쪽/오른쪽/양쪽 LED를 선택한 색깔로 켭니다.",
        "hamster_s_pick_led": "왼쪽/오른쪽/양쪽 LED를 선택한 색깔로 켭니다.",
        "hamster_s_change_led_by_rgb": "왼쪽/오른쪽/양쪽 LED의 현재 R, G, B 값에 입력한 값을 각각 더합니다.",
        "hamster_s_set_led_to_rgb": "왼쪽/오른쪽/양쪽 LED의 R, G, B 값을 입력한 값으로 각각 설정합니다.",
        "hamster_s_clear_led": "왼쪽/오른쪽/양쪽 LED를 끕니다.",
        "hamster_s_play_sound_times": "선택한 소리를 입력한 횟수만큼 재생합니다.",
        "hamster_s_play_sound_times_until_done": "선택한 소리를 입력한 횟수만큼 재생하고, 재생이 완료될 때까지 기다립니다.",
        "hamster_s_change_buzzer_by": "버저 소리의 현재 음 높이(Hz)에 입력한 값을 더합니다. 소수점 둘째 자리까지 입력할 수 있습니다.",
        "hamster_s_set_buzzer_to": "버저 소리의 음 높이를 입력한 값(Hz)으로 설정합니다. 소수점 둘째 자리까지 입력할 수 있습니다. 숫자 0을 입력하면 버저 소리를 끕니다.",
        "hamster_s_clear_sound": "소리를 끕니다.",
        "hamster_s_play_note": "선택한 계이름과 옥타브의 음을 소리 냅니다.",
        "hamster_s_play_note_for": "선택한 계이름과 옥타브의 음을 입력한 박자만큼 소리 냅니다.",
        "hamster_s_rest_for": "입력한 박자만큼 쉽니다.",
        "hamster_s_change_tempo_by": "연주하거나 쉬는 속도의 현재 BPM(분당 박자 수)에 입력한 값을 더합니다.",
        "hamster_s_set_tempo_to": "연주하거나 쉬는 속도를 입력한 BPM(분당 박자 수)으로 설정합니다.",
        "hamster_s_set_port_to": "선택한 외부 확장 포트의 입출력 모드를 선택한 모드로 설정합니다.",
        "hamster_s_change_output_by": "선택한 외부 확장 포트의 현재 출력 값에 입력한 값을 더합니다. 더한 결과는 외부 확장 포트의 모드에 따라 다음의 범위를 가집니다.<br/>서보 출력: 유효한 값의 범위는 1 ~ 180도, 0이면 PWM 펄스 없이 항상 0을 출력<br/>PWM 출력: 0 ~ 100%, PWM 파형에서 ON 상태의 듀티비(%)<br/>디지털 출력: 0이면 LOW, 0이 아니면 HIGH",
        "hamster_s_set_output_to": "선택한 외부 확장 포트의 출력 값을 입력한 값으로 설정합니다. 입력하는 값은 외부 확장 포트의 모드에 따라 다음의 범위를 가집니다.<br/>서보 출력: 유효한 값의 범위는 1 ~ 180도, 0이면 PWM 펄스 없이 항상 0을 출력<br/>PWM 출력: 0 ~ 100%, PWM 파형에서 ON 상태의 듀티비(%)<br/>디지털 출력: 0이면 LOW, 0이 아니면 HIGH",
        "hamster_s_gripper": "집게를 열거나 닫습니다.",
        "hamster_s_release_gripper": "집게의 전원을 끄고 자유롭게 움직일 수 있도록 합니다.",
        "hamster_s_write_serial": "시리얼 통신으로 글자를 전송합니다.",
        "hamster_s_read_serial_until": "시리얼 통신으로 받은 글자를 읽습니다.",
        "hamster_s_set_serial_rate_to": "시리얼 통신의 속도를 설정합니다.",
        "neobot_sensor_value": "IN1 ~ IN3 포트 및 리모컨에서 입력되는 값 그리고 배터리 정보를 0부터 255의 숫자로 표시합니다.",
        "neobot_sensor_convert_scale": "선택한 포트 입력값의 변화를 특정범위의 값으로 표현범위를 조절할 수 있습니다.",
        "neobot_left_motor": "L모터 포트에 연결한 모터의 회전방향 및 속도를 설정합니다.",
        "neobot_stop_left_motor": "L모터 포트에 연결한 모터를 정지합니다.",
        "neobot_right_motor": "R모터 포트에 연결한 모터의 회전방향 및 속도를 설정합니다.",
        "neobot_stop_right_motor": "R모터 포트에 연결한 모터를 정지합니다.",
        "neobot_all_motor": "L모터 및 R모터 포트에 2개 모터를 연결하여 바퀴로 활용할 때 전, 후, 좌, 우 이동 방향 및 속도, 시간을 설정할 수 있습니다.",
        "neobot_stop_all_motor": "L모터 및 R모터에 연결한 모터를 모두 정지합니다.",
        "neobot_set_servo": "OUT1 ~ OUT3에 서보모터를 연결했을 때 0도 ~ 180도 범위 내에서 각도를 조절할 수 있습니다.",
        "neobot_set_output": "OUT1 ~ OUT3에 라이팅블록 및 전자회로를 연결했을 때 출력 전압을 설정할 수 있습니다.</br>0은 0V, 1 ~ 255는 2.4 ~ 4.96V의 전압을 나타냅니다.",
        "neobot_set_fnd": "FND로 0~99 까지의 숫자를 표시할 수 있습니다.",
        "neobot_set_fnd_off": "FND에 표시한 숫자를 끌 수 있습니다.",
        "neobot_play_note_for": "주파수 발진 방법을 이용해 멜로디에 반음 단위의 멜로디 음을 발생시킬 수 있습니다.",
        "roboid_hamster_beep": "버저 소리를 짧게 냅니다.",
        "roboid_hamster_change_both_wheels_by": "왼쪽과 오른쪽 바퀴의 현재 속도 값(%)에 입력한 값을 각각 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "roboid_hamster_change_buzzer_by": "버저 소리의 현재 음 높이(Hz)에 입력한 값을 더합니다. 소수점 둘째 자리까지 입력할 수 있습니다.",
        "roboid_hamster_change_output_by": "선택한 외부 확장 포트의 현재 출력 값에 입력한 값을 더합니다. 더한 결과는 외부 확장 포트의 모드에 따라 다음의 범위를 가집니다.<br/>서보 출력: 유효한 값의 범위는 1 ~ 180도, 0이면 PWM 펄스 없이 항상 0을 출력<br/>PWM 출력: 0 ~ 100%, PWM 파형에서 ON 상태의 듀티비(%)<br/>디지털 출력: 0이면 LOW, 0이 아니면 HIGH",
        "roboid_hamster_change_tempo_by": "연주하거나 쉬는 속도의 현재 BPM(분당 박자 수)에 입력한 값을 더합니다.",
        "roboid_hamster_change_wheel_by": "왼쪽/오른쪽/양쪽 바퀴의 현재 속도 값(%)에 입력한 값을 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "roboid_hamster_clear_buzzer": "버저 소리를 끕니다.",
        "roboid_hamster_clear_led": "왼쪽/오른쪽/양쪽 LED를 끕니다.",
        "roboid_hamster_follow_line_until": "왼쪽/오른쪽/앞쪽/뒤쪽의 검은색/하얀색 선을 따라 이동하다가 교차로를 만나면 정지합니다.",
        "roboid_hamster_follow_line_using": "왼쪽/오른쪽/양쪽 바닥 센서를 사용하여 검은색/하얀색 선을 따라 이동합니다.",
        "roboid_hamster_hand_found": "근접 센서 앞에 손 또는 물체가 있으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "roboid_hamster_move_backward_for_secs": "입력한 시간(초) 동안 뒤로 이동합니다.",
        "roboid_hamster_move_forward_for_secs": "입력한 시간(초) 동안 앞으로 이동합니다.",
        "roboid_hamster_move_forward_once": "말판 위에서 한 칸 앞으로 이동합니다.",
        "roboid_hamster_play_note_for": "선택한 계이름과 옥타브의 음을 입력한 박자만큼 소리 냅니다.",
        "roboid_hamster_rest_for": "입력한 박자만큼 쉽니다.",
        "roboid_hamster_set_both_wheels_to": "왼쪽과 오른쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 각각 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "roboid_hamster_set_buzzer_to": "버저 소리의 음 높이를 입력한 값(Hz)으로 설정합니다. 소수점 둘째 자리까지 입력할 수 있습니다. 숫자 0을 입력하면 버저 소리를 끕니다.",
        "roboid_hamster_set_following_speed_to": "선을 따라 이동하는 속도(1 ~ 8)를 설정합니다. 숫자가 클수록 이동하는 속도가 빠릅니다.",
        "roboid_hamster_set_led_to": "왼쪽/오른쪽/양쪽 LED를 선택한 색깔로 켭니다.",
        "roboid_hamster_set_output_to": "선택한 외부 확장 포트의 출력 값을 입력한 값으로 설정합니다. 입력하는 값은 외부 확장 포트의 모드에 따라 다음의 범위를 가집니다.<br/>서보 출력: 유효한 값의 범위는 1 ~ 180도, 0이면 PWM 펄스 없이 항상 0을 출력<br/>PWM 출력: 0 ~ 100%, PWM 파형에서 ON 상태의 듀티비(%)<br/>디지털 출력: 0이면 LOW, 0이 아니면 HIGH",
        "roboid_hamster_set_port_to": "선택한 외부 확장 포트의 입출력 모드를 선택한 모드로 설정합니다.",
        "roboid_hamster_set_tempo_to": "연주하거나 쉬는 속도를 입력한 BPM(분당 박자 수)으로 설정합니다.",
        "roboid_hamster_set_wheel_to": "왼쪽/오른쪽/양쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "roboid_hamster_stop": "양쪽 바퀴를 정지합니다.",
        "roboid_hamster_turn_for_secs": "입력한 시간(초) 동안 왼쪽/오른쪽 방향으로 제자리에서 회전합니다.",
        "roboid_hamster_turn_once": "말판 위에서 왼쪽/오른쪽 방향으로 제자리에서 90도 회전합니다.",
        "roboid_hamster_value": "왼쪽 근접 센서: 왼쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>오른쪽 근접 센서: 오른쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>왼쪽 바닥 센서: 왼쪽 바닥 센서의 값 (값의 범위: 0 ~ 100, 초기값: 0)<br/>오른쪽 바닥 센서: 오른쪽 바닥 센서의 값 (값의 범위: 0 ~ 100, 초기값: 0)<br/>x축 가속도: 가속도 센서의 X축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇이 전진하는 방향이 X축의 양수 방향입니다.<br/>y축 가속도: 가속도 센서의 Y축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 왼쪽 방향이 Y축의 양수 방향입니다.<br/>z축 가속도: 가속도 센서의 Z축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 위쪽 방향이 Z축의 양수 방향입니다.<br/>밝기: 밝기 센서의 값 (값의 범위: 0 ~ 65535, 초기값: 0) 밝을 수록 값이 커집니다.<br/>온도: 로봇 내부의 온도 값 (값의 범위: 섭씨 -40 ~ 88도, 초기값: 0)<br/>신호 세기: 블루투스 무선 통신의 신호 세기 (값의 범위: -128 ~ 0 dBm, 초기값: 0) 신호의 세기가 셀수록 값이 커집니다.<br/>입력 A: 외부 확장 포트 A로 입력되는 신호의 값 (값의 범위: 아날로그 입력 0 ~ 255, 디지털 입력 0 또는 1, 초기값: 0)<br/>입력 B: 외부 확장 포트 B로 입력되는 신호의 값 (값의 범위: 아날로그 입력 0 ~ 255, 디지털 입력 0 또는 1, 초기값: 0)",
        "roboid_turtle_button_state": "등 버튼을 클릭했으면/더블클릭했으면/길게 눌렀으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "roboid_turtle_change_buzzer_by": "버저 소리의 현재 음 높이(Hz)에 입력한 값을 더합니다. 소수점 둘째 자리까지 입력할 수 있습니다.",
        "roboid_turtle_change_head_led_by_rgb": "머리 LED의 현재 R, G, B 값에 입력한 값을 각각 더합니다.",
        "roboid_turtle_change_tempo_by": "연주하거나 쉬는 속도의 현재 BPM(분당 박자 수)에 입력한 값을 더합니다.",
        "roboid_turtle_change_wheel_by": "왼쪽/오른쪽/양쪽 바퀴의 현재 속도 값(%)에 입력한 값을 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "roboid_turtle_change_wheels_by_left_right": "왼쪽과 오른쪽 바퀴의 현재 속도 값(%)에 입력한 값을 각각 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "roboid_turtle_clear_head_led": "머리 LED를 끕니다.",
        "roboid_turtle_clear_sound": "소리를 끕니다.",
        "roboid_turtle_cross_intersection": "검은색 교차로에서 잠시 앞으로 이동한 후 검은색 선을 찾아 다시 이동합니다.",
        "roboid_turtle_follow_line": "하얀색 바탕 위에서 선택한 색깔의 선을 따라 이동합니다.",
        "roboid_turtle_follow_line_until": "하얀색 바탕 위에서 검은색 선을 따라 이동하다가 선택한 색깔을 컬러 센서가 감지하면 정지합니다.",
        "roboid_turtle_follow_line_until_black": "하얀색 바탕 위에서 선택한 색깔의 선을 따라 이동하다가 컬러 센서가 검은색을 감지하면 정지합니다.",
        "roboid_turtle_is_color_pattern": "선택한 색깔 패턴을 컬러 센서가 감지하였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "roboid_turtle_move_backward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 뒤로 이동합니다.",
        "roboid_turtle_move_forward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 앞으로 이동합니다.",
        "roboid_turtle_pivot_around_wheel_unit_in_direction": "왼쪽/오른쪽 바퀴 중심으로 입력한 각도(도)/시간(초)/펄스만큼 머리/꼬리 방향으로 회전합니다.",
        "roboid_turtle_play_note": "선택한 계이름과 옥타브의 음을 계속 소리 냅니다.",
        "roboid_turtle_play_note_for_beats": "선택한 계이름과 옥타브의 음을 입력한 박자만큼 소리 냅니다.",
        "roboid_turtle_play_sound_times": "선택한 소리를 입력한 횟수만큼 재생합니다.",
        "roboid_turtle_play_sound_times_until_done": "선택한 소리를 입력한 횟수만큼 재생하고, 재생이 완료될 때까지 기다립니다.",
        "roboid_turtle_rest_for_beats": "입력한 박자만큼 쉽니다.",
        "roboid_turtle_set_buzzer_to": "버저 소리의 음 높이를 입력한 값(Hz)으로 설정합니다. 소수점 둘째 자리까지 입력할 수 있습니다. 숫자 0을 입력하면 소리를 끕니다.",
        "roboid_turtle_set_following_speed_to": "선을 따라 이동하는 속도(1 ~ 8)를 설정합니다. 숫자가 클수록 이동하는 속도가 빠릅니다.",
        "roboid_turtle_set_head_led_to": "머리 LED를 선택한 색깔로 켭니다.",
        "roboid_turtle_set_head_led_to_rgb": "머리 LED의 R, G, B 값을 입력한 값으로 각각 설정합니다.",
        "roboid_turtle_set_tempo_to": "연주하거나 쉬는 속도를 입력한 BPM(분당 박자 수)으로 설정합니다.",
        "roboid_turtle_set_wheel_to": "왼쪽/오른쪽/양쪽 바퀴의 속도를 입력한 값(-400 ~ 400%)으로 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "roboid_turtle_set_wheels_to_left_right": "왼쪽과 오른쪽 바퀴의 속도를 입력한 값(-400 ~ 400%)으로 각각 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "roboid_turtle_stop": "양쪽 바퀴를 정지합니다.",
        "roboid_turtle_touching_color": "선택한 색깔을 컬러 센서가 감지하였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "roboid_turtle_turn_at_intersection": "검은색 교차로에서 잠시 앞으로 이동한 후 제자리에서 왼쪽/오른쪽/뒤쪽으로 회전하고 검은색 선을 찾아 다시 이동합니다.",
        "roboid_turtle_turn_unit_in_place": "입력한 각도(도)/시간(초)/펄스만큼 왼쪽/오른쪽 방향으로 제자리에서 회전합니다.",
        "roboid_turtle_turn_unit_with_radius_in_direction": "입력한 반지름의 원을 그리면서 입력한 각도(도)/시간(초)/펄스만큼 왼쪽/오른쪽, 머리/꼬리 방향으로 회전합니다.",
        "roboid_turtle_value": "색깔 번호: 컬러 센서가 감지한 색깔의 번호 (값의 범위: -1 ~ 8, 초기값: -1)<br/>색깔 패턴: 컬러 센서가 감지한 색깔 패턴의 값 (값의 범위: -1 ~ 88, 초기값: -1)<br/>바닥 센서: 바닥 센서의 값 (값의 범위: 0 ~ 100, 초기값: 0)<br/>버튼: 거북이 등 버튼의 상태 값 (누르면 1, 아니면 0, 초기값: 0)<br/>x축 가속도: 가속도 센서의 X축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇이 전진하는 방향이 X축의 양수 방향입니다.<br/>y축 가속도: 가속도 센서의 Y축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 왼쪽 방향이 Y축의 양수 방향입니다.<br/>z축 가속도: 가속도 센서의 Z축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 위쪽 방향이 Z축의 양수 방향입니다.",
        "roboid_hamster_gripper": "집게를 열거나 닫습니다.",
        "roboid_hamster_release_gripper": "집게의 전원을 끄고 자유롭게 움직일 수 있도록 합니다.",
        "roboid_hamster_boolean": "앞으로 기울임: 앞으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>뒤로 기울임: 뒤로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>왼쪽으로 기울임: 왼쪽으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>오른쪽으로 기울임: 오른쪽으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>거꾸로 뒤집음: 거꾸로 뒤집으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>기울이지 않음: 기울이지 않으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 정상: 배터리 잔량이 충분하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 부족: 배터리 잔량이 부족하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 없음: 배터리 잔량이 없으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "roboid_hamster_play_note": "선택한 계이름과 옥타브의 음을 소리 냅니다.",
        "roboid_hamster_s_hand_found": "근접 센서 앞에 손 또는 물체가 있으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "roboid_hamster_s_boolean": "앞으로 기울임: 앞으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>뒤로 기울임: 뒤로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>왼쪽으로 기울임: 왼쪽으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>오른쪽으로 기울임: 오른쪽으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>거꾸로 뒤집음: 거꾸로 뒤집으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>기울이지 않음: 기울이지 않으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 정상: 배터리 잔량이 충분하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 부족: 배터리 잔량이 부족하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 없음: 배터리 잔량이 없으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "roboid_hamster_s_value": "왼쪽 근접 센서: 왼쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>오른쪽 근접 센서: 오른쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>왼쪽 바닥 센서: 왼쪽 바닥 센서의 값 (값의 범위: 0 ~ 100, 초기값: 0)<br/>오른쪽 바닥 센서: 오른쪽 바닥 센서의 값 (값의 범위: 0 ~ 100, 초기값: 0)<br/>x축 가속도: 가속도 센서의 X축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇이 전진하는 방향이 X축의 양수 방향입니다.<br/>y축 가속도: 가속도 센서의 Y축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 왼쪽 방향이 Y축의 양수 방향입니다.<br/>z축 가속도: 가속도 센서의 Z축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 위쪽 방향이 Z축의 양수 방향입니다.<br/>밝기: 밝기 센서의 값 (값의 범위: 0 ~ 65535, 초기값: 0) 밝을 수록 값이 커집니다.<br/>온도: 로봇 내부의 온도 값 (값의 범위: 섭씨 -40 ~ 88도, 초기값: 0)<br/>신호 세기: 블루투스 무선 통신의 신호 세기 (값의 범위: -128 ~ 0 dBm, 초기값: 0) 신호의 세기가 셀수록 값이 커집니다.<br/>입력 A: 외부 확장 포트 A로 입력되는 신호의 값 (값의 범위: 아날로그 입력 0 ~ 255, 디지털 입력 0 또는 1, 초기값: 0)<br/>입력 B: 외부 확장 포트 B로 입력되는 신호의 값 (값의 범위: 아날로그 입력 0 ~ 255, 디지털 입력 0 또는 1, 초기값: 0)",
        "roboid_hamster_s_move_forward_once": "말판 위에서 한 칸 앞으로 이동합니다.",
        "roboid_hamster_s_turn_once": "말판 위에서 왼쪽/오른쪽 방향으로 제자리에서 90도 회전합니다.",
        "roboid_hamster_s_move_forward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 앞으로 이동합니다.",
        "roboid_hamster_s_move_backward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 뒤로 이동합니다.",
        "roboid_hamster_s_turn_unit_in_place": "입력한 각도(도)/시간(초)/펄스만큼 왼쪽/오른쪽 방향으로 제자리에서 회전합니다.",
        "roboid_hamster_s_pivot_around_unit_in_direction": "왼쪽/오른쪽 펜/바퀴 중심으로 입력한 각도(도)/시간(초)/펄스만큼 앞쪽/뒤쪽 방향으로 회전합니다.",
        "roboid_hamster_s_turn_unit_with_radius_in_direction": "왼쪽/오른쪽 펜이 입력한 반지름의 원을 왼쪽/오른쪽에 그리면서 입력한 각도(도)/시간(초)/펄스만큼 앞쪽/뒤쪽 방향으로 회전합니다.",
        "roboid_hamster_s_change_both_wheels_by": "왼쪽과 오른쪽 바퀴의 현재 속도 값(%)에 입력한 값을 각각 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "roboid_hamster_s_set_both_wheels_to": "왼쪽과 오른쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 각각 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "roboid_hamster_s_change_wheel_by": "왼쪽/오른쪽/양쪽 바퀴의 현재 속도 값(%)에 입력한 값을 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "roboid_hamster_s_set_wheel_to": "왼쪽/오른쪽/양쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "roboid_hamster_s_follow_line_using": "왼쪽/오른쪽/양쪽 바닥 센서를 사용하여 검은색/하얀색 선을 따라 이동합니다.",
        "roboid_hamster_s_follow_line_until": "왼쪽/오른쪽/앞쪽/뒤쪽의 검은색/하얀색 선을 따라 이동하다가 교차로를 만나면 정지합니다.",
        "roboid_hamster_s_set_following_speed_to": "선을 따라 이동하는 속도(1 ~ 8)를 설정합니다. 숫자가 클수록 이동하는 속도가 빠릅니다.",
        "roboid_hamster_s_set_following_gain_to": "선을 따라 이동하는 방향 변화량(1 ~ 8)을 설정합니다. 숫자가 클수록 급커브를 잘 따라가지만 직선에서 좌우로 더 흔들립니다.",
        "roboid_hamster_s_stop": "양쪽 바퀴를 정지합니다.",
        "roboid_hamster_s_set_led_to": "왼쪽/오른쪽/양쪽 LED를 선택한 색깔로 켭니다.",
        "roboid_hamster_s_pick_led": "왼쪽/오른쪽/양쪽 LED를 선택한 색깔로 켭니다.",
        "roboid_hamster_s_change_led_by_rgb": "왼쪽/오른쪽/양쪽 LED의 현재 R, G, B 값에 입력한 값을 각각 더합니다.",
        "roboid_hamster_s_set_led_to_rgb": "왼쪽/오른쪽/양쪽 LED의 R, G, B 값을 입력한 값으로 각각 설정합니다.",
        "roboid_hamster_s_clear_led": "왼쪽/오른쪽/양쪽 LED를 끕니다.",
        "roboid_hamster_s_play_sound_times": "선택한 소리를 입력한 횟수만큼 재생합니다.",
        "roboid_hamster_s_play_sound_times_until_done": "선택한 소리를 입력한 횟수만큼 재생하고, 재생이 완료될 때까지 기다립니다.",
        "roboid_hamster_s_change_buzzer_by": "버저 소리의 현재 음 높이(Hz)에 입력한 값을 더합니다. 소수점 둘째 자리까지 입력할 수 있습니다.",
        "roboid_hamster_s_set_buzzer_to": "버저 소리의 음 높이를 입력한 값(Hz)으로 설정합니다. 소수점 둘째 자리까지 입력할 수 있습니다. 숫자 0을 입력하면 버저 소리를 끕니다.",
        "roboid_hamster_s_clear_sound": "소리를 끕니다.",
        "roboid_hamster_s_play_note": "선택한 계이름과 옥타브의 음을 소리 냅니다.",
        "roboid_hamster_s_play_note_for": "선택한 계이름과 옥타브의 음을 입력한 박자만큼 소리 냅니다.",
        "roboid_hamster_s_rest_for": "입력한 박자만큼 쉽니다.",
        "roboid_hamster_s_change_tempo_by": "연주하거나 쉬는 속도의 현재 BPM(분당 박자 수)에 입력한 값을 더합니다.",
        "roboid_hamster_s_set_tempo_to": "연주하거나 쉬는 속도를 입력한 BPM(분당 박자 수)으로 설정합니다.",
        "roboid_hamster_s_set_port_to": "선택한 외부 확장 포트의 입출력 모드를 선택한 모드로 설정합니다.",
        "roboid_hamster_s_change_output_by": "선택한 외부 확장 포트의 현재 출력 값에 입력한 값을 더합니다. 더한 결과는 외부 확장 포트의 모드에 따라 다음의 범위를 가집니다.<br/>서보 출력: 유효한 값의 범위는 1 ~ 180도, 0이면 PWM 펄스 없이 항상 0을 출력<br/>PWM 출력: 0 ~ 100%, PWM 파형에서 ON 상태의 듀티비(%)<br/>디지털 출력: 0이면 LOW, 0이 아니면 HIGH",
        "roboid_hamster_s_set_output_to": "선택한 외부 확장 포트의 출력 값을 입력한 값으로 설정합니다. 입력하는 값은 외부 확장 포트의 모드에 따라 다음의 범위를 가집니다.<br/>서보 출력: 유효한 값의 범위는 1 ~ 180도, 0이면 PWM 펄스 없이 항상 0을 출력<br/>PWM 출력: 0 ~ 100%, PWM 파형에서 ON 상태의 듀티비(%)<br/>디지털 출력: 0이면 LOW, 0이 아니면 HIGH",
        "roboid_hamster_s_gripper": "집게를 열거나 닫습니다.",
        "roboid_hamster_s_release_gripper": "집게의 전원을 끄고 자유롭게 움직일 수 있도록 합니다.",
        "roboid_hamster_s_write_serial": "시리얼 통신으로 글자를 전송합니다.",
        "roboid_hamster_s_read_serial_until": "시리얼 통신으로 받은 글자를 읽습니다.",
        "roboid_hamster_s_set_serial_rate_to": "시리얼 통신의 속도를 설정합니다.",
        "roboid_turtle_boolean": "앞으로 기울임: 앞으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>뒤로 기울임: 뒤로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>왼쪽으로 기울임: 왼쪽으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>오른쪽으로 기울임: 오른쪽으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>거꾸로 뒤집음: 거꾸로 뒤집으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>기울이지 않음: 기울이지 않으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 정상: 배터리 잔량이 충분하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 부족: 배터리 잔량이 부족하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 없음: 배터리 잔량이 없으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "roboid_turtle_pick_head_led": "머리 LED를 선택한 색깔로 켭니다.",
        "robotis_carCont_sensor_value": "왼쪽 접속 센서 : 접촉(1), 비접촉(0) 값 입니다.<br/>오른쪽 접촉 센서 : 접촉(1), 비접촉(0) 값 입니다.<br/>선택 버튼 상태 : 접촉(1), 비접촉(0) 값 입니다.<br/>최종 소리 감지 횟수 : 마지막 실시간 소리 감지 횟수 값 입니다.<br/>실시간 소리 감지 횟수 : 약 1초 안에 다음 소리가 감지되면 1씩 증가합니다.<br/>왼쪽 적외선 센서 : 물체와 가까울 수록 큰 값 입니다.<br/>오른쪽 적외선 센서 : 물체와 가까울 수록 큰 값 값 입니다.<br/>왼쪽 적외선 센서 캘리브레이션 값 : 적외선 센서의 캘리브레이션 값 입니다.<br/>오른쪽 적외선 센서 캘리브레이션 값 : 적외선 센서의 캘리브레이션 값 입니다.<br/>(*캘리브레이션 값 - 적외선센서 조정 값)",
        "robotis_carCont_cm_led": "4개의 LED 중 1번 또는 4번 LED 를 켜거나 끕니다.<br/>LED 2번과 3번은 동작 지원하지 않습니다.",
        "robotis_carCont_cm_sound_detected_clear": "최종 소리 감지횟 수를 0 으로 초기화 합니다.",
        "robotis_carCont_aux_motor_speed": "감속모터 속도를 0 ~ 1023 의 값(으)로 정합니다.",
        "robotis_carCont_cm_calibration": "적외선센서 조정 값(http://support.robotis.com/ko/: 자동차로봇> 2. B. 적외선 값 조정)을 직접 정합니다.",
        "robotis_openCM70_sensor_value": "최종 소리 감지 횟수 : 마지막 실시간 소리 감지 횟수 값 입니다.<br/>실시간 소리 감지 횟수 : 약 1초 안에 다음 소리가 감지되면 1씩 증가합니다.<br/>사용자 버튼 상태 : 접촉(1), 비접촉(0) 값 입니다.최종 소리 감지 횟수 : 마지막 실시간 소리 감지 횟수 값 입니다.<br/>실시간 소리 감지 횟수 : 약 1초 안에 다음 소리가 감지되면 1씩 증가합니다.<br/>사용자 버튼 상태 : 접촉(1), 비접촉(0) 값 입니다.",
        "robotis_openCM70_aux_sensor_value": "서보모터 위치 : 0 ~ 1023, 중간 위치의 값은 512 입니다.<br/>적외선센서 :  물체와 가까울 수록 큰 값 입니다.<br/>접촉센서 : 접촉(1), 비접촉(0) 값 입니다.<br/>조도센서(CDS) : 0 ~ 1023, 밝을 수록 큰 값 입니다.<br/>온습도센서(습도) : 0 ~ 100, 습할 수록 큰 값 입니다.<br/>온습도센서(온도) : -20 ~ 100, 온도가 높을 수록 큰 값 입니다.<br/>온도센서 :  -20 ~ 100, 온도가 높을 수록 큰 값 입니다.<br/>초음파센서 : -<br/>자석센서 : 접촉(1), 비접촉(0) 값 입니다.<br/>동작감지센서 : 동작 감지(1), 동작 미감지(0) 값 입니다.<br/>컬러센서 : 알수없음(0), 흰색(1), 검은색(2), 빨간색(3), 녹색(4), 파란색(5), 노란색(6) 값 입니다.<br/>사용자 장치 : 사용자 센서 제작에 대한 설명은 ROBOTIS e-매뉴얼(http://support.robotis.com/ko/)을 참고하세요.",
        "robotis_openCM70_cm_buzzer_index": "음계를 0.1 ~ 5 초 동안 연주 합니다.",
        "robotis_openCM70_cm_buzzer_melody": "멜로디를 연주 합니다.<br/>멜로디를 연속으로 재생하는 경우, 다음 소리가 재생되지 않으면 '흐름 > X 초 기다리기' 블록을 사용하여 기다린 후 실행합니다.",
        "robotis_openCM70_cm_sound_detected_clear": "최종 소리 감지횟 수를 0 으로 초기화 합니다.",
        "robotis_openCM70_cm_led": "제어기의 빨간색, 녹색, 파란색 LED 를 켜거나 끕니다.",
        "robotis_openCM70_cm_motion": "제어기에 다운로드 되어있는 모션을 실행합니다.",
        "robotis_openCM70_aux_motor_speed": "감속모터 속도를 0 ~ 1023 의 값(으)로 정합니다.",
        "robotis_openCM70_aux_servo_mode": "서보모터를 회전모드 또는 관절모드로 정합니다.<br/>한번 설정된 모드는 계속 적용됩니다.<br/>회전모드는 서보모터 속도를 지정하여 서보모터를 회전 시킵니다.<br/>관절모드는 지정한 서보모터 속도로 서보모터 위치를 이동 시킵니다.",
        "robotis_openCM70_aux_servo_speed": "서보모터 속도를 0 ~ 1023 의 값(으)로 정합니다.",
        "robotis_openCM70_aux_servo_position": "서보모터 위치를 0 ~ 1023 의 값(으)로 정합니다.<br/>서보모터 속도와 같이 사용해야 합니다.",
        "robotis_openCM70_aux_led_module": "LED 모듈의 LED 를 켜거나 끕니다.",
        "robotis_openCM70_aux_custom": "사용자 센서 제작에 대한 설명은 ROBOTIS e-매뉴얼(http://support.robotis.com/ko/)을 참고하세요.",
        "robotis_openCM70_cm_custom_value": "컨트롤 테이블 주소를 직접 입력하여 값을 확인 합니다.<br/>컨트롤 테이블 대한 설명은 ROBOTIS e-매뉴얼(http://support.robotis.com/ko/)을 참고하세요.",
        "robotis_openCM70_cm_custom": "컨트롤 테이블 주소를 직접 입력하여 값을 정합니다.<br/>컨트롤 테이블 대한 설명은 ROBOTIS e-매뉴얼(http://support.robotis.com/ko/)을 참고하세요.",
        "sally_touching_color": "선택한 색깔을 컬러 센서가 감지하였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "sally_is_color_pattern": "선택한 색깔 패턴을 컬러 센서가 감지하였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "sally_button_state": "버튼을 클릭했으면/더블클릭했으면/길게 눌렀으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "sally_boolean": "앞으로 기울임: 앞으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>뒤로 기울임: 뒤로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>왼쪽으로 기울임: 왼쪽으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>오른쪽으로 기울임: 오른쪽으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>거꾸로 뒤집음: 거꾸로 뒤집었으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>기울이지 않음: 기울이지 않았으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>두드림: 두드렸으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>자유 낙하: 자유 낙하했으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 정상: 배터리 잔량이 충분하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 부족: 배터리 잔량이 부족하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 없음: 배터리 잔량이 없으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "sally_value": "색깔 번호: 컬러 센서가 감지한 색깔의 번호 (값의 범위: -2 ~ 8, 초기값: -1)<br/>색깔 패턴: 컬러 센서가 감지한 색깔 패턴의 값 (값의 범위: -1 ~ 88, 초기값: -1)<br/>색깔 R: 컬러 센서가 감지한 색깔의 빨간색(R) 성분 (값의 범위: 0 ~ 255, 초기값: 0)<br/>색깔 G: 컬러 센서가 감지한 색깔의 초록색(G) 성분 (값의 범위: 0 ~ 255, 초기값: 0)<br/>색깔 B: 컬러 센서가 감지한 색깔의 파란색(B) 성분 (값의 범위: 0 ~ 255, 초기값: 0)<br/>바닥 센서: 바닥 센서의 값 (값의 범위: 0 ~ 100, 초기값: 0)<br/>버튼: 버튼의 상태 값 (누르면 1, 아니면 0, 초기값: 0)<br/>x축 가속도: 가속도 센서의 X축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇이 전진하는 방향이 X축의 양수 방향입니다.<br/>y축 가속도: 가속도 센서의 Y축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 왼쪽 방향이 Y축의 양수 방향입니다.<br/>z축 가속도: 가속도 센서의 Z축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 위쪽 방향이 Z축의 양수 방향입니다.<br/>온도: 로봇 내부의 온도 값 (값의 범위: 섭씨 -41 ~ 87도, 초기값: 0)<br/>신호 세기: 블루투스 무선 통신의 신호 세기 (값의 범위: -128 ~ 0 dBm, 초기값: 0) 신호의 세기가 셀수록 값이 커집니다.",
        "sally_move_forward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 앞으로 이동합니다.",
        "sally_move_backward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 뒤로 이동합니다.",
        "sally_turn_unit_in_place": "입력한 각도(도)/시간(초)/펄스만큼 왼쪽/오른쪽 방향으로 제자리에서 회전합니다.",
        "sally_pivot_around_wheel_unit_in_direction": "왼쪽/오른쪽 바퀴 중심으로 입력한 각도(도)/시간(초)/펄스만큼 앞쪽/뒤쪽 방향으로 회전합니다.",
        "sally_turn_unit_with_radius_in_direction": "입력한 반지름의 원을 그리면서 입력한 시간(초)/펄스만큼 왼쪽/오른쪽, 앞쪽/뒤쪽 방향으로 회전합니다.",
        "sally_change_wheels_by_left_right": "왼쪽과 오른쪽 바퀴의 현재 속도 값(%)에 입력한 값을 각각 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "sally_set_wheels_to_left_right": "왼쪽과 오른쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 각각 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "sally_change_wheel_by": "왼쪽/오른쪽/양쪽 바퀴의 현재 속도 값(%)에 입력한 값을 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "sally_set_wheel_to": "왼쪽/오른쪽/양쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "sally_follow_line": "하얀색 바탕 위에서 검은색 선을 따라 이동합니다.",
        "sally_follow_line_until": "하얀색 바탕 위에서 검은색 선을 따라 이동하다가 선택한 색깔을 컬러 센서가 감지하면 정지합니다.",
        "sally_cross_intersection": "검은색 교차로에서 잠시 앞으로 이동한 후 검은색 선을 찾습니다.",
        "sally_turn_at_intersection": "검은색 교차로에서 잠시 앞으로 이동한 후 제자리에서 왼쪽/오른쪽/뒤쪽으로 회전하고 검은색 선을 찾습니다.",
        "sally_jump_line": "제자리에서 왼쪽/오른쪽으로 90도 회전한 후 앞으로 이동하다가 컬러 센서가 검은색 선을 감지하면 원래 방향으로 다시 회전합니다.",
        "sally_set_following_speed_to": "선을 따라 이동하는 속도(1 ~ 8)를 설정합니다. 숫자가 클수록 이동하는 속도가 빠릅니다.",
        "sally_stop": "양쪽 바퀴를 정지합니다.",
        "sally_set_led_to": "LED를 선택한 색깔로 켭니다.",
        "sally_pick_led": "LED를 선택한 색깔로 켭니다.",
        "sally_change_led_by_rgb": "LED의 현재 R, G, B 값에 입력한 값을 각각 더합니다.",
        "sally_set_led_to_rgb": "LED의 R, G, B 값을 입력한 값으로 각각 설정합니다.",
        "sally_clear_led": "LED를 끕니다.",
        "sally_play_sound_times": "선택한 소리를 입력한 횟수만큼 재생합니다.",
        "sally_play_sound_times_until_done": "선택한 소리를 입력한 횟수만큼 재생하고, 재생이 완료될 때까지 기다립니다.",
        "sally_change_buzzer_by": "버저 소리의 현재 음 높이(Hz)에 입력한 값을 더합니다. 소수점 둘째 자리까지 입력할 수 있습니다.",
        "sally_set_buzzer_to": "버저 소리의 음 높이를 입력한 값(Hz)으로 설정합니다. 소수점 둘째 자리까지 입력할 수 있습니다. 숫자 0을 입력하면 소리를 끕니다.",
        "sally_clear_sound": "소리를 끕니다.",
        "sally_play_note": "선택한 계이름과 옥타브의 음을 계속 소리 냅니다.",
        "sally_play_note_for_beats": "선택한 계이름과 옥타브의 음을 입력한 박자만큼 소리 냅니다.",
        "sally_rest_for_beats": "입력한 박자만큼 쉽니다.",
        "sally_change_tempo_by": "연주하거나 쉬는 속도의 현재 BPM(분당 박자 수)에 입력한 값을 더합니다.",
        "sally_set_tempo_to": "연주하거나 쉬는 속도를 입력한 BPM(분당 박자 수)으로 설정합니다.",
        "turtle_button_state": "등 버튼을 클릭했으면/더블클릭했으면/길게 눌렀으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "turtle_change_buzzer_by": "버저 소리의 현재 음 높이(Hz)에 입력한 값을 더합니다. 소수점 둘째 자리까지 입력할 수 있습니다.",
        "turtle_change_head_led_by_rgb": "머리 LED의 현재 R, G, B 값에 입력한 값을 각각 더합니다.",
        "turtle_change_tempo_by": "연주하거나 쉬는 속도의 현재 BPM(분당 박자 수)에 입력한 값을 더합니다.",
        "turtle_change_wheel_by": "왼쪽/오른쪽/양쪽 바퀴의 현재 속도 값(%)에 입력한 값을 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "turtle_change_wheels_by_left_right": "왼쪽과 오른쪽 바퀴의 현재 속도 값(%)에 입력한 값을 각각 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "turtle_clear_head_led": "머리 LED를 끕니다.",
        "turtle_clear_sound": "소리를 끕니다.",
        "turtle_cross_intersection": "검은색 교차로에서 잠시 앞으로 이동한 후 검은색 선을 찾아 다시 이동합니다.",
        "turtle_follow_line": "하얀색 바탕 위에서 선택한 색깔의 선을 따라 이동합니다.",
        "turtle_follow_line_until": "하얀색 바탕 위에서 검은색 선을 따라 이동하다가 선택한 색깔을 컬러 센서가 감지하면 정지합니다.",
        "turtle_follow_line_until_black": "하얀색 바탕 위에서 선택한 색깔의 선을 따라 이동하다가 컬러 센서가 검은색을 감지하면 정지합니다.",
        "turtle_is_color_pattern": "선택한 색깔 패턴을 컬러 센서가 감지하였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "turtle_move_backward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 뒤로 이동합니다.",
        "turtle_move_forward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 앞으로 이동합니다.",
        "turtle_pivot_around_wheel_unit_in_direction": "왼쪽/오른쪽 바퀴 중심으로 입력한 각도(도)/시간(초)/펄스만큼 머리/꼬리 방향으로 회전합니다.",
        "turtle_play_note": "선택한 계이름과 옥타브의 음을 계속 소리 냅니다.",
        "turtle_play_note_for_beats": "선택한 계이름과 옥타브의 음을 입력한 박자만큼 소리 냅니다.",
        "turtle_play_sound_times": "선택한 소리를 입력한 횟수만큼 재생합니다.",
        "turtle_play_sound_times_until_done": "선택한 소리를 입력한 횟수만큼 재생하고, 재생이 완료될 때까지 기다립니다.",
        "turtle_rest_for_beats": "입력한 박자만큼 쉽니다.",
        "turtle_set_buzzer_to": "버저 소리의 음 높이를 입력한 값(Hz)으로 설정합니다. 소수점 둘째 자리까지 입력할 수 있습니다. 숫자 0을 입력하면 소리를 끕니다.",
        "turtle_set_following_speed_to": "선을 따라 이동하는 속도(1 ~ 8)를 설정합니다. 숫자가 클수록 이동하는 속도가 빠릅니다.",
        "turtle_set_head_led_to": "머리 LED를 선택한 색깔로 켭니다.",
        "turtle_set_head_led_to_rgb": "머리 LED의 R, G, B 값을 입력한 값으로 각각 설정합니다.",
        "turtle_set_tempo_to": "연주하거나 쉬는 속도를 입력한 BPM(분당 박자 수)으로 설정합니다.",
        "turtle_set_wheel_to": "왼쪽/오른쪽/양쪽 바퀴의 속도를 입력한 값(-400 ~ 400%)으로 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "turtle_set_wheels_to_left_right": "왼쪽과 오른쪽 바퀴의 속도를 입력한 값(-400 ~ 400%)으로 각각 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "turtle_stop": "양쪽 바퀴를 정지합니다.",
        "turtle_touching_color": "선택한 색깔을 컬러 센서가 감지하였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "turtle_turn_at_intersection": "검은색 교차로에서 잠시 앞으로 이동한 후 제자리에서 왼쪽/오른쪽/뒤쪽으로 회전하고 검은색 선을 찾아 다시 이동합니다.",
        "turtle_turn_unit_in_place": "입력한 각도(도)/시간(초)/펄스만큼 왼쪽/오른쪽 방향으로 제자리에서 회전합니다.",
        "turtle_turn_unit_with_radius_in_direction": "입력한 반지름의 원을 그리면서 입력한 각도(도)/시간(초)/펄스만큼 왼쪽/오른쪽, 머리/꼬리 방향으로 회전합니다.",
        "turtle_value": "색깔 번호: 컬러 센서가 감지한 색깔의 번호 (값의 범위: -1 ~ 8, 초기값: -1)<br/>색깔 패턴: 컬러 센서가 감지한 색깔 패턴의 값 (값의 범위: -1 ~ 88, 초기값: -1)<br/>바닥 센서: 바닥 센서의 값 (값의 범위: 0 ~ 100, 초기값: 0)<br/>버튼: 거북이 등 버튼의 상태 값 (누르면 1, 아니면 0, 초기값: 0)<br/>x축 가속도: 가속도 센서의 X축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇이 전진하는 방향이 X축의 양수 방향입니다.<br/>y축 가속도: 가속도 센서의 Y축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 왼쪽 방향이 Y축의 양수 방향입니다.<br/>z축 가속도: 가속도 센서의 Z축 값 (값의 범위: -32768 ~ 32767, 초기값: 0) 로봇의 위쪽 방향이 Z축의 양수 방향입니다.",
        "turtle_boolean": "앞으로 기울임: 앞으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>뒤로 기울임: 뒤로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>왼쪽으로 기울임: 왼쪽으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>오른쪽으로 기울임: 오른쪽으로 기울이면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>거꾸로 뒤집음: 거꾸로 뒤집으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>기울이지 않음: 기울이지 않으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 정상: 배터리 잔량이 충분하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 부족: 배터리 잔량이 부족하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 없음: 배터리 잔량이 없으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "turtle_pick_head_led": "머리 LED를 선택한 색깔로 켭니다.",
        "uoalbert_value": "왼쪽 근접 센서: 왼쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>오른쪽 근접 센서: 오른쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>x축 가속도: 가속도 센서의 X축 값 (값의 범위: -8192 ~ 8191, 초기값: 0) 로봇이 전진하는 방향이 X축의 양수 방향입니다.<br/>y축 가속도: 가속도 센서의 Y축 값 (값의 범위: -8192 ~ 8191, 초기값: 0) 로봇의 왼쪽 방향이 Y축의 양수 방향입니다.<br/>z축 가속도: 가속도 센서의 Z축 값 (값의 범위: -8192 ~ 8191, 초기값: 0) 로봇의 위쪽 방향이 Z축의 양수 방향입니다.<br/>터치: 터치 센서의 값 (터치하면 1, 아니면 0, 초기값: 0)<br/>OID: OID 센서의 값 (값의 범위: -1 ~ 65535, 초기값: -1)<br/>x 위치: 말판 위에서 로봇의 위치 x좌표 값 (값의 범위: -1 ~ 39999, 초기값: -1)<br/>y 위치: 말판 위에서 로봇의 위치 y좌표 값 (값의 범위: -1 ~ 39999, 초기값: -1)<br/>밝기: 밝기 센서의 값 (값의 범위: 0 ~ 65535, 초기값: 0) 밝을 수록 값이 커집니다.<br/>온도: 로봇 내부의 온도 값 (값의 범위: 섭씨 -40 ~ 88도, 초기값: 0)<br/>신호 세기: 블루투스 무선 통신의 신호 세기 (값의 범위: -128 ~ 0 dBm, 초기값: 0) 신호의 세기가 셀수록 값이 커집니다.",
        "uoalbert_hand_found": "근접 센서 앞에 손 또는 물체가 있으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "uoalbert_touch_state": "터치 센서를 클릭했으면/길게 눌렀으면/아주 길게 눌렀으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "uoalbert_is_oid": "OID 센서가 감지한 OID 값이 입력한 숫자와 같으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "uoalbert_boolean": "앞으로 기울임: 앞으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>뒤로 기울임: 뒤로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>왼쪽으로 기울임: 왼쪽으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>오른쪽으로 기울임: 오른쪽으로 기울였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>거꾸로 뒤집음: 거꾸로 뒤집었으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>기울이지 않음: 기울이지 않았으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 정상: 배터리 잔량이 충분하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 부족: 배터리 잔량이 부족하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 없음: 배터리 잔량이 없으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "uoalbert_move_forward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 앞으로 이동합니다.",
        "uoalbert_move_backward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 뒤로 이동합니다.",
        "uoalbert_turn_unit_in_place": "입력한 각도(도)/시간(초)/펄스만큼 왼쪽/오른쪽 방향으로 제자리에서 회전합니다.",
        "uoalbert_pivot_around_unit_in_direction": "왼쪽/오른쪽 바퀴 중심으로 입력한 각도(도)/시간(초)/펄스만큼 앞쪽/뒤쪽 방향으로 회전합니다.",
        "uoalbert_change_both_wheels_by": "왼쪽과 오른쪽 바퀴의 현재 속도 값(%)에 입력한 값을 각각 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "uoalbert_set_both_wheels_to": "왼쪽과 오른쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 각각 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "uoalbert_change_wheel_by": "왼쪽/오른쪽/양쪽 바퀴의 현재 속도 값(%)에 입력한 값을 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "uoalbert_set_wheel_to": "왼쪽/오른쪽/양쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "uoalbert_stop": "양쪽 바퀴를 정지합니다.",
        "uoalbert_set_board_size": "말판의 폭과 높이를 입력한 값으로 설정합니다.",
        "uoalbert_set_eye_to": "왼쪽/오른쪽/양쪽 눈을 선택한 색깔로 켭니다.",
        "uoalbert_pick_eye": "왼쪽/오른쪽/양쪽 눈을 선택한 색깔로 켭니다.",
        "uoalbert_change_eye_by_rgb": "왼쪽/오른쪽/양쪽 눈의 현재 R, G, B 값에 입력한 값을 각각 더합니다.",
        "uoalbert_set_eye_to_rgb": "왼쪽/오른쪽/양쪽 눈의 R, G, B 값을 입력한 값으로 각각 설정합니다.",
        "uoalbert_clear_eye": "왼쪽/오른쪽/양쪽 눈을 끕니다.",
        "uoalbert_play_sound_times": "선택한 소리를 입력한 횟수만큼 재생합니다.",
        "uoalbert_play_sound_times_until_done": "선택한 소리를 입력한 횟수만큼 재생하고, 재생이 완료될 때까지 기다립니다.",
        "uoalbert_change_buzzer_by": "버저 소리의 현재 음 높이(Hz)에 입력한 값을 더합니다. 소수점 둘째 자리까지 입력할 수 있습니다.",
        "uoalbert_set_buzzer_to": "버저 소리의 음 높이를 입력한 값(Hz)으로 설정합니다. 소수점 둘째 자리까지 입력할 수 있습니다. 숫자 0을 입력하면 버저 소리를 끕니다.",
        "uoalbert_clear_sound": "소리를 끕니다.",
        "uoalbert_play_note": "선택한 계이름과 옥타브의 음을 계속 소리 냅니다.",
        "uoalbert_play_note_for": "선택한 계이름과 옥타브의 음을 입력한 박자만큼 소리 냅니다.",
        "uoalbert_rest_for": "입력한 박자만큼 쉽니다.",
        "uoalbert_change_tempo_by": "연주하거나 쉬는 속도의 현재 BPM(분당 박자 수)에 입력한 값을 더합니다.",
        "uoalbert_set_tempo_to": "연주하거나 쉬는 속도를 입력한 BPM(분당 박자 수)으로 설정합니다.",
        "zerone_is_gesture": "선택한 제스처를 제스처 센서가 감지하였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "zerone_touching_color": "선택한 색깔을 컬러 센서가 감지하였으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "zerone_boolean": "배터리 정상: 배터리 잔량이 충분하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 부족: 배터리 잔량이 부족하면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.<br/>배터리 없음: 배터리 잔량이 없으면 '참'으로 판단하고, 아니면 '거짓'으로 판단합니다.",
        "zerone_value": "왼쪽 근접 센서: 왼쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>오른쪽 근접 센서: 오른쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>앞쪽 근접 센서: 앞쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>뒤쪽 근접 센서: 뒤쪽 근접 센서의 값 (값의 범위: 0 ~ 255, 초기값: 0)<br/>제스처: 제스처 센서가 감지한 제스처의 번호 (값의 범위: -1 ~ 6, 초기값: -1)<br/>색깔 번호: 컬러 센서가 감지한 색깔의 번호 (값의 범위: -1 ~ 6, 초기값: -1)<br/>색깔 R: 컬러 센서가 감지한 색깔의 빨간색(R) 성분 (값의 범위: 0 ~ 255, 초기값: 0)<br/>색깔 G: 컬러 센서가 감지한 색깔의 초록색(G) 성분 (값의 범위: 0 ~ 255, 초기값: 0)<br/>색깔 B: 컬러 센서가 감지한 색깔의 파란색(B) 성분 (값의 범위: 0 ~ 255, 초기값: 0)<br/>신호 세기: 블루투스 무선 통신의 신호 세기 (값의 범위: -128 ~ 0 dBm, 초기값: 0) 신호의 세기가 셀수록 값이 커집니다.",
        "zerone_start_sensor": "센서의 모드를 제스처 센서와 컬러 센서 중에서 선택합니다.",
        "zerone_move_forward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 앞으로 이동합니다.",
        "zerone_move_backward_unit": "입력한 거리(cm)/시간(초)/펄스만큼 뒤로 이동합니다.",
        "zerone_turn_unit_in_place": "입력한 각도(도)/시간(초)/펄스만큼 왼쪽/오른쪽 방향으로 제자리에서 회전합니다.",
        "zerone_change_both_wheels_by": "왼쪽과 오른쪽 바퀴의 현재 속도 값(%)에 입력한 값을 각각 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "zerone_set_both_wheels_to": "왼쪽과 오른쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 각각 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "zerone_change_wheel_by": "왼쪽/오른쪽/양쪽 바퀴의 현재 속도 값(%)에 입력한 값을 더합니다. 더한 결과가 양수 값이면 바퀴가 앞으로 회전하고, 음수 값이면 뒤로 회전합니다.",
        "zerone_set_wheel_to": "왼쪽/오른쪽/양쪽 바퀴의 속도를 입력한 값(-100 ~ 100%)으로 설정합니다. 양수 값을 입력하면 바퀴가 앞으로 회전하고, 음수 값을 입력하면 뒤로 회전합니다. 숫자 0을 입력하면 정지합니다.",
        "zerone_stop": "양쪽 바퀴를 정지합니다.",
        "zerone_set_led_to": "선택한 LED를 선택한 색깔로 켭니다.",
        "zerone_pick_led": "선택한 LED를 선택한 색깔로 켭니다.",
        "zerone_change_led_by_rgb": "선택한 LED의 현재 R, G, B 값에 입력한 값을 각각 더합니다.",
        "zerone_set_led_to_rgb": "선택한 LED의 R, G, B 값을 입력한 값으로 각각 설정합니다.",
        "zerone_clear_led": "선택한 LED를 끕니다.",
        "zerone_play_sound_times": "선택한 소리를 입력한 횟수만큼 재생합니다.",
        "zerone_play_sound_times_until_done": "선택한 소리를 입력한 횟수만큼 재생하고, 재생이 완료될 때까지 기다립니다.",
        "zerone_change_buzzer_by": "버저 소리의 현재 음 높이(Hz)에 입력한 값을 더합니다. 소수점 첫째 자리까지 입력할 수 있습니다.",
        "zerone_set_buzzer_to": "버저 소리의 음 높이를 입력한 값(Hz)으로 설정합니다. 소수점 첫째 자리까지 입력할 수 있습니다. 숫자 0을 입력하면 소리를 끕니다.",
        "zerone_clear_sound": "소리를 끕니다.",
        "zerone_play_note": "선택한 계이름과 옥타브의 음을 계속 소리 냅니다.",
        "zerone_play_note_for": "선택한 계이름과 옥타브의 음을 입력한 박자만큼 소리 냅니다.",
        "zerone_rest_for": "입력한 박자만큼 쉽니다.",
        "zerone_change_tempo_by": "연주하거나 쉬는 속도의 현재 BPM(분당 박자 수)에 입력한 값을 더합니다.",
        "zerone_set_tempo_to": "연주하거나 쉬는 속도를 입력한 BPM(분당 박자 수)으로 설정합니다."
    },
    "video_object_params": {
        "person": "사람",
        "bicycle": "자전거",
        "car": "자동차",
        "motorcycle": "오토바이",
        "airplane": "비행기",
        "bus": "버스",
        "train": "기차",
        "truck": "트럭",
        "boat": "보트",
        "traffic light": "신호등",
        "fire hydrant": "소화전",
        "stop sign": "정지 표지판",
        "parking meter": "주차 미터기",
        "bench": "벤치",
        "bird": "새",
        "cat": "고양이",
        "dog": "개",
        "horse": "말",
        "sheep": "양",
        "cow": "소",
        "elephant": "코끼리",
        "bear": "곰",
        "zebra": "얼룩말",
        "giraffe": "기린",
        "backpack": "배낭",
        "umbrella": "우산",
        "handbag": "핸드백",
        "tie": "넥타이",
        "suitcase": "여행 가방",
        "frisbee": "원반",
        "skis": "스키",
        "snowboard": "스노우보드",
        "sports ball": "공",
        "kite": "연",
        "baseball bat": "야구 배트",
        "baseball glove": "야구 글러브",
        "skateboard": "스케이트보드",
        "surfboard": "서프보드",
        "tennis racket": "테니스 라켓",
        "bottle": "병",
        "wine glass": "와인잔",
        "cup": "컵",
        "fork": "포크",
        "knife": "나이프",
        "spoon": "숟가락",
        "bowl": "그릇",
        "banana": "바나나",
        "apple": "사과",
        "sandwich": "샌드위치",
        "orange": "오렌지",
        "broccoli": "브로콜리",
        "carrot": "당근",
        "hot dog": "핫도그",
        "pizza": "피자",
        "donut": "도넛",
        "cake": "케이크",
        "chair": "의자",
        "couch": "소파",
        "potted plant": "화분",
        "bed": "침대",
        "dining table": "식탁",
        "toilet": "변기",
        "tv": "텔레비젼",
        "laptop": "노트북",
        "mouse": "마우스",
        "remote": "리모컨",
        "keyboard": "키보드",
        "cell phone": "핸드폰",
        "microwave": "전자레인지",
        "oven": "오븐",
        "toaster": "토스터",
        "sink": "싱크대",
        "refrigerator": "냉장고",
        "book": "책",
        "clock": "시계",
        "vase": "꽃병",
        "scissors": "가위",
        "teddy bear": "테디베어",
        "hair drier": "헤어드라이어",
        "toothbrush": "칫솔"
    },
    "video_body_coord_params": {
        "left_eye": "왼쪽 눈",
        "right_eye": "오른쪽 눈",
        "nose": "코",
        "left_mouth": "왼쪽 입꼬리",
        "right_mouth": "오른쪽 입꼬리",
        "upper_lip": "윗 입술",
        "lower_lip": "아랫 입술",
        "face": "얼굴",
        "neck": "목",
        "left_ear": "왼쪽 귀",
        "right_ear": "오른쪽 귀",
        "left_shoulder": "왼쪽 어깨",
        "left_elbow": "왼쪽 팔꿈치",
        "left_wrist": "왼쪽 손목",
        "left_hip": "왼쪽 엉덩이",
        "left_knee": "왼쪽 무릎",
        "left_ankle": "왼쪽 발목",
        "right_shoulder": "오른쪽 어깨",
        "right_elbow": "오른쪽 팔꿈치",
        "right_wrist": "오른쪽 손목",
        "right_hip": "오른쪽 엉덩이",
        "right_knee": "오른쪽 무릎",
        "right_ankle": "오른쪽 발목"
    },
    "DataAnalytics": {
        "cancel": "취소",
        "save": "저장하기",
        "confirm": "확인",
        "data_analysis": "데이터분석",
        "create_table": "테이블 만들기",
        "data": "데이터",
        "add_table": "테이블 추가하기",
        "show_chart": "차트 보기",
        "legend": "계열",
        "value": "값",
        "summary": "요약",
        "column_name": "열 이름",
        "total": "총합",
        "dashboard": "정보",
        "table": "테이블",
        "chart": "차트",
        "attribute": "열",
        "row": "행",
        "average": "평균",
        "standard_deviation": "표준 편차",
        "maximum": "최댓값",
        "minimum": "최솟값",
        "median": "중간값",
        "average_explain": "해당 열의 모든 값을 더한 후 열의 개수 만큼 나눈 값",
        "standard_deviation_explain": "데이터가 평균을 중심으로 얼마나 퍼져있는지 알려주는 값.\\n0에 가까울 수록 값들이 평균 근처에 집중되어 있다는 것을 의미",
        "maximum_minimum_explain": "해당 열의 가장 큰 값과 가장 작은 값",
        "median_explain": "해당 열의 모든 값을 크기순으로 배열했을 때\\n전체의 중앙에 위치하는 값",
        "add_row_above": "위쪽에 행 추가하기",
        "add_row_below": "아래쪽에 행 추가하기",
        "delete_row": "행 삭제",
        "add_property_left": "왼쪽에 열 추가하기",
        "add_property_right": "오른쪽에 열 추가하기",
        "delete_attribute": "열 삭제",
        "data_alert": "숫자가 아닌 값이 포함된 열은 개수만 확인할 수 있습니다.",
        "attribute_count": "개",
        "row_count": "행",
        "cell_count": "개",
        "count": "개수",
        "add_chart_alert": "추가된 차트가 없습니다.\\n차트를 생성해주세요.",
        "enter_attribute_name": "열 이름을 입력해 주세요.(10자 이내)",
        "placeholder_attribute_name": "열 이름",
        "new_attribute": "새로운 열",
        "chart_title": "차트 제목",
        "remove_chart": "차트 삭제",
        "add_chart_first": "차트를 먼저 추가해주세요.",
        "bar": "막대",
        "line": "선",
        "pie": "원",
        "scatter": "점",
        "histogram": "히스토그램",
        "select_x_axis": "가로축을 선택해주세요.",
        "x_axis": "가로축",
        "y_axis": "세로축",
        "select_y_axis": "세로축을 선택해주세요.",
        "select_y_axis_or_legend": "세로축 혹은 계열을 선택해주세요.",
        "select_legend": "계열을 선택해주세요",
        "cell": "셀",
        "unable_to_express_chart": "차트로 표현할 수 없습니다.",
        "edit_attribute_name": "이름 바꾸기",
        "duplicate_attribute_name_title": "열 이름 변경에 실패하였습니다.",
        "duplicate_attribute_name_content": "같은 이름의 열이 존재합니다.",
        "fail_save_table": "테이블 저장에 실패하였습니다.",
        "duplicate_table_name_content": "같은 이름의 테이블이 존재합니다.",
        "saved_table_title": "저장되었습니다.",
        "saved_table_content": "테이블과 차트의 정보가 저장되었습니다.",
        "empty_table_name_content": "테이블 이름은 빈 칸이 될 수 없습니다",
        "do_not_delete_row": "행을 삭제할 수 없습니다.",
        "rows_cannot_less_one": "테이블에는 한 개 이상의 행이 있어야합니다.",
        "and": "외",
        "other": "건",
        "stop": "작품 정지하기",
        "restart": "작품 다시 시작",
        "pause": "작품 일시정지",
        "max_row_count_error_title": "너무 큰 테이블",
        "max_row_count_error": "테이블의 셀이 30,000개 이상이면\r\n테이블을 불러올 수는 있지만, 편집할 수는 없습니다.\r\n큰 테이블의 편집은 별도 프로그램을 사용해 주세요.",
        "attributes_text": "%1 외 %2개의 속성",
        "duplicate": "복사",
        "copy": "복사",
        "delete": "삭제",
        "paste": "붙여넣기",
        "cut": "잘라내기",
        "download": "PC에 저장",
        "download_table": "테이블을 엑셀 파일로 다운로드",
        "confirm_content": "변경된 테이블과 차트를 저장할까요?",
        "please_add_table": "테이블을 먼저 추가해 주세요.",
        "load_data_analytics": "테이블 불러오기",
        "summary_table_description": "테이블에서 열을 기준으로 한 기초 통계량입니다.",
        "not_exist_chart": "추가한 차트가 없습니다.",
        "please_add_chart": "차트를 먼저 추가해 주세요.",
        "chart_name": "차트 이름",
        "remove_confirm_content": "테이블을 삭제할까요?",
        "not_editable_content": "테이블의 셀이 30,000개 이상이라서\r\n엔트리에서 편집할 수 없어요.",
        "limit_cell_count_title": "행/열 개수 제한",
        "limit_cell_count_content": "행 또는 열을 더 이상 추가할 수 없습니다.\r\n엔트리에서는 최대 30,000개의 셀까지의 \r\n테이블만 편집할 수 있습니다.",
        "number_of_bins": "계급 수",
        "bin_width": "계급 폭",
        "bin_boundary": "계급 경계",
        "left_closed": "왼쪽 닫힘",
        "right_closed": "오른쪽 닫힘",
        "ascending": "오름차순",
        "default": "원래대로",
        "quantity": "개수",
        "in_order": "순서",
        "not_distinguished": "구분하지 않음",
        "select_table": "먼저 테이블을 추가해 주세요."
    },
    "AiLearning": {
        "equation": "회귀식",
        "predict": "예측 속성",
        "cluster_number": "군집",
        "centriod": "중심점",
        "class": "클래스",
        "show": "보이기",
        "hide": "숨기기",
        "open": "열기",
        "close": "닫기",
        "probability": "신뢰도",
        "neighbor_count": "이웃 개수",
        "cluster_option_centroids_kmpp": "가장 먼 거리",
        "cluster_option_centroids_random": "무작위",
        "model_attr_str": "핵심 속성",
        "model_status_0": "상태: 준비",
        "model_status_1": "상태: 학습중",
        "model_status_2": "상태: 학습완료",
        "model_status_3": "상태: 모델없음",
        "train_param_learningRate": "학습률",
        "train_param_epochs": "세대",
        "train_param_validationRate": "테스트 데이터 비율",
        "chart_title": "모델 차트 창"
    },
    "Category": {
        "entrybot_friends": "엔트리봇 친구들",
        "people": "사람",
        "animal": "동물",
        "plant": "식물",
        "vehicles": "탈것",
        "architect": "건물",
        "food": "음식",
        "environment": "환경",
        "stuff": "물건",
        "fantasy": "판타지",
        "interface": "인터페이스",
        "background": "배경",
        "animal_flying": "하늘",
        "animal_land": "땅",
        "animal_water": "물",
        "plant_flower": "꽃",
        "plant_grass": "풀",
        "plant_tree": "나무",
        "plant_others": "기타",
        "vehicles_flying": "하늘",
        "vehicles_land": "땅",
        "vehicles_water": "물",
        "architect_building": "건축물",
        "architect_monument": "기념물",
        "architect_others": "기타",
        "food_vegetables": "과일/채소",
        "food_meat": "고기",
        "food_drink": "음료",
        "food_others": "기타",
        "environment_nature": "자연",
        "environment_space": "우주",
        "environment_others": "기타",
        "stuff_living": "생활",
        "stuff_hobby": "취미",
        "stuff_others": "기타",
        "interface_website": "웹사이트",
        "interface_game": "게임",
        "interface_others": "기타",
        "background_outdoor": "실외",
        "background_indoor": "실내",
        "background_nature": "자연",
        "background_others": "기타"
    },
    "TextCoding": {
        "block_name": "블록명",
        "title_syntax": "문법오류 ",
        "title_converting": "변환오류",
        "message_syntax_default": "문법에 오류가 있습니다",
        "message_syntax_unexpected_token": "문법에 맞지 않는 토큰이 포함되어 있습니다",
        "message_syntax_reserved_token": "사용할 수 없는 변수명입니다.",
        "message_syntax_reserved_token_list": "사용할 수 없는 리스트명입니다.",
        "message_syntax_unexpected_character": "문법에 맞지 않는 문자가 포함되어 있습니다",
        "message_syntax_unexpected_indent": "문법에 맞지 않는 띄어쓰기가 포함되어 있습니다",
        "message_conv_default": "지원하지 않는 코드입니다",
        "message_conv_no_support": "변환될 수 없는 코드입니다",
        "message_conv_no_variable": "변수가 선언되지 않았습니다",
        "message_conv_no_list": "리스트가 선언되지 않았습니다",
        "message_conv_no_object": "객체는 지원되지 않습니다",
        "message_conv_no_function": "함수가 변환될 수 없습니다",
        "message_conv_no_entry_event_function": "엔트리 이벤트 함수는 다른 함수 안에 존재할 수 없습니다.",
        "message_conv_undefined_function": "정의되지 않은 명령어 입니다. 명령어가 올바르게 입력되었는지 확인해주세요.",
        "message_conv_is_expect1": "올바르지 않은 문법입니다. ",
        "message_conv_is_expect2": " 가 올바르게 입력되었는지 확인해주세요.",
        "message_conv_instead": "올바르지 않은 문법입니다. %1 대신 %2 가 필요합니다.",
        "message_conv_is_wrong1": "올바르지 않은 문법입니다. ",
        "message_conv_is_wrong2": "(은/는) 올 수 없는 위치입니다.",
        "message_conv_or": " 나 ",
        "subject_syntax_default": "기타",
        "subject_syntax_token": "토큰",
        "subject_syntax_character": "문자",
        "subject_syntax_indent": "띄워쓰기",
        "subject_conv_default": "기타",
        "subject_conv_general": "일반",
        "subject_conv_variable": "변수",
        "subject_conv_list": "리스트",
        "subject_conv_object": "객체",
        "subject_conv_function": "함수",
        "alert_variable_empty_text": "등록된 변수 중에 공백(띄어쓰기)이 포함된 변수가 있으면 모드 변환을 할 수 없습니다.",
        "alert_list_empty_text": "등록된 리스트 중에 공백(띄어쓰기)이 포함된 리스트가 있으면 모드 변환을 할 수 없습니다.",
        "alert_function_name_field_multi": "등록된 함수 중에 함수 이름에 [이름] 블록이 두번이상 포함되어 있으면 모드 변환을 할 수 없습니다.",
        "alert_function_name_disorder": "등록된 함수 중에[이름] 블록이 [문자/숫자값] 또는 [판단값] 블록보다 뒤에 쓰이면 모드 변환을 할 수 없습니다.",
        "alert_function_has_boolean": "엔트리파이선으로 변환 후 다시 블록코딩으로 모드로 변경하면 함수에 사용된 [판단값]은 모두 [문자/숫자형]으로 변환됩니다.",
        "alert_function_editor": "함수 생성 및 편집 중에는 모드 변환을 할 수 없습니다.",
        "alert_function_no_support": "텍스트모드에서는 함수 생성 및 편집을 할 수 없습니다.",
        "alert_list_no_support": "텍스트모드에서는 리스트 생성 및 편집을 할 수 없습니다.",
        "alert_variable_no_support": "텍스트모드에서는 변수 생성 및 편집을 할 수 없습니다.",
        "alert_signal_no_support": "텍스트모드에서는 신호 생성 및 편집을 할 수 없습니다.",
        "alert_legacy_no_support": "전환할 수 없는 블록이 존재하여 모드 변환을 할 수 없습니다.",
        "alert_variable_empty_text_add_change": "변수명 공백(띄어쓰기)이 포함될 수 없습니다.",
        "alert_list_empty_text_add_change": "리스트명에 공백(띄어쓰기)이 포함될 수 없습니다.",
        "alert_list_contains_exceed_length_value": "리스트 항목에 15자리 이상의 수가 입력되어 있으면 모드 변환을 할 수 없습니다.",
        "alert_function_name_empty_text_add_change": "함수명에 공백(띄어쓰기)이 포함될 수 없습니다.",
        "alert_api_no_support": "확장, 데이터분석, 인공지능 블록이 조립된 경우에는\\n엔트리파이선 모드로 변경할 수 없습니다.\\n해당 블록을 모두 삭제하고 엔트리파이선 모드로 변경할까요?",
        "warn_unnecessary_arguments": "&(calleeName)(); 는 괄호 사이에 값이 입력될 필요가 없는 명령어 입니다. (line:&(lineNumber))",
        "python_code": " 오브젝트의 파이선 코드",
        "eof": "줄바꿈",
        "newline": "줄바꿈",
        "indent": "들여쓰기",
        "num": "숫자",
        "string": "문자열",
        "name": "변수명"
    },
    "video_gender": { "male": "남성", "female": "여성" },
    "video_emotion_params": {
        "angry": "분노",
        "disgusted": "혐오",
        "fearful": "두려움",
        "happy": "행복",
        "neutral": "무표정",
        "sad": "슬픔",
        "surprised": "놀람"
    },
    "Support": ["ko", "en", "vn", "jp"]
}
